<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Arthur</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://xizie.com/"/>
  <updated>2019-02-27T12:04:16.700Z</updated>
  <id>http://xizie.com/</id>
  
  <author>
    <name>Bin Xu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Kubernetes源码阅读—kube-scheduler(一)</title>
    <link href="http://xizie.com/2019/02/26/Kubernetes%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E2%80%94kube-scheduler(%E4%B8%80)/"/>
    <id>http://xizie.com/2019/02/26/Kubernetes源码阅读—kube-scheduler(一)/</id>
    <published>2019-02-26T02:55:57.000Z</published>
    <updated>2019-02-27T12:04:16.700Z</updated>
    
    <content type="html"><![CDATA[<p>kube-scheduler依赖于cobra包构建命令行支持，该包是支持通用的命令行构建库。</p><p><img src="/2019/02/26/Kubernetes源码阅读—kube-scheduler(一)/kube-scheduler.jpg" alt="kube-scheduler"></p><h2 id="func-main"><a href="#func-main" class="headerlink" title="func main()"></a><code>func main()</code></h2><p><a href="https://github.com/kubernetes/kubernetes/blob/v1.11.7/cmd/kube-scheduler/scheduler.go#L34" target="_blank" rel="noopener"><code>kubernetes/cmd/kube-scheduler/scheduler.go</code></a><br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    rand.Seed(time.Now().UTC().UnixNano())</span><br><span class="line"></span><br><span class="line">    command := app.NewSchedulerCommand()   <span class="comment">// 创建Cobra格式的Scheduler Command</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> once we switch everything over to Cobra commands, we can go back to calling</span></span><br><span class="line">    <span class="comment">// utilflag.InitFlags() (by removing its pflag.Parse() call). For now, we have to set the</span></span><br><span class="line">    <span class="comment">// normalize func and add the go flag set by hand.</span></span><br><span class="line">    pflag.CommandLine.SetNormalizeFunc(utilflag.WordSepNormalizeFunc) <span class="comment">// 将配置中的_转换为-</span></span><br><span class="line">    pflag.CommandLine.AddGoFlagSet(goflag.CommandLine)</span><br><span class="line">    <span class="comment">// utilflag.InitFlags()</span></span><br><span class="line">    logs.InitLogs()</span><br><span class="line">    <span class="keyword">defer</span> logs.FlushLogs()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> err := command.Execute(); err != <span class="literal">nil</span> &#123;   <span class="comment">// 执行命令</span></span><br><span class="line">        fmt.Fprintf(os.Stderr, <span class="string">"%v\n"</span>, err)</span><br><span class="line">        os.Exit(<span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>其中，<code>NewSchedulerCommand()</code>向cobra注册了scheduler的命令。</p><h2 id="func-NewSchedulerCommand"><a href="#func-NewSchedulerCommand" class="headerlink" title="func NewSchedulerCommand()"></a><code>func NewSchedulerCommand()</code></h2><p><a href="https://github.com/kubernetes/kubernetes/blob/v1.11.7/cmd/kube-scheduler/app/server.go#L67" target="_blank" rel="noopener"><code>kubernetes/cmd/kube-scheduler/app/server.go</code></a><br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// NewSchedulerCommand creates a *cobra.Command object with default parameters</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewSchedulerCommand</span><span class="params">()</span> *<span class="title">cobra</span>.<span class="title">Command</span></span> &#123;</span><br><span class="line">    opts, err := options.NewOptions()   <span class="comment">// 新建储存scheduler的配置的options</span></span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        glog.Fatalf(<span class="string">"unable to initialize command options: %v"</span>, err)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cmd := &amp;cobra.Command&#123;  <span class="comment">// 定义Scheduler的Command</span></span><br><span class="line">        Use: <span class="string">"kube-scheduler"</span>,</span><br><span class="line">        Long: <span class="string">`The Kubernetes scheduler is a policy-rich, topology-aware,</span></span><br><span class="line"><span class="string">workload-specific function that significantly impacts availability, performance,</span></span><br><span class="line"><span class="string">and capacity. The scheduler needs to take into account individual and collective</span></span><br><span class="line"><span class="string">resource requirements, quality of service requirements, hardware/software/policy</span></span><br><span class="line"><span class="string">constraints, affinity and anti-affinity specifications, data locality, inter-workload</span></span><br><span class="line"><span class="string">interference, deadlines, and so on. Workload-specific requirements will be exposed</span></span><br><span class="line"><span class="string">through the API as necessary.`</span>,</span><br><span class="line">        Run: <span class="function"><span class="keyword">func</span><span class="params">(cmd *cobra.Command, args []<span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">            verflag.PrintAndExitIfRequested()</span><br><span class="line">            utilflag.PrintFlags(cmd.Flags())</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(args) != <span class="number">0</span> &#123;</span><br><span class="line">                fmt.Fprint(os.Stderr, <span class="string">"arguments are not supported\n"</span>)</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> errs := opts.Validate(); <span class="built_in">len</span>(errs) &gt; <span class="number">0</span> &#123;     <span class="comment">// 检查配置参数</span></span><br><span class="line">                fmt.Fprintf(os.Stderr, <span class="string">"%v\n"</span>, utilerrors.NewAggregate(errs))</span><br><span class="line">                os.Exit(<span class="number">1</span>)</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(opts.WriteConfigTo) &gt; <span class="number">0</span> &#123;    <span class="comment">// 检查是否有writeconfigto参数，如有则将Component配置写入文件</span></span><br><span class="line">                <span class="keyword">if</span> err := options.WriteConfigFile(opts.WriteConfigTo, &amp;opts.ComponentConfig); err != <span class="literal">nil</span> &#123;</span><br><span class="line">                    fmt.Fprintf(os.Stderr, <span class="string">"%v\n"</span>, err)</span><br><span class="line">                    os.Exit(<span class="number">1</span>)</span><br><span class="line">                &#125;</span><br><span class="line">                glog.Infof(<span class="string">"Wrote configuration to: %s\n"</span>, opts.WriteConfigTo)</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            c, err := opts.Config()     <span class="comment">// 根据options生成config结构体</span></span><br><span class="line">            <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">                fmt.Fprintf(os.Stderr, <span class="string">"%v\n"</span>, err)</span><br><span class="line">                os.Exit(<span class="number">1</span>)</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            stopCh := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;)</span><br><span class="line">            <span class="keyword">if</span> err := Run(c.Complete(), stopCh); err != <span class="literal">nil</span> &#123;   <span class="comment">// 具体执行函数</span></span><br><span class="line">                fmt.Fprintf(os.Stderr, <span class="string">"%v\n"</span>, err)</span><br><span class="line">                os.Exit(<span class="number">1</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    opts.AddFlags(cmd.Flags())  <span class="comment">// 添加Scheduler的配置参数</span></span><br><span class="line">    cmd.MarkFlagFilename(<span class="string">"config"</span>, <span class="string">"yaml"</span>, <span class="string">"yml"</span>, <span class="string">"json"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> cmd</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="func-Run-c-schedulerserverconfig-CompletedConfig-stopCh-lt-chan-struct"><a href="#func-Run-c-schedulerserverconfig-CompletedConfig-stopCh-lt-chan-struct" class="headerlink" title="func Run(c schedulerserverconfig.CompletedConfig, stopCh &lt;-chan struct{})"></a><code>func Run(c schedulerserverconfig.CompletedConfig, stopCh &lt;-chan struct{})</code></h2><p><a href="https://github.com/kubernetes/kubernetes/blob/v1.11.7/cmd/kube-scheduler/app/server.go#L124" target="_blank" rel="noopener"><code>kubernetes/cmd/kube-scheduler/app/server.go</code></a><br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Run</span><span class="params">(c schedulerserverconfig.CompletedConfig, stopCh &lt;-<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">    <span class="comment">// To help debugging, immediately log version</span></span><br><span class="line">    glog.Infof(<span class="string">"Version: %+v"</span>, version.Get())</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Apply algorithms based on feature gates.</span></span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> make configurable?</span></span><br><span class="line">    <span class="comment">// 检查featureGate的设置</span></span><br><span class="line">    <span class="comment">// - 如果TaintNodesByCondition参数enable了，删除预选策略"CheckNodeCondition",</span></span><br><span class="line">    <span class="comment">// "CheckNodeMemoryPressure", "CheckNodePIDPressurePred", "CheckNodeDiskPressure",</span></span><br><span class="line">    <span class="comment">// 注册 PodToleratesNodeTaints &amp; CheckNodeUnschedulable两个预选策略</span></span><br><span class="line">    <span class="comment">// - 如果ResourceLimitsPriorityFunction参数enable了，注册ResourceLimitsPriorityMap优选策略</span></span><br><span class="line">    algorithmprovider.ApplyFeatureGates()  </span><br><span class="line"></span><br><span class="line">    <span class="comment">// Configz registration.</span></span><br><span class="line">    <span class="keyword">if</span> cz, err := configz.New(<span class="string">"componentconfig"</span>); err == <span class="literal">nil</span> &#123;</span><br><span class="line">        cz.Set(c.ComponentConfig)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> fmt.Errorf(<span class="string">"unable to register configz: %s"</span>, err)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Build a scheduler config from the provided algorithm source.</span></span><br><span class="line">    schedulerConfig, err := NewSchedulerConfig(c)   <span class="comment">// 生成scheduler的配置</span></span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> err</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Create the scheduler.</span></span><br><span class="line">    sched := scheduler.NewFromConfig(schedulerConfig)   <span class="comment">// 根据配置生成scheduler</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Prepare the event broadcaster.</span></span><br><span class="line">    <span class="keyword">if</span> c.Broadcaster != <span class="literal">nil</span> &amp;&amp; c.EventClient != <span class="literal">nil</span> &#123;   <span class="comment">// 准备事件广播</span></span><br><span class="line">        c.Broadcaster.StartRecordingToSink(&amp;v1core.EventSinkImpl&#123;Interface: c.EventClient.Events(<span class="string">""</span>)&#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Start up the healthz server. 启动healthz和metrics</span></span><br><span class="line">    <span class="keyword">if</span> c.InsecureServing != <span class="literal">nil</span> &#123;</span><br><span class="line">        separateMetrics := c.InsecureMetricsServing != <span class="literal">nil</span></span><br><span class="line">        handler := buildHandlerChain(newHealthzHandler(&amp;c.ComponentConfig, separateMetrics), <span class="literal">nil</span>, <span class="literal">nil</span>)</span><br><span class="line">        <span class="keyword">if</span> err := c.InsecureServing.Serve(handler, <span class="number">0</span>, stopCh); err != <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> fmt.Errorf(<span class="string">"failed to start healthz server: %v"</span>, err)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> c.InsecureMetricsServing != <span class="literal">nil</span> &#123;</span><br><span class="line">        handler := buildHandlerChain(newMetricsHandler(&amp;c.ComponentConfig), <span class="literal">nil</span>, <span class="literal">nil</span>)</span><br><span class="line">        <span class="keyword">if</span> err := c.InsecureMetricsServing.Serve(handler, <span class="number">0</span>, stopCh); err != <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> fmt.Errorf(<span class="string">"failed to start metrics server: %v"</span>, err)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> c.SecureServing != <span class="literal">nil</span> &#123;</span><br><span class="line">        handler := buildHandlerChain(newHealthzHandler(&amp;c.ComponentConfig, <span class="literal">false</span>), c.Authentication.Authenticator, c.Authorization.Authorizer)</span><br><span class="line">        <span class="keyword">if</span> err := c.SecureServing.Serve(handler, <span class="number">0</span>, stopCh); err != <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="comment">// fail early for secure handlers, removing the old error loop from above</span></span><br><span class="line">            <span class="keyword">return</span> fmt.Errorf(<span class="string">"failed to start healthz server: %v"</span>, err)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Start all informers. 启动pod informer watch pod的变化</span></span><br><span class="line">    <span class="keyword">go</span> c.PodInformer.Informer().Run(stopCh)</span><br><span class="line">    c.InformerFactory.Start(stopCh)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Wait for all caches to sync before scheduling.</span></span><br><span class="line">    c.InformerFactory.WaitForCacheSync(stopCh)</span><br><span class="line">    controller.WaitForCacheSync(<span class="string">"scheduler"</span>, stopCh, c.PodInformer.Informer().HasSynced)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Prepare a reusable run function.</span></span><br><span class="line">    run := <span class="function"><span class="keyword">func</span><span class="params">(stopCh &lt;-<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line">        sched.Run()     <span class="comment">// 启动协程</span></span><br><span class="line">        &lt;-stopCh</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// If leader election is enabled, run via LeaderElector until done and exit.</span></span><br><span class="line">    <span class="keyword">if</span> c.LeaderElection != <span class="literal">nil</span> &#123;    <span class="comment">// 选举leader</span></span><br><span class="line">        c.LeaderElection.Callbacks = leaderelection.LeaderCallbacks&#123;</span><br><span class="line">            OnStartedLeading: run,</span><br><span class="line">            OnStoppedLeading: <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">                utilruntime.HandleError(fmt.Errorf(<span class="string">"lost master"</span>))</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;</span><br><span class="line">        leaderElector, err := leaderelection.NewLeaderElector(*c.LeaderElection)</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> fmt.Errorf(<span class="string">"couldn't create leader elector: %v"</span>, err)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        leaderElector.Run()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> fmt.Errorf(<span class="string">"lost lease"</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Leader election is disabled, so run inline until done.</span></span><br><span class="line">    run(stopCh) <span class="comment">// 启动调度</span></span><br><span class="line">    <span class="keyword">return</span> fmt.Errorf(<span class="string">"finished without leader elect"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="func-NewSchedulerConfig-s-schedulerserverconfig-CompletedConfig"><a href="#func-NewSchedulerConfig-s-schedulerserverconfig-CompletedConfig" class="headerlink" title="func NewSchedulerConfig(s schedulerserverconfig.CompletedConfig)"></a><code>func NewSchedulerConfig(s schedulerserverconfig.CompletedConfig)</code></h2><p><a href="https://github.com/kubernetes/kubernetes/blob/v1.11.7/cmd/kube-scheduler/app/server.go#L271" target="_blank" rel="noopener"><code>kubernetes/cmd/kube-scheduler/app/server.go</code></a><br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// NewSchedulerConfig creates the scheduler configuration. This is exposed for use by tests.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewSchedulerConfig</span><span class="params">(s schedulerserverconfig.CompletedConfig)</span> <span class="params">(*scheduler.Config, error)</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> storageClassInformer storageinformers.StorageClassInformer</span><br><span class="line">    <span class="keyword">if</span> utilfeature.DefaultFeatureGate.Enabled(features.VolumeScheduling) &#123;</span><br><span class="line">        storageClassInformer = s.InformerFactory.Storage().V1().StorageClasses()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Set up the configurator which can create schedulers from configs.</span></span><br><span class="line">    configurator := factory.NewConfigFactory(</span><br><span class="line">        s.ComponentConfig.SchedulerName,</span><br><span class="line">        s.Client,</span><br><span class="line">        s.InformerFactory.Core().V1().Nodes(),</span><br><span class="line">        s.PodInformer,</span><br><span class="line">        s.InformerFactory.Core().V1().PersistentVolumes(),</span><br><span class="line">        s.InformerFactory.Core().V1().PersistentVolumeClaims(),</span><br><span class="line">        s.InformerFactory.Core().V1().ReplicationControllers(),</span><br><span class="line">        s.InformerFactory.Extensions().V1beta1().ReplicaSets(),</span><br><span class="line">        s.InformerFactory.Apps().V1beta1().StatefulSets(),</span><br><span class="line">        s.InformerFactory.Core().V1().Services(),</span><br><span class="line">        s.InformerFactory.Policy().V1beta1().PodDisruptionBudgets(),</span><br><span class="line">        storageClassInformer,</span><br><span class="line">        s.ComponentConfig.HardPodAffinitySymmetricWeight,</span><br><span class="line">        utilfeature.DefaultFeatureGate.Enabled(features.EnableEquivalenceClassCache),</span><br><span class="line">        s.ComponentConfig.DisablePreemption,</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    source := s.ComponentConfig.AlgorithmSource</span><br><span class="line">    <span class="keyword">var</span> config *scheduler.Config</span><br><span class="line">    <span class="keyword">switch</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> source.Provider != <span class="literal">nil</span>:</span><br><span class="line">        <span class="comment">// Create the config from a named algorithm provider.</span></span><br><span class="line">        sc, err := configurator.CreateFromProvider(*source.Provider)</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">"couldn't create scheduler using provider %q: %v"</span>, *source.Provider, err)</span><br><span class="line">        &#125;</span><br><span class="line">        config = sc</span><br><span class="line">    <span class="keyword">case</span> source.Policy != <span class="literal">nil</span>:</span><br><span class="line">        <span class="comment">// Create the config from a user specified policy source.</span></span><br><span class="line">        policy := &amp;schedulerapi.Policy&#123;&#125;</span><br><span class="line">        <span class="keyword">switch</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> source.Policy.File != <span class="literal">nil</span>:</span><br><span class="line">            <span class="comment">// Use a policy serialized in a file.</span></span><br><span class="line">            policyFile := source.Policy.File.Path</span><br><span class="line">            _, err := os.Stat(policyFile)</span><br><span class="line">            <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">"missing policy config file %s"</span>, policyFile)</span><br><span class="line">            &#125;</span><br><span class="line">            data, err := ioutil.ReadFile(policyFile)</span><br><span class="line">            <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">"couldn't read policy config: %v"</span>, err)</span><br><span class="line">            &#125;</span><br><span class="line">            err = runtime.DecodeInto(latestschedulerapi.Codec, []<span class="keyword">byte</span>(data), policy)</span><br><span class="line">            <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">"invalid policy: %v"</span>, err)</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">case</span> source.Policy.ConfigMap != <span class="literal">nil</span>:</span><br><span class="line">            <span class="comment">// Use a policy serialized in a config map value.</span></span><br><span class="line">            policyRef := source.Policy.ConfigMap</span><br><span class="line">            policyConfigMap, err := s.Client.CoreV1().ConfigMaps(policyRef.Namespace).Get(policyRef.Name, metav1.GetOptions&#123;&#125;)</span><br><span class="line">            <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">"couldn't get policy config map %s/%s: %v"</span>, policyRef.Namespace, policyRef.Name, err)</span><br><span class="line">            &#125;</span><br><span class="line">            data, found := policyConfigMap.Data[componentconfig.SchedulerPolicyConfigMapKey]</span><br><span class="line">            <span class="keyword">if</span> !found &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">"missing policy config map value at key %q"</span>, componentconfig.SchedulerPolicyConfigMapKey)</span><br><span class="line">            &#125;</span><br><span class="line">            err = runtime.DecodeInto(latestschedulerapi.Codec, []<span class="keyword">byte</span>(data), policy)</span><br><span class="line">            <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">"invalid policy: %v"</span>, err)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        sc, err := configurator.CreateFromConfig(*policy)</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">"couldn't create scheduler from policy: %v"</span>, err)</span><br><span class="line">        &#125;</span><br><span class="line">        config = sc</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">"unsupported algorithm source: %v"</span>, source)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Additional tweaks to the config produced by the configurator.</span></span><br><span class="line">    config.Recorder = s.Recorder</span><br><span class="line"></span><br><span class="line">    config.DisablePreemption = s.ComponentConfig.DisablePreemption</span><br><span class="line">    <span class="keyword">return</span> config, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="func-NewConfigFactory-……"><a href="#func-NewConfigFactory-……" class="headerlink" title="func NewConfigFactory(……)"></a><code>func NewConfigFactory(……)</code></h2><p><a href="https://github.com/kubernetes/kubernetes/blob/v1.11.7/pkg/scheduler/factory/factory.go#L144" target="_blank" rel="noopener"><code>kubernetes/pkg/scheduler/factory/factory.go</code></a><br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// NewConfigFactory initializes the default implementation of a Configurator To encourage eventual privatization of the struct type, we only</span></span><br><span class="line"><span class="comment">// return the interface.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewConfigFactory</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    schedulerName <span class="keyword">string</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">    client clientset.Interface,</span></span></span><br><span class="line"><span class="function"><span class="params">    nodeInformer coreinformers.NodeInformer,</span></span></span><br><span class="line"><span class="function"><span class="params">    podInformer coreinformers.PodInformer,</span></span></span><br><span class="line"><span class="function"><span class="params">    pvInformer coreinformers.PersistentVolumeInformer,</span></span></span><br><span class="line"><span class="function"><span class="params">    pvcInformer coreinformers.PersistentVolumeClaimInformer,</span></span></span><br><span class="line"><span class="function"><span class="params">    replicationControllerInformer coreinformers.ReplicationControllerInformer,</span></span></span><br><span class="line"><span class="function"><span class="params">    replicaSetInformer extensionsinformers.ReplicaSetInformer,</span></span></span><br><span class="line"><span class="function"><span class="params">    statefulSetInformer appsinformers.StatefulSetInformer,</span></span></span><br><span class="line"><span class="function"><span class="params">    serviceInformer coreinformers.ServiceInformer,</span></span></span><br><span class="line"><span class="function"><span class="params">    pdbInformer policyinformers.PodDisruptionBudgetInformer,</span></span></span><br><span class="line"><span class="function"><span class="params">    storageClassInformer storageinformers.StorageClassInformer,</span></span></span><br><span class="line"><span class="function"><span class="params">    hardPodAffinitySymmetricWeight <span class="keyword">int32</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">    enableEquivalenceClassCache <span class="keyword">bool</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">    disablePreemption <span class="keyword">bool</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">)</span> <span class="title">scheduler</span>.<span class="title">Configurator</span></span> &#123;</span><br><span class="line">    stopEverything := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;)</span><br><span class="line">    schedulerCache := schedulercache.New(<span class="number">30</span>*time.Second, stopEverything)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// storageClassInformer is only enabled through VolumeScheduling feature gate</span></span><br><span class="line">    <span class="keyword">var</span> storageClassLister storagelisters.StorageClassLister</span><br><span class="line">    <span class="keyword">if</span> storageClassInformer != <span class="literal">nil</span> &#123;</span><br><span class="line">        storageClassLister = storageClassInformer.Lister()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    c := &amp;configFactory&#123;</span><br><span class="line">        client:                         client,</span><br><span class="line">        podLister:                      schedulerCache,</span><br><span class="line">        podQueue:                       core.NewSchedulingQueue(),</span><br><span class="line">        pVLister:                       pvInformer.Lister(),</span><br><span class="line">        pVCLister:                      pvcInformer.Lister(),</span><br><span class="line">        serviceLister:                  serviceInformer.Lister(),</span><br><span class="line">        controllerLister:               replicationControllerInformer.Lister(),</span><br><span class="line">        replicaSetLister:               replicaSetInformer.Lister(),</span><br><span class="line">        statefulSetLister:              statefulSetInformer.Lister(),</span><br><span class="line">        pdbLister:                      pdbInformer.Lister(),</span><br><span class="line">        storageClassLister:             storageClassLister,</span><br><span class="line">        schedulerCache:                 schedulerCache,</span><br><span class="line">        StopEverything:                 stopEverything,</span><br><span class="line">        schedulerName:                  schedulerName,</span><br><span class="line">        hardPodAffinitySymmetricWeight: hardPodAffinitySymmetricWeight,</span><br><span class="line">        enableEquivalenceClassCache:    enableEquivalenceClassCache,</span><br><span class="line">        disablePreemption:              disablePreemption,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    c.scheduledPodsHasSynced = podInformer.Informer().HasSynced</span><br><span class="line">    <span class="comment">// 添加各个处理函数</span></span><br><span class="line">    <span class="comment">// scheduled pod cache</span></span><br><span class="line">    podInformer.Informer().AddEventHandler(</span><br><span class="line">        cache.FilteringResourceEventHandler&#123;</span><br><span class="line">            FilterFunc: <span class="function"><span class="keyword">func</span><span class="params">(obj <span class="keyword">interface</span>&#123;&#125;)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">                <span class="keyword">switch</span> t := obj.(<span class="keyword">type</span>) &#123;</span><br><span class="line">                <span class="keyword">case</span> *v1.Pod:</span><br><span class="line">                    <span class="keyword">return</span> assignedNonTerminatedPod(t)</span><br><span class="line">                <span class="keyword">case</span> cache.DeletedFinalStateUnknown:</span><br><span class="line">                    <span class="keyword">if</span> pod, ok := t.Obj.(*v1.Pod); ok &#123;</span><br><span class="line">                        <span class="keyword">return</span> assignedNonTerminatedPod(pod)</span><br><span class="line">                    &#125;</span><br><span class="line">                    runtime.HandleError(fmt.Errorf(<span class="string">"unable to convert object %T to *v1.Pod in %T"</span>, obj, c))</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    runtime.HandleError(fmt.Errorf(<span class="string">"unable to handle object in %T: %T"</span>, c, obj))</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            Handler: cache.ResourceEventHandlerFuncs&#123;</span><br><span class="line">                AddFunc:    c.addPodToCache,</span><br><span class="line">                UpdateFunc: c.updatePodInCache,</span><br><span class="line">                DeleteFunc: c.deletePodFromCache,</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">    )</span><br><span class="line">    <span class="comment">// unscheduled pod queue</span></span><br><span class="line">    podInformer.Informer().AddEventHandler(</span><br><span class="line">        cache.FilteringResourceEventHandler&#123;</span><br><span class="line">            FilterFunc: <span class="function"><span class="keyword">func</span><span class="params">(obj <span class="keyword">interface</span>&#123;&#125;)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">                <span class="keyword">switch</span> t := obj.(<span class="keyword">type</span>) &#123;</span><br><span class="line">                <span class="keyword">case</span> *v1.Pod:</span><br><span class="line">                    <span class="keyword">return</span> unassignedNonTerminatedPod(t) &amp;&amp; responsibleForPod(t, schedulerName)</span><br><span class="line">                <span class="keyword">case</span> cache.DeletedFinalStateUnknown:</span><br><span class="line">                    <span class="keyword">if</span> pod, ok := t.Obj.(*v1.Pod); ok &#123;</span><br><span class="line">                        <span class="keyword">return</span> unassignedNonTerminatedPod(pod) &amp;&amp; responsibleForPod(pod, schedulerName)</span><br><span class="line">                    &#125;</span><br><span class="line">                    runtime.HandleError(fmt.Errorf(<span class="string">"unable to convert object %T to *v1.Pod in %T"</span>, obj, c))</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    runtime.HandleError(fmt.Errorf(<span class="string">"unable to handle object in %T: %T"</span>, c, obj))</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            Handler: cache.ResourceEventHandlerFuncs&#123;</span><br><span class="line">                AddFunc:    c.addPodToSchedulingQueue,</span><br><span class="line">                UpdateFunc: c.updatePodInSchedulingQueue,</span><br><span class="line">                DeleteFunc: c.deletePodFromSchedulingQueue,</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">    )</span><br><span class="line">    <span class="comment">// ScheduledPodLister is something we provide to plug-in functions that</span></span><br><span class="line">    <span class="comment">// they may need to call.</span></span><br><span class="line">    c.scheduledPodLister = assignedPodLister&#123;podInformer.Lister()&#125;</span><br><span class="line"></span><br><span class="line">    nodeInformer.Informer().AddEventHandler(</span><br><span class="line">        cache.ResourceEventHandlerFuncs&#123;</span><br><span class="line">            AddFunc:    c.addNodeToCache,</span><br><span class="line">            UpdateFunc: c.updateNodeInCache,</span><br><span class="line">            DeleteFunc: c.deleteNodeFromCache,</span><br><span class="line">        &#125;,</span><br><span class="line">    )</span><br><span class="line">    c.nodeLister = nodeInformer.Lister()</span><br><span class="line"></span><br><span class="line">    pdbInformer.Informer().AddEventHandler(</span><br><span class="line">        cache.ResourceEventHandlerFuncs&#123;</span><br><span class="line">            AddFunc:    c.addPDBToCache,</span><br><span class="line">            UpdateFunc: c.updatePDBInCache,</span><br><span class="line">            DeleteFunc: c.deletePDBFromCache,</span><br><span class="line">        &#125;,</span><br><span class="line">    )</span><br><span class="line">    c.pdbLister = pdbInformer.Lister()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// On add and delete of PVs, it will affect equivalence cache items</span></span><br><span class="line">    <span class="comment">// related to persistent volume</span></span><br><span class="line">    pvInformer.Informer().AddEventHandler(</span><br><span class="line">        cache.ResourceEventHandlerFuncs&#123;</span><br><span class="line">            <span class="comment">// MaxPDVolumeCountPredicate: since it relies on the counts of PV.</span></span><br><span class="line">            AddFunc:    c.onPvAdd,</span><br><span class="line">            UpdateFunc: c.onPvUpdate,</span><br><span class="line">            DeleteFunc: c.onPvDelete,</span><br><span class="line">        &#125;,</span><br><span class="line">    )</span><br><span class="line">    c.pVLister = pvInformer.Lister()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// This is for MaxPDVolumeCountPredicate: add/delete PVC will affect counts of PV when it is bound.</span></span><br><span class="line">    pvcInformer.Informer().AddEventHandler(</span><br><span class="line">        cache.ResourceEventHandlerFuncs&#123;</span><br><span class="line">            AddFunc:    c.onPvcAdd,</span><br><span class="line">            UpdateFunc: c.onPvcUpdate,</span><br><span class="line">            DeleteFunc: c.onPvcDelete,</span><br><span class="line">        &#125;,</span><br><span class="line">    )</span><br><span class="line">    c.pVCLister = pvcInformer.Lister()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// This is for ServiceAffinity: affected by the selector of the service is updated.</span></span><br><span class="line">    <span class="comment">// Also, if new service is added, equivalence cache will also become invalid since</span></span><br><span class="line">    <span class="comment">// existing pods may be "captured" by this service and change this predicate result.</span></span><br><span class="line">    serviceInformer.Informer().AddEventHandler(</span><br><span class="line">        cache.ResourceEventHandlerFuncs&#123;</span><br><span class="line">            AddFunc:    c.onServiceAdd,</span><br><span class="line">            UpdateFunc: c.onServiceUpdate,</span><br><span class="line">            DeleteFunc: c.onServiceDelete,</span><br><span class="line">        &#125;,</span><br><span class="line">    )</span><br><span class="line">    c.serviceLister = serviceInformer.Lister()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Existing equivalence cache should not be affected by add/delete RC/Deployment etc,</span></span><br><span class="line">    <span class="comment">// it only make sense when pod is scheduled or deleted</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> utilfeature.DefaultFeatureGate.Enabled(features.VolumeScheduling) &#123;</span><br><span class="line">        <span class="comment">// Setup volume binder</span></span><br><span class="line">        c.volumeBinder = volumebinder.NewVolumeBinder(client, pvcInformer, pvInformer, storageClassInformer)</span><br><span class="line"></span><br><span class="line">        storageClassInformer.Informer().AddEventHandler(</span><br><span class="line">            cache.ResourceEventHandlerFuncs&#123;</span><br><span class="line">                AddFunc:    c.onStorageClassAdd,</span><br><span class="line">                DeleteFunc: c.onStorageClassDelete,</span><br><span class="line">            &#125;,</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Setup cache comparer</span></span><br><span class="line">    comparer := &amp;cacheComparer&#123;</span><br><span class="line">        podLister:  podInformer.Lister(),</span><br><span class="line">        nodeLister: nodeInformer.Lister(),</span><br><span class="line">        pdbLister:  pdbInformer.Lister(),</span><br><span class="line">        cache:      c.schedulerCache,</span><br><span class="line">        podQueue:   c.podQueue,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ch := <span class="built_in">make</span>(<span class="keyword">chan</span> os.Signal, <span class="number">1</span>)</span><br><span class="line">    signal.Notify(ch, compareSignal)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">for</span> &#123;</span><br><span class="line">            <span class="keyword">select</span> &#123;</span><br><span class="line">            <span class="keyword">case</span> &lt;-c.StopEverything:</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            <span class="keyword">case</span> &lt;-ch:</span><br><span class="line">                comparer.Compare()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> c</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="func-sched-Scheduler-Run"><a href="#func-sched-Scheduler-Run" class="headerlink" title="func (sched *Scheduler) Run()"></a><code>func (sched *Scheduler) Run()</code></h2><p><a href="https://github.com/kubernetes/kubernetes/blob/v1.11.7/pkg/scheduler/scheduler.go#L176" target="_blank" rel="noopener"><code>kubernetes/pkg/scheduler/scheduler.go</code></a><br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Run begins watching and scheduling. It waits for cache to be synced, then starts a goroutine and returns immediately.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(sched *Scheduler)</span> <span class="title">Run</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> !sched.config.WaitForCacheSync() &#123;   <span class="comment">// 检查内存是否同步，如果未同步直接return</span></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> utilfeature.DefaultFeatureGate.Enabled(features.VolumeScheduling) &#123;</span><br><span class="line">        <span class="keyword">go</span> sched.config.VolumeBinder.Run(sched.bindVolumesWorker, sched.config.StopEverything)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">go</span> wait.Until(sched.scheduleOne, <span class="number">0</span>, sched.config.StopEverything)    <span class="comment">// 循环执行scheduleOne</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="func-sched-Scheduler-scheduleOne"><a href="#func-sched-Scheduler-scheduleOne" class="headerlink" title="func (sched *Scheduler) scheduleOne()"></a><code>func (sched *Scheduler) scheduleOne()</code></h2><p><a href="https://github.com/kubernetes/kubernetes/blob/v1.11.7/pkg/scheduler/scheduler.go#L460" target="_blank" rel="noopener"><code>kubernetes/pkg/scheduler/scheduler.go</code></a><br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// scheduleOne does the entire scheduling workflow for a single pod.  It is serialized on the scheduling algorithm's host fitting.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(sched *Scheduler)</span> <span class="title">scheduleOne</span><span class="params">()</span></span> &#123;</span><br><span class="line">    pod := sched.config.NextPod()   <span class="comment">// 从FIFO queue中取出一个需要调度的pod</span></span><br><span class="line">    <span class="keyword">if</span> pod.DeletionTimestamp != <span class="literal">nil</span> &#123;   <span class="comment">// 检查是否是terminate的</span></span><br><span class="line">        sched.config.Recorder.Eventf(pod, v1.EventTypeWarning, <span class="string">"FailedScheduling"</span>, <span class="string">"skip schedule deleting pod: %v/%v"</span>, pod.Namespace, pod.Name)</span><br><span class="line">        glog.V(<span class="number">3</span>).Infof(<span class="string">"Skip schedule deleting pod: %v/%v"</span>, pod.Namespace, pod.Name)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    glog.V(<span class="number">3</span>).Infof(<span class="string">"Attempting to schedule pod: %v/%v"</span>, pod.Namespace, pod.Name)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Synchronously attempt to find a fit for the pod.</span></span><br><span class="line">    start := time.Now()</span><br><span class="line">    suggestedHost, err := sched.schedule(pod)   <span class="comment">// 执行调度算法，执行配置的预选和优选策略，选择最适合pod部署的node</span></span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="comment">// schedule() may have failed because the pod would not fit on any host, so we try to</span></span><br><span class="line">        <span class="comment">// preempt, with the expectation that the next time the pod is tried for scheduling it</span></span><br><span class="line">        <span class="comment">// will fit due to the preemption. It is also possible that a different pod will schedule</span></span><br><span class="line">        <span class="comment">// into the resources that were preempted, but this is harmless.</span></span><br><span class="line">        <span class="keyword">if</span> fitError, ok := err.(*core.FitError); ok &#123;   <span class="comment">// 如果调度返回预选和优选策略失败，则进行PodPriority优先调度</span></span><br><span class="line">            preemptionStartTime := time.Now()</span><br><span class="line">            sched.preempt(pod, fitError)</span><br><span class="line">            metrics.PreemptionAttempts.Inc()</span><br><span class="line">            metrics.SchedulingAlgorithmPremptionEvaluationDuration.Observe(metrics.SinceInMicroseconds(preemptionStartTime))</span><br><span class="line">            metrics.SchedulingLatency.WithLabelValues(metrics.PreemptionEvaluation).Observe(metrics.SinceInSeconds(preemptionStartTime))</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    metrics.SchedulingAlgorithmLatency.Observe(metrics.SinceInMicroseconds(start))</span><br><span class="line">    <span class="comment">// Tell the cache to assume that a pod now is running on a given node, even though it hasn't been bound yet.</span></span><br><span class="line">    <span class="comment">// This allows us to keep scheduling without waiting on binding to occur.</span></span><br><span class="line">    assumedPod := pod.DeepCopy()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Assume volumes first before assuming the pod.</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// If no volumes need binding, then nil is returned, and continue to assume the pod.</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// Otherwise, error is returned and volume binding is started asynchronously for all of the pod's volumes.</span></span><br><span class="line">    <span class="comment">// scheduleOne() returns immediately on error, so that it doesn't continue to assume the pod.</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// After the asynchronous volume binding updates are made, it will send the pod back through the scheduler for</span></span><br><span class="line">    <span class="comment">// subsequent passes until all volumes are fully bound.</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// This function modifies 'assumedPod' if volume binding is required.</span></span><br><span class="line">    err = sched.assumeAndBindVolumes(assumedPod, suggestedHost) <span class="comment">// 确保volumes bind到pod</span></span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// assume modifies `assumedPod` by setting NodeName=suggestedHost</span></span><br><span class="line">    err = sched.assume(assumedPod, suggestedHost)   <span class="comment">// 确保pod到将要调度的node</span></span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// bind the pod to its host asynchronously (we can do this b/c of the assumption step above).</span></span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        err := sched.bind(assumedPod, &amp;v1.Binding&#123;  <span class="comment">// bind pod到选出来的node</span></span><br><span class="line">            ObjectMeta: metav1.ObjectMeta&#123;Namespace: assumedPod.Namespace, Name: assumedPod.Name, UID: assumedPod.UID&#125;,</span><br><span class="line">            Target: v1.ObjectReference&#123;</span><br><span class="line">                Kind: <span class="string">"Node"</span>,</span><br><span class="line">                Name: suggestedHost,</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;)</span><br><span class="line">        metrics.E2eSchedulingLatency.Observe(metrics.SinceInMicroseconds(start))</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">            glog.Errorf(<span class="string">"Internal error binding pod: (%v)"</span>, err)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>Scheduler.scheduleOne</code>执行Scheduler真正的调度逻辑，每次从PodQueue中取出一个pod调度：</p><ul><li>从PodQueue中取出一个pod</li><li>检查是否是需要删除的Pod，如果是则返回error</li><li>执行ScheduleAlgorithm的Schedule接口，进行预选和优选，选出适合的node</li><li>如果预选及优选失败，执行Scheduler.preempt方法检查是否开启PodPriority优先调度，如果开启了则进行PodPriority优先调度</li><li>assume pod以及assume bound volume</li><li>bind pod，如果bind失败，写失败日志</li></ul><h2 id="func-sched-Scheduler-schedule-pod-v1-Pod"><a href="#func-sched-Scheduler-schedule-pod-v1-Pod" class="headerlink" title="func (sched *Scheduler) schedule(pod *v1.Pod)"></a><code>func (sched *Scheduler) schedule(pod *v1.Pod)</code></h2><p><a href="https://github.com/kubernetes/kubernetes/blob/v1.11.7/pkg/scheduler/scheduler.go#L194" target="_blank" rel="noopener"><code>kubernetes/pkg/scheduler/scheduler.go</code></a><br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// schedule implements the scheduling algorithm and returns the suggested host.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(sched *Scheduler)</span> <span class="title">schedule</span><span class="params">(pod *v1.Pod)</span> <span class="params">(<span class="keyword">string</span>, error)</span></span> &#123;</span><br><span class="line">    host, err := sched.config.Algorithm.Schedule(pod, sched.config.NodeLister)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        glog.V(<span class="number">1</span>).Infof(<span class="string">"Failed to schedule pod: %v/%v"</span>, pod.Namespace, pod.Name)</span><br><span class="line">        pod = pod.DeepCopy()</span><br><span class="line">        sched.config.Error(pod, err)</span><br><span class="line">        sched.config.Recorder.Eventf(pod, v1.EventTypeWarning, <span class="string">"FailedScheduling"</span>, <span class="string">"%v"</span>, err)</span><br><span class="line">        sched.config.PodConditionUpdater.Update(pod, &amp;v1.PodCondition&#123;</span><br><span class="line">            Type:          v1.PodScheduled,</span><br><span class="line">            Status:        v1.ConditionFalse,</span><br><span class="line">            LastProbeTime: metav1.Now(),</span><br><span class="line">            Reason:        v1.PodReasonUnschedulable,</span><br><span class="line">            Message:       err.Error(),</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span>, err</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> host, err</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="func-g-genericScheduler-Schedule-pod-v1-Pod-nodeLister-algorithm-NodeLister"><a href="#func-g-genericScheduler-Schedule-pod-v1-Pod-nodeLister-algorithm-NodeLister" class="headerlink" title="func (g *genericScheduler) Schedule(pod *v1.Pod, nodeLister algorithm.NodeLister)"></a><code>func (g *genericScheduler) Schedule(pod *v1.Pod, nodeLister algorithm.NodeLister)</code></h2><p><a href="https://github.com/kubernetes/kubernetes/blob/v1.11.7/pkg/scheduler/core/generic_scheduler.go#L107" target="_blank" rel="noopener"><code>kubernetes/pkg/scheduler/core/generic_scheduler.go</code></a><br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Schedule tries to schedule the given pod to one of the nodes in the node list.</span></span><br><span class="line"><span class="comment">// If it succeeds, it will return the name of the node.</span></span><br><span class="line"><span class="comment">// If it fails, it will return a FitError error with reasons.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(g *genericScheduler)</span> <span class="title">Schedule</span><span class="params">(pod *v1.Pod, nodeLister algorithm.NodeLister)</span> <span class="params">(<span class="keyword">string</span>, error)</span></span> &#123;</span><br><span class="line">    trace := utiltrace.New(fmt.Sprintf(<span class="string">"Scheduling %s/%s"</span>, pod.Namespace, pod.Name))</span><br><span class="line">    <span class="keyword">defer</span> trace.LogIfLong(<span class="number">100</span> * time.Millisecond)</span><br><span class="line">    <span class="comment">// 对pod做检查，如果使用pvc，判断pvc是否存在</span></span><br><span class="line">    <span class="keyword">if</span> err := podPassesBasicChecks(pod, g.pvcLister); err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span>, err</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 获取所有的nodes</span></span><br><span class="line">    nodes, err := nodeLister.List()</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span>, err</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(nodes) == <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span>, ErrNoNodesAvailable</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Used for all fit and priority funcs.</span></span><br><span class="line">    err = g.cache.UpdateNodeNameToInfoMap(g.cachedNodeInfoMap)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span>, err</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    trace.Step(<span class="string">"Computing predicates"</span>)</span><br><span class="line">    startPredicateEvalTime := time.Now()</span><br><span class="line">    <span class="comment">// 预选</span></span><br><span class="line">    filteredNodes, failedPredicateMap, err := g.findNodesThatFit(pod, nodes)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span>, err</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(filteredNodes) == <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span>, &amp;FitError&#123;</span><br><span class="line">            Pod:              pod,</span><br><span class="line">            NumAllNodes:      <span class="built_in">len</span>(nodes),</span><br><span class="line">            FailedPredicates: failedPredicateMap,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    metrics.SchedulingAlgorithmPredicateEvaluationDuration.Observe(metrics.SinceInMicroseconds(startPredicateEvalTime))</span><br><span class="line">    metrics.SchedulingLatency.WithLabelValues(metrics.PredicateEvaluation).Observe(metrics.SinceInSeconds(startPredicateEvalTime))</span><br><span class="line"></span><br><span class="line">    trace.Step(<span class="string">"Prioritizing"</span>)</span><br><span class="line">    startPriorityEvalTime := time.Now()</span><br><span class="line">    <span class="comment">// When only one node after predicate, just use it.</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(filteredNodes) == <span class="number">1</span> &#123;</span><br><span class="line">        metrics.SchedulingAlgorithmPriorityEvaluationDuration.Observe(metrics.SinceInMicroseconds(startPriorityEvalTime))</span><br><span class="line">        <span class="keyword">return</span> filteredNodes[<span class="number">0</span>].Name, <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 优选</span></span><br><span class="line">    metaPrioritiesInterface := g.priorityMetaProducer(pod, g.cachedNodeInfoMap)</span><br><span class="line">    priorityList, err := PrioritizeNodes(pod, g.cachedNodeInfoMap, metaPrioritiesInterface, g.prioritizers, filteredNodes, g.extenders)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span>, err</span><br><span class="line">    &#125;</span><br><span class="line">    metrics.SchedulingAlgorithmPriorityEvaluationDuration.Observe(metrics.SinceInMicroseconds(startPriorityEvalTime))</span><br><span class="line">    metrics.SchedulingLatency.WithLabelValues(metrics.PriorityEvaluation).Observe(metrics.SinceInSeconds(startPriorityEvalTime))</span><br><span class="line"></span><br><span class="line">    trace.Step(<span class="string">"Selecting host"</span>)</span><br><span class="line">    <span class="keyword">return</span> g.selectHost(priorityList)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>如果自定义调度器，则启用默认的调度器genericScheduler，方法如下：</p><ul><li>对pod做一些基础检查，如pvc</li><li>获取Node List</li><li>执行genericScheduler.findNodesThatFit方法进行预选</li><li>执行PrioritizeNodes方法对通过预选的node进行优选打分</li><li>最后找出一个优选分数最高的node，如果优选分数一样，则随机返回一个分数最高的node</li></ul><h2 id="func-g-genericScheduler-findNodesThatFit-pod-v1-Pod-nodes-v1-Node"><a href="#func-g-genericScheduler-findNodesThatFit-pod-v1-Pod-nodes-v1-Node" class="headerlink" title="func (g *genericScheduler) findNodesThatFit(pod *v1.Pod, nodes []*v1.Node)"></a><code>func (g *genericScheduler) findNodesThatFit(pod *v1.Pod, nodes []*v1.Node)</code></h2><p><a href="https://github.com/kubernetes/kubernetes/blob/v1.11.7/pkg/scheduler/core/generic_scheduler.go#L333" target="_blank" rel="noopener"><code>kubernetes/pkg/scheduler/core/generic_scheduler.go</code></a><br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Filters the nodes to find the ones that fit based on the given predicate functions</span></span><br><span class="line"><span class="comment">// Each node is passed through the predicate functions to determine if it is a fit</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(g *genericScheduler)</span> <span class="title">findNodesThatFit</span><span class="params">(pod *v1.Pod, nodes []*v1.Node)</span> <span class="params">([]*v1.Node, FailedPredicateMap, error)</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> filtered []*v1.Node</span><br><span class="line">    failedPredicateMap := FailedPredicateMap&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(g.predicates) == <span class="number">0</span> &#123;</span><br><span class="line">        filtered = nodes</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// Create filtered list with enough space to avoid growing it</span></span><br><span class="line">        <span class="comment">// and allow assigning.</span></span><br><span class="line">        filtered = <span class="built_in">make</span>([]*v1.Node, <span class="built_in">len</span>(nodes))</span><br><span class="line">        errs := errors.MessageCountMap&#123;&#125;</span><br><span class="line">        <span class="keyword">var</span> predicateResultLock sync.Mutex</span><br><span class="line">        <span class="keyword">var</span> filteredLen <span class="keyword">int32</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// We can use the same metadata producer for all nodes.</span></span><br><span class="line">        meta := g.predicateMetaProducer(pod, g.cachedNodeInfoMap)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> equivCacheInfo *equivalenceClassInfo</span><br><span class="line">        <span class="keyword">if</span> g.equivalenceCache != <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="comment">// getEquivalenceClassInfo will return immediately if no equivalence pod found</span></span><br><span class="line">            equivCacheInfo = g.equivalenceCache.getEquivalenceClassInfo(pod)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        checkNode := <span class="function"><span class="keyword">func</span><span class="params">(i <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">            nodeName := nodes[i].Name</span><br><span class="line">            fits, failedPredicates, err := podFitsOnNode(</span><br><span class="line">                pod,</span><br><span class="line">                meta,</span><br><span class="line">                g.cachedNodeInfoMap[nodeName],</span><br><span class="line">                g.predicates,</span><br><span class="line">                g.cache,</span><br><span class="line">                g.equivalenceCache,</span><br><span class="line">                g.schedulingQueue,</span><br><span class="line">                g.alwaysCheckAllPredicates,</span><br><span class="line">                equivCacheInfo,</span><br><span class="line">            )</span><br><span class="line">            <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">                predicateResultLock.Lock()</span><br><span class="line">                errs[err.Error()]++</span><br><span class="line">                predicateResultLock.Unlock()</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> fits &#123;</span><br><span class="line">                filtered[atomic.AddInt32(&amp;filteredLen, <span class="number">1</span>)<span class="number">-1</span>] = nodes[i]</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                predicateResultLock.Lock()</span><br><span class="line">                failedPredicateMap[nodeName] = failedPredicates</span><br><span class="line">                predicateResultLock.Unlock()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        workqueue.Parallelize(<span class="number">16</span>, <span class="built_in">len</span>(nodes), checkNode)</span><br><span class="line">        filtered = filtered[:filteredLen]</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(errs) &gt; <span class="number">0</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> []*v1.Node&#123;&#125;, FailedPredicateMap&#123;&#125;, errors.CreateAggregateFromMessageCountMap(errs)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(filtered) &gt; <span class="number">0</span> &amp;&amp; <span class="built_in">len</span>(g.extenders) != <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> _, extender := <span class="keyword">range</span> g.extenders &#123;</span><br><span class="line">            <span class="keyword">if</span> !extender.IsInterested(pod) &#123;</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            &#125;</span><br><span class="line">            filteredList, failedMap, err := extender.Filter(pod, filtered, g.cachedNodeInfoMap)</span><br><span class="line">            <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> extender.IsIgnorable() &#123;</span><br><span class="line">                    glog.Warningf(<span class="string">"Skipping extender %v as it returned error %v and has ignorable flag set"</span>,</span><br><span class="line">                        extender, err)</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> []*v1.Node&#123;&#125;, FailedPredicateMap&#123;&#125;, err</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> failedNodeName, failedMsg := <span class="keyword">range</span> failedMap &#123;</span><br><span class="line">                <span class="keyword">if</span> _, found := failedPredicateMap[failedNodeName]; !found &#123;</span><br><span class="line">                    failedPredicateMap[failedNodeName] = []algorithm.PredicateFailureReason&#123;&#125;</span><br><span class="line">                &#125;</span><br><span class="line">                failedPredicateMap[failedNodeName] = <span class="built_in">append</span>(failedPredicateMap[failedNodeName], predicates.NewFailureReason(failedMsg))</span><br><span class="line">            &#125;</span><br><span class="line">            filtered = filteredList</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(filtered) == <span class="number">0</span> &#123;</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> filtered, failedPredicateMap, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ul><li>CheckNode调用podFitsOnNode函数，用配置的所有的predicate policy对node进行检查</li><li>根据node数量，启动多个go routine worker进行CheckNode</li><li>如果配置了extender，则再执行extender对node进行筛选</li></ul><h2 id="func-podFitsOnNode-……"><a href="#func-podFitsOnNode-……" class="headerlink" title="func podFitsOnNode(……)"></a><code>func podFitsOnNode(……)</code></h2><p><a href="https://github.com/kubernetes/kubernetes/blob/v1.11.7/pkg/scheduler/core/generic_scheduler.go#L461" target="_blank" rel="noopener"><code>kubernetes/pkg/scheduler/core/generic_scheduler.go</code></a><br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// podFitsOnNode checks whether a node given by NodeInfo satisfies the given predicate functions.</span></span><br><span class="line"><span class="comment">// For given pod, podFitsOnNode will check if any equivalent pod exists and try to reuse its cached</span></span><br><span class="line"><span class="comment">// predicate results as possible.</span></span><br><span class="line"><span class="comment">// This function is called from two different places: Schedule and Preempt.</span></span><br><span class="line"><span class="comment">// When it is called from Schedule, we want to test whether the pod is schedulable</span></span><br><span class="line"><span class="comment">// on the node with all the existing pods on the node plus higher and equal priority</span></span><br><span class="line"><span class="comment">// pods nominated to run on the node.</span></span><br><span class="line"><span class="comment">// When it is called from Preempt, we should remove the victims of preemption and</span></span><br><span class="line"><span class="comment">// add the nominated pods. Removal of the victims is done by SelectVictimsOnNode().</span></span><br><span class="line"><span class="comment">// It removes victims from meta and NodeInfo before calling this function.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">podFitsOnNode</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    pod *v1.Pod,</span></span></span><br><span class="line"><span class="function"><span class="params">    meta algorithm.PredicateMetadata,</span></span></span><br><span class="line"><span class="function"><span class="params">    info *schedulercache.NodeInfo,</span></span></span><br><span class="line"><span class="function"><span class="params">    predicateFuncs <span class="keyword">map</span>[<span class="keyword">string</span>]algorithm.FitPredicate,</span></span></span><br><span class="line"><span class="function"><span class="params">    cache schedulercache.Cache,</span></span></span><br><span class="line"><span class="function"><span class="params">    ecache *EquivalenceCache,</span></span></span><br><span class="line"><span class="function"><span class="params">    queue SchedulingQueue,</span></span></span><br><span class="line"><span class="function"><span class="params">    alwaysCheckAllPredicates <span class="keyword">bool</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">    equivCacheInfo *equivalenceClassInfo,</span></span></span><br><span class="line"><span class="function"><span class="params">)</span> <span class="params">(<span class="keyword">bool</span>, []algorithm.PredicateFailureReason, error)</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> (</span><br><span class="line">        eCacheAvailable  <span class="keyword">bool</span></span><br><span class="line">        failedPredicates []algorithm.PredicateFailureReason</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    podsAdded := <span class="literal">false</span></span><br><span class="line">    <span class="comment">// We run predicates twice in some cases. If the node has greater or equal priority</span></span><br><span class="line">    <span class="comment">// nominated pods, we run them when those pods are added to meta and nodeInfo.</span></span><br><span class="line">    <span class="comment">// If all predicates succeed in this pass, we run them again when these</span></span><br><span class="line">    <span class="comment">// nominated pods are not added. This second pass is necessary because some</span></span><br><span class="line">    <span class="comment">// predicates such as inter-pod affinity may not pass without the nominated pods.</span></span><br><span class="line">    <span class="comment">// If there are no nominated pods for the node or if the first run of the</span></span><br><span class="line">    <span class="comment">// predicates fail, we don't run the second pass.</span></span><br><span class="line">    <span class="comment">// We consider only equal or higher priority pods in the first pass, because</span></span><br><span class="line">    <span class="comment">// those are the current "pod" must yield to them and not take a space opened</span></span><br><span class="line">    <span class="comment">// for running them. It is ok if the current "pod" take resources freed for</span></span><br><span class="line">    <span class="comment">// lower priority pods.</span></span><br><span class="line">    <span class="comment">// Requiring that the new pod is schedulable in both circumstances ensures that</span></span><br><span class="line">    <span class="comment">// we are making a conservative decision: predicates like resources and inter-pod</span></span><br><span class="line">    <span class="comment">// anti-affinity are more likely to fail when the nominated pods are treated</span></span><br><span class="line">    <span class="comment">// as running, while predicates like pod affinity are more likely to fail when</span></span><br><span class="line">    <span class="comment">// the nominated pods are treated as not running. We can't just assume the</span></span><br><span class="line">    <span class="comment">// nominated pods are running because they are not running right now and in fact,</span></span><br><span class="line">    <span class="comment">// they may end up getting scheduled to a different node.</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">2</span>; i++ &#123;</span><br><span class="line">        metaToUse := meta</span><br><span class="line">        nodeInfoToUse := info</span><br><span class="line">        <span class="keyword">if</span> i == <span class="number">0</span> &#123;</span><br><span class="line">            podsAdded, metaToUse, nodeInfoToUse = addNominatedPods(pod, meta, info, queue)</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> !podsAdded || <span class="built_in">len</span>(failedPredicates) != <span class="number">0</span> &#123;</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// Bypass eCache if node has any nominated pods.</span></span><br><span class="line">        <span class="comment">// TODO(bsalamat): consider using eCache and adding proper eCache invalidations</span></span><br><span class="line">        <span class="comment">// when pods are nominated or their nominations change.</span></span><br><span class="line">        eCacheAvailable = equivCacheInfo != <span class="literal">nil</span> &amp;&amp; !podsAdded</span><br><span class="line">        <span class="keyword">for</span> _, predicateKey := <span class="keyword">range</span> predicates.Ordering() &#123;</span><br><span class="line">            <span class="keyword">var</span> (</span><br><span class="line">                fit     <span class="keyword">bool</span></span><br><span class="line">                reasons []algorithm.PredicateFailureReason</span><br><span class="line">                err     error</span><br><span class="line">            )</span><br><span class="line">            <span class="comment">//TODO (yastij) : compute average predicate restrictiveness to export it as Prometheus metric</span></span><br><span class="line">            <span class="keyword">if</span> predicate, exist := predicateFuncs[predicateKey]; exist &#123;</span><br><span class="line">                <span class="keyword">if</span> eCacheAvailable &#123;</span><br><span class="line">                    fit, reasons, err = ecache.RunPredicate(predicate, predicateKey, pod, metaToUse, nodeInfoToUse, equivCacheInfo, cache)</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    fit, reasons, err = predicate(pod, metaToUse, nodeInfoToUse)</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>, []algorithm.PredicateFailureReason&#123;&#125;, err</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> !fit &#123;</span><br><span class="line">                    <span class="comment">// eCache is available and valid, and predicates result is unfit, record the fail reasons</span></span><br><span class="line">                    failedPredicates = <span class="built_in">append</span>(failedPredicates, reasons...)</span><br><span class="line">                    <span class="comment">// if alwaysCheckAllPredicates is false, short circuit all predicates when one predicate fails.</span></span><br><span class="line">                    <span class="keyword">if</span> !alwaysCheckAllPredicates &#123;</span><br><span class="line">                        glog.V(<span class="number">5</span>).Infoln(<span class="string">"since alwaysCheckAllPredicates has not been set, the predicate"</span> +</span><br><span class="line">                            <span class="string">"evaluation is short circuited and there are chances"</span> +</span><br><span class="line">                            <span class="string">"of other predicates failing as well."</span>)</span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">len</span>(failedPredicates) == <span class="number">0</span>, failedPredicates, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>一共会尝试进行两次predicate：</p><ul><li>第一次predicate时，调用<code>addNominatePods</code>，遍历PriorityQueue nominatedPods中所有的Pods，将那些PodPriority大于等于该调度Pod的优先级的所有nominatedPods添加到SchedulerCache的NodeInfo中，意味着调度该pod时要考虑这些高优先级nominatedPods进行预选，比如要减去他们的resourceRequest等，并更新到PredicateMetadata中，接着执行正常的predicate逻辑</li><li>第二次predicate时，如果前面的predicate逻辑有失败的情况，或者前面的podsAdded为false，那么第二次predicate立即结束，并不会触发真正的predicate逻辑</li><li>第二次predicate时，如果前面的predicate逻辑都成功，并且podAdded为true的情况下，那么需要触发真正的第二次predicate逻辑，因为nominatedPods的添加成功，可能Inter-PodAffinity会影响predicate的结果</li></ul><h2 id="func-addNominatedPods-pod-v1-Pod-meta-algorithm-PredicateMetadata-nodeInfo-schedulercache-NodeInfo-queue-SchedulingQueue"><a href="#func-addNominatedPods-pod-v1-Pod-meta-algorithm-PredicateMetadata-nodeInfo-schedulercache-NodeInfo-queue-SchedulingQueue" class="headerlink" title="func addNominatedPods(pod *v1.Pod, meta algorithm.PredicateMetadata, nodeInfo *schedulercache.NodeInfo, queue SchedulingQueue)"></a><code>func addNominatedPods(pod *v1.Pod, meta algorithm.PredicateMetadata, nodeInfo *schedulercache.NodeInfo, queue SchedulingQueue)</code></h2><p><a href="https://github.com/kubernetes/kubernetes/blob/v1.11.7/pkg/scheduler/core/generic_scheduler.go#L424" target="_blank" rel="noopener"><code>kubernetes/pkg/scheduler/core/generic_scheduler.go</code></a><br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// addNominatedPods adds pods with equal or greater priority which are nominated</span></span><br><span class="line"><span class="comment">// to run on the node given in nodeInfo to meta and nodeInfo. It returns 1) whether</span></span><br><span class="line"><span class="comment">// any pod was found, 2) augmented meta data, 3) augmented nodeInfo.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">addNominatedPods</span><span class="params">(pod *v1.Pod, meta algorithm.PredicateMetadata,</span></span></span><br><span class="line"><span class="function"><span class="params">    nodeInfo *schedulercache.NodeInfo, queue SchedulingQueue)</span> <span class="params">(<span class="keyword">bool</span>, algorithm.PredicateMetadata,</span></span></span><br><span class="line"><span class="function"><span class="params">    *schedulercache.NodeInfo)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> queue == <span class="literal">nil</span> || nodeInfo == <span class="literal">nil</span> || nodeInfo.Node() == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="comment">// This may happen only in tests.</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>, meta, nodeInfo</span><br><span class="line">    &#125;</span><br><span class="line">    nominatedPods := queue.NominatedPodsForNode(nodeInfo.Node().Name)</span><br><span class="line">    <span class="keyword">if</span> nominatedPods == <span class="literal">nil</span> || <span class="built_in">len</span>(nominatedPods) == <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>, meta, nodeInfo</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> metaOut algorithm.PredicateMetadata</span><br><span class="line">    <span class="keyword">if</span> meta != <span class="literal">nil</span> &#123;</span><br><span class="line">        metaOut = meta.ShallowCopy()</span><br><span class="line">    &#125;</span><br><span class="line">    nodeInfoOut := nodeInfo.Clone()</span><br><span class="line">    <span class="keyword">for</span> _, p := <span class="keyword">range</span> nominatedPods &#123;</span><br><span class="line">        <span class="keyword">if</span> util.GetPodPriority(p) &gt;= util.GetPodPriority(pod) &amp;&amp; p.UID != pod.UID &#123;</span><br><span class="line">            nodeInfoOut.AddPod(p)</span><br><span class="line">            <span class="keyword">if</span> metaOut != <span class="literal">nil</span> &#123;</span><br><span class="line">                metaOut.AddPod(p, nodeInfoOut)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>, metaOut, nodeInfoOut</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>addNominatedPods</code>负责生成临时的schedulercache.NodeInfo和algorithm.PredicateMetadata，提供给具体的predicate Function进行预选处理：</p><ul><li>调用NominatedPodsForNode获取PriorityQueue中的该node上的nominatedPods cache数据，如果nominatedPods为空，则返回false结束</li><li>克隆出PredicateMeta和NodeInfo对象，遍历nominatedPods，将优先级不低于待调度pod的nominatedPods加入到克隆出来的nodeInfoOut和metaOut中，这些对象最终会传入到predicate Functions中进行预选处理</li></ul><h2 id="func-PrioritizeNodes-……"><a href="#func-PrioritizeNodes-……" class="headerlink" title="func PrioritizeNodes(……)"></a><code>func PrioritizeNodes(……)</code></h2><p><a href="https://github.com/kubernetes/kubernetes/blob/v1.11.7/pkg/scheduler/core/generic_scheduler.go#L549" target="_blank" rel="noopener"><code>kubernetes/pkg/scheduler/core/generic_scheduler.go</code></a><br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// PrioritizeNodes prioritizes the nodes by running the individual priority functions in parallel.</span></span><br><span class="line"><span class="comment">// Each priority function is expected to set a score of 0-10</span></span><br><span class="line"><span class="comment">// 0 is the lowest priority score (least preferred node) and 10 is the highest</span></span><br><span class="line"><span class="comment">// Each priority function can also have its own weight</span></span><br><span class="line"><span class="comment">// The node scores returned by the priority function are multiplied by the weights to get weighted scores</span></span><br><span class="line"><span class="comment">// All scores are finally combined (added) to get the total weighted scores of all nodes</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">PrioritizeNodes</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    pod *v1.Pod,</span></span></span><br><span class="line"><span class="function"><span class="params">    nodeNameToInfo <span class="keyword">map</span>[<span class="keyword">string</span>]*schedulercache.NodeInfo,</span></span></span><br><span class="line"><span class="function"><span class="params">    meta <span class="keyword">interface</span>&#123;&#125;,</span></span></span><br><span class="line"><span class="function"><span class="params">    priorityConfigs []algorithm.PriorityConfig,</span></span></span><br><span class="line"><span class="function"><span class="params">    nodes []*v1.Node,</span></span></span><br><span class="line"><span class="function"><span class="params">    extenders []algorithm.SchedulerExtender,</span></span></span><br><span class="line"><span class="function"><span class="params">)</span> <span class="params">(schedulerapi.HostPriorityList, error)</span></span> &#123;</span><br><span class="line">    <span class="comment">// If no priority configs are provided, then the EqualPriority function is applied</span></span><br><span class="line">    <span class="comment">// This is required to generate the priority list in the required format</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(priorityConfigs) == <span class="number">0</span> &amp;&amp; <span class="built_in">len</span>(extenders) == <span class="number">0</span> &#123;</span><br><span class="line">        result := <span class="built_in">make</span>(schedulerapi.HostPriorityList, <span class="number">0</span>, <span class="built_in">len</span>(nodes))</span><br><span class="line">        <span class="keyword">for</span> i := <span class="keyword">range</span> nodes &#123;</span><br><span class="line">            hostPriority, err := EqualPriorityMap(pod, meta, nodeNameToInfo[nodes[i].Name])</span><br><span class="line">            <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">            &#125;</span><br><span class="line">            result = <span class="built_in">append</span>(result, hostPriority)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result, <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> (</span><br><span class="line">        mu   = sync.Mutex&#123;&#125;</span><br><span class="line">        wg   = sync.WaitGroup&#123;&#125;</span><br><span class="line">        errs []error</span><br><span class="line">    )</span><br><span class="line">    appendError := <span class="function"><span class="keyword">func</span><span class="params">(err error)</span></span> &#123;</span><br><span class="line">        mu.Lock()</span><br><span class="line">        <span class="keyword">defer</span> mu.Unlock()</span><br><span class="line">        errs = <span class="built_in">append</span>(errs, err)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    results := <span class="built_in">make</span>([]schedulerapi.HostPriorityList, <span class="built_in">len</span>(priorityConfigs), <span class="built_in">len</span>(priorityConfigs))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i, priorityConfig := <span class="keyword">range</span> priorityConfigs &#123;</span><br><span class="line">        <span class="keyword">if</span> priorityConfig.Function != <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="comment">// DEPRECATED</span></span><br><span class="line">            wg.Add(<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(index <span class="keyword">int</span>, config algorithm.PriorityConfig)</span></span> &#123;</span><br><span class="line">                <span class="keyword">defer</span> wg.Done()</span><br><span class="line">                <span class="keyword">var</span> err error</span><br><span class="line">                results[index], err = config.Function(pod, nodeNameToInfo, nodes)</span><br><span class="line">                <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">                    appendError(err)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;(i, priorityConfig)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            results[i] = <span class="built_in">make</span>(schedulerapi.HostPriorityList, <span class="built_in">len</span>(nodes))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    processNode := <span class="function"><span class="keyword">func</span><span class="params">(index <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">        nodeInfo := nodeNameToInfo[nodes[index].Name]</span><br><span class="line">        <span class="keyword">var</span> err error</span><br><span class="line">        <span class="keyword">for</span> i := <span class="keyword">range</span> priorityConfigs &#123;</span><br><span class="line">            <span class="keyword">if</span> priorityConfigs[i].Function != <span class="literal">nil</span> &#123;</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            &#125;</span><br><span class="line">            results[i][index], err = priorityConfigs[i].Map(pod, meta, nodeInfo)</span><br><span class="line">            <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">                appendError(err)</span><br><span class="line">                results[i][index].Host = nodes[index].Name</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    workqueue.Parallelize(<span class="number">16</span>, <span class="built_in">len</span>(nodes), processNode)</span><br><span class="line">    <span class="keyword">for</span> i, priorityConfig := <span class="keyword">range</span> priorityConfigs &#123;</span><br><span class="line">        <span class="keyword">if</span> priorityConfig.Reduce == <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        &#125;</span><br><span class="line">        wg.Add(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(index <span class="keyword">int</span>, config algorithm.PriorityConfig)</span></span> &#123;</span><br><span class="line">            <span class="keyword">defer</span> wg.Done()</span><br><span class="line">            <span class="keyword">if</span> err := config.Reduce(pod, meta, nodeNameToInfo, results[index]); err != <span class="literal">nil</span> &#123;</span><br><span class="line">                appendError(err)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> glog.V(<span class="number">10</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> _, hostPriority := <span class="keyword">range</span> results[index] &#123;</span><br><span class="line">                    glog.Infof(<span class="string">"%v -&gt; %v: %v, Score: (%d)"</span>, pod.Name, hostPriority.Host, config.Name, hostPriority.Score)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;(i, priorityConfig)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Wait for all computations to be finished.</span></span><br><span class="line">    wg.Wait()</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(errs) != <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> schedulerapi.HostPriorityList&#123;&#125;, errors.NewAggregate(errs)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Summarize all scores.</span></span><br><span class="line">    result := <span class="built_in">make</span>(schedulerapi.HostPriorityList, <span class="number">0</span>, <span class="built_in">len</span>(nodes))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i := <span class="keyword">range</span> nodes &#123;</span><br><span class="line">        result = <span class="built_in">append</span>(result, schedulerapi.HostPriority&#123;Host: nodes[i].Name, Score: <span class="number">0</span>&#125;)</span><br><span class="line">        <span class="keyword">for</span> j := <span class="keyword">range</span> priorityConfigs &#123;</span><br><span class="line">            result[i].Score += results[j][i].Score * priorityConfigs[j].Weight</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(extenders) != <span class="number">0</span> &amp;&amp; nodes != <span class="literal">nil</span> &#123;</span><br><span class="line">        combinedScores := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>, <span class="built_in">len</span>(nodeNameToInfo))</span><br><span class="line">        <span class="keyword">for</span> _, extender := <span class="keyword">range</span> extenders &#123;</span><br><span class="line">            <span class="keyword">if</span> !extender.IsInterested(pod) &#123;</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            &#125;</span><br><span class="line">            wg.Add(<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(ext algorithm.SchedulerExtender)</span></span> &#123;</span><br><span class="line">                <span class="keyword">defer</span> wg.Done()</span><br><span class="line">                prioritizedList, weight, err := ext.Prioritize(pod, nodes)</span><br><span class="line">                <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">                    <span class="comment">// Prioritization errors from extender can be ignored, let k8s/other extenders determine the priorities</span></span><br><span class="line">                    <span class="keyword">return</span></span><br><span class="line">                &#125;</span><br><span class="line">                mu.Lock()</span><br><span class="line">                <span class="keyword">for</span> i := <span class="keyword">range</span> *prioritizedList &#123;</span><br><span class="line">                    host, score := (*prioritizedList)[i].Host, (*prioritizedList)[i].Score</span><br><span class="line">                    combinedScores[host] += score * weight</span><br><span class="line">                &#125;</span><br><span class="line">                mu.Unlock()</span><br><span class="line">            &#125;(extender)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// wait for all go routines to finish</span></span><br><span class="line">        wg.Wait()</span><br><span class="line">        <span class="keyword">for</span> i := <span class="keyword">range</span> result &#123;</span><br><span class="line">            result[i].Score += combinedScores[result[i].Host]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> glog.V(<span class="number">10</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> i := <span class="keyword">range</span> result &#123;</span><br><span class="line">            glog.V(<span class="number">10</span>).Infof(<span class="string">"Host %s =&gt; Score %d"</span>, result[i].Host, result[i].Score)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>PrioritizeNodes</code>函数对node进行优选打分：</p><ul><li>根据预选后的node数量，以及Priority Policies的数量，定义一个二维数组存储每个node的每个Priorities Policy的分数</li><li>ProcessNode对单个node遍历所有的Priorities Policy，得到每个node的每次policy的分数</li><li>根据通过预选的node数量，最多启动16个go routine worker执行processNode</li><li>对所有分数进行加权求和，得到每个node的优选分数</li><li>如果配置了extender，则再执行extender的优选打分方法extender.Prioritize，并加权到node的优选分数</li></ul><h2 id="func-sched-Scheduler-preempt-preemptor-v1-Pod-scheduleErr-error"><a href="#func-sched-Scheduler-preempt-preemptor-v1-Pod-scheduleErr-error" class="headerlink" title="func (sched *Scheduler) preempt(preemptor *v1.Pod, scheduleErr error)"></a><code>func (sched *Scheduler) preempt(preemptor *v1.Pod, scheduleErr error)</code></h2><p><a href="https://github.com/kubernetes/kubernetes/blob/v1.11.7/pkg/scheduler/scheduler.go#L216" target="_blank" rel="noopener"><code>kubernetes/pkg/scheduler/scheduler.go</code></a><br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// preempt tries to create room for a pod that has failed to schedule, by preempting lower priority pods if possible.</span></span><br><span class="line"><span class="comment">// If it succeeds, it adds the name of the node where preemption has happened to the pod annotations.</span></span><br><span class="line"><span class="comment">// It returns the node name and an error if any.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(sched *Scheduler)</span> <span class="title">preempt</span><span class="params">(preemptor *v1.Pod, scheduleErr error)</span> <span class="params">(<span class="keyword">string</span>, error)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> !util.PodPriorityEnabled() || sched.config.DisablePreemption &#123;</span><br><span class="line">        glog.V(<span class="number">3</span>).Infof(<span class="string">"Pod priority feature is not enabled or preemption is disabled by scheduler configuration."</span> +</span><br><span class="line">            <span class="string">" No preemption is performed."</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span>, <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line">    preemptor, err := sched.config.PodPreemptor.GetUpdatedPod(preemptor)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        glog.Errorf(<span class="string">"Error getting the updated preemptor pod object: %v"</span>, err)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span>, err</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    node, victims, nominatedPodsToClear, err := sched.config.Algorithm.Preempt(preemptor, sched.config.NodeLister, scheduleErr)</span><br><span class="line">    metrics.PreemptionVictims.Set(<span class="keyword">float64</span>(<span class="built_in">len</span>(victims)))</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        glog.Errorf(<span class="string">"Error preempting victims to make room for %v/%v."</span>, preemptor.Namespace, preemptor.Name)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span>, err</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> nodeName = <span class="string">""</span></span><br><span class="line">    <span class="keyword">if</span> node != <span class="literal">nil</span> &#123;</span><br><span class="line">        nodeName = node.Name</span><br><span class="line">        <span class="comment">// Update the scheduling queue with the nominated pod information. Without</span></span><br><span class="line">        <span class="comment">// this, there would be a race condition between the next scheduling cycle</span></span><br><span class="line">        <span class="comment">// and the time the scheduler receives a Pod Update for the nominated pod.</span></span><br><span class="line">        sched.config.SchedulingQueue.UpdateNominatedPodForNode(preemptor, nodeName)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Make a call to update nominated node name of the pod on the API server.</span></span><br><span class="line">        err = sched.config.PodPreemptor.SetNominatedNodeName(preemptor, nodeName)</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">            glog.Errorf(<span class="string">"Error in preemption process. Cannot update pod %v annotations: %v"</span>, preemptor.Name, err)</span><br><span class="line">            sched.config.SchedulingQueue.DeleteNominatedPodIfExists(preemptor)</span><br><span class="line">            <span class="keyword">return</span> <span class="string">""</span>, err</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> _, victim := <span class="keyword">range</span> victims &#123;</span><br><span class="line">            <span class="keyword">if</span> err := sched.config.PodPreemptor.DeletePod(victim); err != <span class="literal">nil</span> &#123;</span><br><span class="line">                glog.Errorf(<span class="string">"Error preempting pod %v/%v: %v"</span>, victim.Namespace, victim.Name, err)</span><br><span class="line">                <span class="keyword">return</span> <span class="string">""</span>, err</span><br><span class="line">            &#125;</span><br><span class="line">            sched.config.Recorder.Eventf(victim, v1.EventTypeNormal, <span class="string">"Preempted"</span>, <span class="string">"by %v/%v on node %v"</span>, preemptor.Namespace, preemptor.Name, nodeName)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Clearing nominated pods should happen outside of "if node != nil". Node could</span></span><br><span class="line">    <span class="comment">// be nil when a pod with nominated node name is eligible to preempt again,</span></span><br><span class="line">    <span class="comment">// but preemption logic does not find any node for it. In that case Preempt()</span></span><br><span class="line">    <span class="comment">// function of generic_scheduler.go returns the pod itself for removal of the annotation.</span></span><br><span class="line">    <span class="keyword">for</span> _, p := <span class="keyword">range</span> nominatedPodsToClear &#123;</span><br><span class="line">        rErr := sched.config.PodPreemptor.RemoveNominatedNodeName(p)</span><br><span class="line">        <span class="keyword">if</span> rErr != <span class="literal">nil</span> &#123;</span><br><span class="line">            glog.Errorf(<span class="string">"Cannot remove nominated node annotation of pod: %v"</span>, rErr)</span><br><span class="line">            <span class="comment">// We do not return as this error is not critical.</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> nodeName, err</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>如果预选/优选失败以后，使用<code>Scheduler.preempt</code>方法进行优先级调度：</p><ul><li>检查PodPriority是否开启，如果未开启则直接返回</li><li>由于Pod在Predicate/Priority调度失败后，会更新PodCondition，记录调度失败状态及原因，需从apiserver中获取更新后的Pod</li><li>执行scheduler.Preempt方法，选出要执行优先调度的node以及node上要删除的pod</li><li>将要调度的pod绑定到上面选出来的node</li><li>删除前两步用Preempt方法选出来的要删除的pod</li><li>抹去上一步删除的pod与node的绑定信息</li></ul><h2 id="func-g-genericScheduler-Preempt-pod-v1-Pod-nodeLister-algorithm-NodeLister-scheduleErr-error"><a href="#func-g-genericScheduler-Preempt-pod-v1-Pod-nodeLister-algorithm-NodeLister-scheduleErr-error" class="headerlink" title="func (g *genericScheduler) Preempt(pod *v1.Pod, nodeLister algorithm.NodeLister, scheduleErr error)"></a><code>func (g *genericScheduler) Preempt(pod *v1.Pod, nodeLister algorithm.NodeLister, scheduleErr error)</code></h2><p><a href="https://github.com/kubernetes/kubernetes/blob/v1.11.7/pkg/scheduler/core/generic_scheduler.go#L209" target="_blank" rel="noopener"><code>kubernetes/pkg/scheduler/core/generic_scheduler.go</code></a><br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// preempt finds nodes with pods that can be preempted to make room for "pod" to</span></span><br><span class="line"><span class="comment">// schedule. It chooses one of the nodes and preempts the pods on the node and</span></span><br><span class="line"><span class="comment">// returns 1) the node, 2) the list of preempted pods if such a node is found,</span></span><br><span class="line"><span class="comment">// 3) A list of pods whose nominated node name should be cleared, and 4) any</span></span><br><span class="line"><span class="comment">// possible error.</span></span><br><span class="line"><span class="comment">// Preempt does not update its snapshot. It uses the same snapshot used in the</span></span><br><span class="line"><span class="comment">// scheduling cycle. This is to avoid a scenario where preempt finds feasible</span></span><br><span class="line"><span class="comment">// nodes without preempting any pod. When there are many pending pods in the</span></span><br><span class="line"><span class="comment">// scheduling queue a nominated pod will go back to the queue and behind</span></span><br><span class="line"><span class="comment">// other pods with the same priority. The nominated pod prevents other pods from</span></span><br><span class="line"><span class="comment">// using the nominated resources and the nominated pod could take a long time</span></span><br><span class="line"><span class="comment">// before it is retried after many other pending pods.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(g *genericScheduler)</span> <span class="title">Preempt</span><span class="params">(pod *v1.Pod, nodeLister algorithm.NodeLister, scheduleErr error)</span> <span class="params">(*v1.Node, []*v1.Pod, []*v1.Pod, error)</span></span> &#123;</span><br><span class="line">    <span class="comment">// Scheduler may return various types of errors. Consider preemption only if</span></span><br><span class="line">    <span class="comment">// the error is of type FitError.</span></span><br><span class="line">    fitError, ok := scheduleErr.(*FitError)</span><br><span class="line">    <span class="keyword">if</span> !ok || fitError == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span>, <span class="literal">nil</span>, <span class="literal">nil</span>, <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> !podEligibleToPreemptOthers(pod, g.cachedNodeInfoMap) &#123;</span><br><span class="line">        glog.V(<span class="number">5</span>).Infof(<span class="string">"Pod %v is not eligible for more preemption."</span>, pod.Name)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span>, <span class="literal">nil</span>, <span class="literal">nil</span>, <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line">    allNodes, err := nodeLister.List()</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span>, <span class="literal">nil</span>, <span class="literal">nil</span>, err</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(allNodes) == <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span>, <span class="literal">nil</span>, <span class="literal">nil</span>, ErrNoNodesAvailable</span><br><span class="line">    &#125;</span><br><span class="line">    potentialNodes := nodesWherePreemptionMightHelp(pod, allNodes, fitError.FailedPredicates)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(potentialNodes) == <span class="number">0</span> &#123;</span><br><span class="line">        glog.V(<span class="number">3</span>).Infof(<span class="string">"Preemption will not help schedule pod %v on any node."</span>, pod.Name)</span><br><span class="line">        <span class="comment">// In this case, we should clean-up any existing nominated node name of the pod.</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span>, <span class="literal">nil</span>, []*v1.Pod&#123;pod&#125;, <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line">    pdbs, err := g.cache.ListPDBs(labels.Everything())</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span>, <span class="literal">nil</span>, <span class="literal">nil</span>, err</span><br><span class="line">    &#125;</span><br><span class="line">    nodeToVictims, err := selectNodesForPreemption(pod, g.cachedNodeInfoMap, potentialNodes, g.predicates,</span><br><span class="line">        g.predicateMetaProducer, g.schedulingQueue, pdbs)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span>, <span class="literal">nil</span>, <span class="literal">nil</span>, err</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// We will only check nodeToVictims with extenders that support preemption.</span></span><br><span class="line">    <span class="comment">// Extenders which do not support preemption may later prevent preemptor from being scheduled on the nominated</span></span><br><span class="line">    <span class="comment">// node. In that case, scheduler will find a different host for the preemptor in subsequent scheduling cycles.</span></span><br><span class="line">    nodeToVictims, err = g.processPreemptionWithExtenders(pod, nodeToVictims)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span>, <span class="literal">nil</span>, <span class="literal">nil</span>, err</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    candidateNode := pickOneNodeForPreemption(nodeToVictims)</span><br><span class="line">    <span class="keyword">if</span> candidateNode == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span>, <span class="literal">nil</span>, <span class="literal">nil</span>, err</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Lower priority pods nominated to run on this node, may no longer fit on</span></span><br><span class="line">    <span class="comment">// this node. So, we should remove their nomination. Removing their</span></span><br><span class="line">    <span class="comment">// nomination updates these pods and moves them to the active queue. It</span></span><br><span class="line">    <span class="comment">// lets scheduler find another place for them.</span></span><br><span class="line">    nominatedPods := g.getLowerPriorityNominatedPods(pod, candidateNode.Name)</span><br><span class="line">    <span class="keyword">if</span> nodeInfo, ok := g.cachedNodeInfoMap[candidateNode.Name]; ok &#123;</span><br><span class="line">        <span class="keyword">return</span> nodeInfo.Node(), nodeToVictims[candidateNode].Pods, nominatedPods, err</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span>, <span class="literal">nil</span>, <span class="literal">nil</span>, fmt.Errorf(</span><br><span class="line">        <span class="string">"preemption failed: the target node %s has been deleted from scheduler cache"</span>,</span><br><span class="line">        candidateNode.Name)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>Preempt</code>负责选出优先调度的node和要删除的pod：</p><ul><li>检查调度的错误是否是预选策略失败的error</li><li>检查cachedNodeInfoMap是否有比将要执行优先调度pod的Priority更小的pod再删除</li><li>获取所有的node list</li><li>检查调度失败的原因是否可以通过抢占其他pod修复</li><li>获取pdb list</li><li>选出通过抢占其他pod可以成功优先调度pod的node</li><li>如果有配置优先调度extender，则再执行优先调度extender筛选上一步的node</li><li>从上面步骤筛选出的node中，选出一个最优的node来做优先调度</li><li>取得候选node上所有比优先调度pod更低Priority的pods</li></ul><h2 id="func-nodesWherePreemptionMightHelp-pod-v1-Pod-nodes-v1-Node-failedPredicatesMap-FailedPredicateMap"><a href="#func-nodesWherePreemptionMightHelp-pod-v1-Pod-nodes-v1-Node-failedPredicatesMap-FailedPredicateMap" class="headerlink" title="func nodesWherePreemptionMightHelp(pod *v1.Pod, nodes []*v1.Node, failedPredicatesMap FailedPredicateMap)"></a><code>func nodesWherePreemptionMightHelp(pod *v1.Pod, nodes []*v1.Node, failedPredicatesMap FailedPredicateMap)</code></h2><p><a href="https://github.com/kubernetes/kubernetes/blob/v1.11.7/pkg/scheduler/core/generic_scheduler.go#L980" target="_blank" rel="noopener"><code>kubernetes/pkg/scheduler/core/generic_scheduler.go</code></a><br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// nodesWherePreemptionMightHelp returns a list of nodes with failed predicates</span></span><br><span class="line"><span class="comment">// that may be satisfied by removing pods from the node.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">nodesWherePreemptionMightHelp</span><span class="params">(pod *v1.Pod, nodes []*v1.Node, failedPredicatesMap FailedPredicateMap)</span> []*<span class="title">v1</span>.<span class="title">Node</span></span> &#123;</span><br><span class="line">    potentialNodes := []*v1.Node&#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> _, node := <span class="keyword">range</span> nodes &#123;</span><br><span class="line">        unresolvableReasonExist := <span class="literal">false</span></span><br><span class="line">        failedPredicates, _ := failedPredicatesMap[node.Name]</span><br><span class="line">        <span class="comment">// If we assume that scheduler looks at all nodes and populates the failedPredicateMap</span></span><br><span class="line">        <span class="comment">// (which is the case today), the !found case should never happen, but we'd prefer</span></span><br><span class="line">        <span class="comment">// to rely less on such assumptions in the code when checking does not impose</span></span><br><span class="line">        <span class="comment">// significant overhead.</span></span><br><span class="line">        <span class="comment">// Also, we currently assume all failures returned by extender as resolvable.</span></span><br><span class="line">        <span class="keyword">for</span> _, failedPredicate := <span class="keyword">range</span> failedPredicates &#123;</span><br><span class="line">            <span class="keyword">switch</span> failedPredicate &#123;</span><br><span class="line">            <span class="keyword">case</span></span><br><span class="line">                predicates.ErrNodeSelectorNotMatch,</span><br><span class="line">                predicates.ErrPodNotMatchHostName,</span><br><span class="line">                predicates.ErrTaintsTolerationsNotMatch,</span><br><span class="line">                predicates.ErrNodeLabelPresenceViolated,</span><br><span class="line">                predicates.ErrNodeNotReady,</span><br><span class="line">                predicates.ErrNodeNetworkUnavailable,</span><br><span class="line">                predicates.ErrNodeUnschedulable,</span><br><span class="line">                predicates.ErrNodeUnknownCondition,</span><br><span class="line">                predicates.ErrVolumeZoneConflict,</span><br><span class="line">                predicates.ErrVolumeNodeConflict,</span><br><span class="line">                predicates.ErrVolumeBindConflict:</span><br><span class="line">                unresolvableReasonExist = <span class="literal">true</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">                <span class="comment">// TODO(bsalamat): Please add affinity failure cases once we have specific affinity failure errors.</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> !unresolvableReasonExist &#123;</span><br><span class="line">            glog.V(<span class="number">3</span>).Infof(<span class="string">"Node %v is a potential node for preemption."</span>, node.Name)</span><br><span class="line">            potentialNodes = <span class="built_in">append</span>(potentialNodes, node)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> potentialNodes</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>nodesWherePreemptionMightHelp</code>函数筛选出potentialNodes，逻辑如下：<br>遍历所有的nodes，对每个nodes在sched.schedule()的预选阶段失败的Predicate策略进行扫描，如果failedPredicates包含以下Policy，则说明该node不适合作为Preempt的备选节点</p><ul><li>predicates.ErrNodeSelectorNotMatch</li><li>predicates.ErrPodNotMatchHostName</li><li>predicates.ErrTaintsTolerationsNotMatch</li><li>predicates.ErrNodeLabelPresenceViolated</li><li>predicates.ErrNodeNotReady</li><li>predicates.ErrNodeNetworkUnavailable</li><li>predicates.ErrNodeUnschedulable</li><li>predicates.ErrNodeUnknownCondition</li><li>predicates.ErrVolumeZoneConflict</li><li>predicates.ErrVolumeNodeConflict</li><li>predicates.ErrVolumeBindConflict</li></ul><h2 id="func-selectNodesForPreemption-……"><a href="#func-selectNodesForPreemption-……" class="headerlink" title="func selectNodesForPreemption(……)"></a><code>func selectNodesForPreemption(……)</code></h2><p><a href="https://github.com/kubernetes/kubernetes/blob/v1.11.7/pkg/scheduler/core/generic_scheduler.go#L815" target="_blank" rel="noopener"><code>kubernetes/pkg/scheduler/core/generic_scheduler.go</code></a><br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// selectNodesForPreemption finds all the nodes with possible victims for</span></span><br><span class="line"><span class="comment">// preemption in parallel.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">selectNodesForPreemption</span><span class="params">(pod *v1.Pod,</span></span></span><br><span class="line"><span class="function"><span class="params">    nodeNameToInfo <span class="keyword">map</span>[<span class="keyword">string</span>]*schedulercache.NodeInfo,</span></span></span><br><span class="line"><span class="function"><span class="params">    potentialNodes []*v1.Node,</span></span></span><br><span class="line"><span class="function"><span class="params">    predicates <span class="keyword">map</span>[<span class="keyword">string</span>]algorithm.FitPredicate,</span></span></span><br><span class="line"><span class="function"><span class="params">    metadataProducer algorithm.PredicateMetadataProducer,</span></span></span><br><span class="line"><span class="function"><span class="params">    queue SchedulingQueue,</span></span></span><br><span class="line"><span class="function"><span class="params">    pdbs []*policy.PodDisruptionBudget,</span></span></span><br><span class="line"><span class="function"><span class="params">)</span> <span class="params">(<span class="keyword">map</span>[*v1.Node]*schedulerapi.Victims, error)</span></span> &#123;</span><br><span class="line">    nodeToVictims := <span class="keyword">map</span>[*v1.Node]*schedulerapi.Victims&#123;&#125;</span><br><span class="line">    <span class="keyword">var</span> resultLock sync.Mutex</span><br><span class="line"></span><br><span class="line">    <span class="comment">// We can use the same metadata producer for all nodes.</span></span><br><span class="line">    meta := metadataProducer(pod, nodeNameToInfo)</span><br><span class="line">    checkNode := <span class="function"><span class="keyword">func</span><span class="params">(i <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">        nodeName := potentialNodes[i].Name</span><br><span class="line">        <span class="keyword">var</span> metaCopy algorithm.PredicateMetadata</span><br><span class="line">        <span class="keyword">if</span> meta != <span class="literal">nil</span> &#123;</span><br><span class="line">            metaCopy = meta.ShallowCopy()</span><br><span class="line">        &#125;</span><br><span class="line">        pods, numPDBViolations, fits := selectVictimsOnNode(pod, metaCopy, nodeNameToInfo[nodeName], predicates, queue, pdbs)</span><br><span class="line">        <span class="keyword">if</span> fits &#123;</span><br><span class="line">            resultLock.Lock()</span><br><span class="line">            victims := schedulerapi.Victims&#123;</span><br><span class="line">                Pods:             pods,</span><br><span class="line">                NumPDBViolations: numPDBViolations,</span><br><span class="line">            &#125;</span><br><span class="line">            nodeToVictims[potentialNodes[i]] = &amp;victims</span><br><span class="line">            resultLock.Unlock()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    workqueue.Parallelize(<span class="number">16</span>, <span class="built_in">len</span>(potentialNodes), checkNode)</span><br><span class="line">    <span class="keyword">return</span> nodeToVictims, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>selectNodesForPreemption</code>是根据node的数量，启动go routine worker执行<code>selectVictimsOnNode</code>选出node</p><h2 id="func-selectVictimsOnNode-……"><a href="#func-selectVictimsOnNode-……" class="headerlink" title="func selectVictimsOnNode(……)"></a><code>func selectVictimsOnNode(……)</code></h2><p><a href="https://github.com/kubernetes/kubernetes/blob/v1.11.7/pkg/scheduler/core/generic_scheduler.go#L903" target="_blank" rel="noopener"><code>kubernetes/pkg/scheduler/core/generic_scheduler.go</code></a><br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// selectVictimsOnNode finds minimum set of pods on the given node that should</span></span><br><span class="line"><span class="comment">// be preempted in order to make enough room for "pod" to be scheduled. The</span></span><br><span class="line"><span class="comment">// minimum set selected is subject to the constraint that a higher-priority pod</span></span><br><span class="line"><span class="comment">// is never preempted when a lower-priority pod could be (higher/lower relative</span></span><br><span class="line"><span class="comment">// to one another, not relative to the preemptor "pod").</span></span><br><span class="line"><span class="comment">// The algorithm first checks if the pod can be scheduled on the node when all the</span></span><br><span class="line"><span class="comment">// lower priority pods are gone. If so, it sorts all the lower priority pods by</span></span><br><span class="line"><span class="comment">// their priority and then puts them into two groups of those whose PodDisruptionBudget</span></span><br><span class="line"><span class="comment">// will be violated if preempted and other non-violating pods. Both groups are</span></span><br><span class="line"><span class="comment">// sorted by priority. It first tries to reprieve as many PDB violating pods as</span></span><br><span class="line"><span class="comment">// possible and then does them same for non-PDB-violating pods while checking</span></span><br><span class="line"><span class="comment">// that the "pod" can still fit on the node.</span></span><br><span class="line"><span class="comment">// <span class="doctag">NOTE:</span> This function assumes that it is never called if "pod" cannot be scheduled</span></span><br><span class="line"><span class="comment">// due to pod affinity, node affinity, or node anti-affinity reasons. None of</span></span><br><span class="line"><span class="comment">// these predicates can be satisfied by removing more pods from the node.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">selectVictimsOnNode</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    pod *v1.Pod,</span></span></span><br><span class="line"><span class="function"><span class="params">    meta algorithm.PredicateMetadata,</span></span></span><br><span class="line"><span class="function"><span class="params">    nodeInfo *schedulercache.NodeInfo,</span></span></span><br><span class="line"><span class="function"><span class="params">    fitPredicates <span class="keyword">map</span>[<span class="keyword">string</span>]algorithm.FitPredicate,</span></span></span><br><span class="line"><span class="function"><span class="params">    queue SchedulingQueue,</span></span></span><br><span class="line"><span class="function"><span class="params">    pdbs []*policy.PodDisruptionBudget,</span></span></span><br><span class="line"><span class="function"><span class="params">)</span> <span class="params">([]*v1.Pod, <span class="keyword">int</span>, <span class="keyword">bool</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> nodeInfo == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span>, <span class="number">0</span>, <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    potentialVictims := util.SortableList&#123;CompFunc: util.HigherPriorityPod&#125;</span><br><span class="line">    nodeInfoCopy := nodeInfo.Clone()</span><br><span class="line"></span><br><span class="line">    removePod := <span class="function"><span class="keyword">func</span><span class="params">(rp *v1.Pod)</span></span> &#123;</span><br><span class="line">        nodeInfoCopy.RemovePod(rp)</span><br><span class="line">        <span class="keyword">if</span> meta != <span class="literal">nil</span> &#123;</span><br><span class="line">            meta.RemovePod(rp)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    addPod := <span class="function"><span class="keyword">func</span><span class="params">(ap *v1.Pod)</span></span> &#123;</span><br><span class="line">        nodeInfoCopy.AddPod(ap)</span><br><span class="line">        <span class="keyword">if</span> meta != <span class="literal">nil</span> &#123;</span><br><span class="line">            meta.AddPod(ap, nodeInfoCopy)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// As the first step, remove all the lower priority pods from the node and</span></span><br><span class="line">    <span class="comment">// check if the given pod can be scheduled.</span></span><br><span class="line">    podPriority := util.GetPodPriority(pod)</span><br><span class="line">    <span class="keyword">for</span> _, p := <span class="keyword">range</span> nodeInfoCopy.Pods() &#123;</span><br><span class="line">        <span class="keyword">if</span> util.GetPodPriority(p) &lt; podPriority &#123;</span><br><span class="line">            potentialVictims.Items = <span class="built_in">append</span>(potentialVictims.Items, p)</span><br><span class="line">            removePod(p)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    potentialVictims.Sort()</span><br><span class="line">    <span class="comment">// If the new pod does not fit after removing all the lower priority pods,</span></span><br><span class="line">    <span class="comment">// we are almost done and this node is not suitable for preemption. The only condition</span></span><br><span class="line">    <span class="comment">// that we should check is if the "pod" is failing to schedule due to pod affinity</span></span><br><span class="line">    <span class="comment">// failure.</span></span><br><span class="line">    <span class="comment">// TODO(bsalamat): Consider checking affinity to lower priority pods if feasible with reasonable performance.</span></span><br><span class="line">    <span class="keyword">if</span> fits, _, err := podFitsOnNode(pod, meta, nodeInfoCopy, fitPredicates, <span class="literal">nil</span>, <span class="literal">nil</span>, queue, <span class="literal">false</span>, <span class="literal">nil</span>); !fits &#123;</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">            glog.Warningf(<span class="string">"Encountered error while selecting victims on node %v: %v"</span>, nodeInfo.Node().Name, err)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span>, <span class="number">0</span>, <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> victims []*v1.Pod</span><br><span class="line">    numViolatingVictim := <span class="number">0</span></span><br><span class="line">    <span class="comment">// Try to reprieve as many pods as possible. We first try to reprieve the PDB</span></span><br><span class="line">    <span class="comment">// violating victims and then other non-violating ones. In both cases, we start</span></span><br><span class="line">    <span class="comment">// from the highest priority victims.</span></span><br><span class="line">    violatingVictims, nonViolatingVictims := filterPodsWithPDBViolation(potentialVictims.Items, pdbs)</span><br><span class="line">    reprievePod := <span class="function"><span class="keyword">func</span><span class="params">(p *v1.Pod)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">        addPod(p)</span><br><span class="line">        fits, _, _ := podFitsOnNode(pod, meta, nodeInfoCopy, fitPredicates, <span class="literal">nil</span>, <span class="literal">nil</span>, queue, <span class="literal">false</span>, <span class="literal">nil</span>)</span><br><span class="line">        <span class="keyword">if</span> !fits &#123;</span><br><span class="line">            removePod(p)</span><br><span class="line">            victims = <span class="built_in">append</span>(victims, p)</span><br><span class="line">            glog.V(<span class="number">5</span>).Infof(<span class="string">"Pod %v is a potential preemption victim on node %v."</span>, p.Name, nodeInfo.Node().Name)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> fits</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> _, p := <span class="keyword">range</span> violatingVictims &#123;</span><br><span class="line">        <span class="keyword">if</span> !reprievePod(p) &#123;</span><br><span class="line">            numViolatingVictim++</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Now we try to reprieve non-violating victims.</span></span><br><span class="line">    <span class="keyword">for</span> _, p := <span class="keyword">range</span> nonViolatingVictims &#123;</span><br><span class="line">        reprievePod(p)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> victims, numViolatingVictim, <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>selectVictimsOnNode</code>选出node给进行优先调度的pod腾出资源需要删除的pod，以及对删除pod而导致pod少于pdb定义进行技术，流程如下：</p><ul><li>获取优先调度pod的PodPriority</li><li>获取所有比优先调度pod的PodPriority更小的pod，并执行removePod函数删除这些pod</li><li>在上一步删除Pod之后，再在node上对优先调度pod进行预选</li><li>对前面删除pod，检查是否会导致pod的数量小于pdb的min-available</li><li>先对因为pdb限制不能删除的pod执行reprievePod函数（先addPod再执行预选，如果预选失败则removePod）</li><li>再对没有pdb限制或者pdb允许删除的pod执行reprievePod函数</li></ul><h2 id="func-pickOneNodeForPreemption-nodesToVictims-map-v1-Node-schedulerapi-Victims"><a href="#func-pickOneNodeForPreemption-nodesToVictims-map-v1-Node-schedulerapi-Victims" class="headerlink" title="func pickOneNodeForPreemption(nodesToVictims map[*v1.Node]*schedulerapi.Victims)"></a><code>func pickOneNodeForPreemption(nodesToVictims map[*v1.Node]*schedulerapi.Victims)</code></h2><p><a href="https://github.com/kubernetes/kubernetes/blob/v1.11.7/pkg/scheduler/core/generic_scheduler.go#L708" target="_blank" rel="noopener"><code>kubernetes/pkg/scheduler/core/generic_scheduler.go</code></a><br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// pickOneNodeForPreemption chooses one node among the given nodes. It assumes</span></span><br><span class="line"><span class="comment">// pods in each map entry are ordered by decreasing priority.</span></span><br><span class="line"><span class="comment">// It picks a node based on the following criteria:</span></span><br><span class="line"><span class="comment">// 1. A node with minimum number of PDB violations.</span></span><br><span class="line"><span class="comment">// 2. A node with minimum highest priority victim is picked.</span></span><br><span class="line"><span class="comment">// 3. Ties are broken by sum of priorities of all victims.</span></span><br><span class="line"><span class="comment">// 4. If there are still ties, node with the minimum number of victims is picked.</span></span><br><span class="line"><span class="comment">// 5. If there are still ties, the first such node is picked (sort of randomly).</span></span><br><span class="line"><span class="comment">// The 'minNodes1' and 'minNodes2' are being reused here to save the memory</span></span><br><span class="line"><span class="comment">// allocation and garbage collection time.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">pickOneNodeForPreemption</span><span class="params">(nodesToVictims <span class="keyword">map</span>[*v1.Node]*schedulerapi.Victims)</span> *<span class="title">v1</span>.<span class="title">Node</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(nodesToVictims) == <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line">    minNumPDBViolatingPods := math.MaxInt32</span><br><span class="line">    <span class="keyword">var</span> minNodes1 []*v1.Node</span><br><span class="line">    lenNodes1 := <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> node, victims := <span class="keyword">range</span> nodesToVictims &#123;</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(victims.Pods) == <span class="number">0</span> &#123;</span><br><span class="line">            <span class="comment">// We found a node that doesn't need any preemption. Return it!</span></span><br><span class="line">            <span class="comment">// This should happen rarely when one or more pods are terminated between</span></span><br><span class="line">            <span class="comment">// the time that scheduler tries to schedule the pod and the time that</span></span><br><span class="line">            <span class="comment">// preemption logic tries to find nodes for preemption.</span></span><br><span class="line">            <span class="keyword">return</span> node</span><br><span class="line">        &#125;</span><br><span class="line">        numPDBViolatingPods := victims.NumPDBViolations</span><br><span class="line">        <span class="keyword">if</span> numPDBViolatingPods &lt; minNumPDBViolatingPods &#123;</span><br><span class="line">            minNumPDBViolatingPods = numPDBViolatingPods</span><br><span class="line">            minNodes1 = <span class="literal">nil</span></span><br><span class="line">            lenNodes1 = <span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> numPDBViolatingPods == minNumPDBViolatingPods &#123;</span><br><span class="line">            minNodes1 = <span class="built_in">append</span>(minNodes1, node)</span><br><span class="line">            lenNodes1++</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> lenNodes1 == <span class="number">1</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> minNodes1[<span class="number">0</span>]</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// There are more than one node with minimum number PDB violating pods. Find</span></span><br><span class="line">    <span class="comment">// the one with minimum highest priority victim.</span></span><br><span class="line">    minHighestPriority := <span class="keyword">int32</span>(math.MaxInt32)</span><br><span class="line">    <span class="keyword">var</span> minNodes2 = <span class="built_in">make</span>([]*v1.Node, lenNodes1)</span><br><span class="line">    lenNodes2 := <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; lenNodes1; i++ &#123;</span><br><span class="line">        node := minNodes1[i]</span><br><span class="line">        victims := nodesToVictims[node]</span><br><span class="line">        <span class="comment">// highestPodPriority is the highest priority among the victims on this node.</span></span><br><span class="line">        highestPodPriority := util.GetPodPriority(victims.Pods[<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">if</span> highestPodPriority &lt; minHighestPriority &#123;</span><br><span class="line">            minHighestPriority = highestPodPriority</span><br><span class="line">            lenNodes2 = <span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> highestPodPriority == minHighestPriority &#123;</span><br><span class="line">            minNodes2[lenNodes2] = node</span><br><span class="line">            lenNodes2++</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> lenNodes2 == <span class="number">1</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> minNodes2[<span class="number">0</span>]</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// There are a few nodes with minimum highest priority victim. Find the</span></span><br><span class="line">    <span class="comment">// smallest sum of priorities.</span></span><br><span class="line">    minSumPriorities := <span class="keyword">int64</span>(math.MaxInt64)</span><br><span class="line">    lenNodes1 = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; lenNodes2; i++ &#123;</span><br><span class="line">        <span class="keyword">var</span> sumPriorities <span class="keyword">int64</span></span><br><span class="line">        node := minNodes2[i]</span><br><span class="line">        <span class="keyword">for</span> _, pod := <span class="keyword">range</span> nodesToVictims[node].Pods &#123;</span><br><span class="line">            <span class="comment">// We add MaxInt32+1 to all priorities to make all of them &gt;= 0. This is</span></span><br><span class="line">            <span class="comment">// needed so that a node with a few pods with negative priority is not</span></span><br><span class="line">            <span class="comment">// picked over a node with a smaller number of pods with the same negative</span></span><br><span class="line">            <span class="comment">// priority (and similar scenarios).</span></span><br><span class="line">            sumPriorities += <span class="keyword">int64</span>(util.GetPodPriority(pod)) + <span class="keyword">int64</span>(math.MaxInt32+<span class="number">1</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> sumPriorities &lt; minSumPriorities &#123;</span><br><span class="line">            minSumPriorities = sumPriorities</span><br><span class="line">            lenNodes1 = <span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> sumPriorities == minSumPriorities &#123;</span><br><span class="line">            minNodes1[lenNodes1] = node</span><br><span class="line">            lenNodes1++</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> lenNodes1 == <span class="number">1</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> minNodes1[<span class="number">0</span>]</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// There are a few nodes with minimum highest priority victim and sum of priorities.</span></span><br><span class="line">    <span class="comment">// Find one with the minimum number of pods.</span></span><br><span class="line">    minNumPods := math.MaxInt32</span><br><span class="line">    lenNodes2 = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; lenNodes1; i++ &#123;</span><br><span class="line">        node := minNodes1[i]</span><br><span class="line">        numPods := <span class="built_in">len</span>(nodesToVictims[node].Pods)</span><br><span class="line">        <span class="keyword">if</span> numPods &lt; minNumPods &#123;</span><br><span class="line">            minNumPods = numPods</span><br><span class="line">            lenNodes2 = <span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> numPods == minNumPods &#123;</span><br><span class="line">            minNodes2[lenNodes2] = node</span><br><span class="line">            lenNodes2++</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// At this point, even if there are more than one node with the same score,</span></span><br><span class="line">    <span class="comment">// return the first one.</span></span><br><span class="line">    <span class="keyword">if</span> lenNodes2 &gt; <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> minNodes2[<span class="number">0</span>]</span><br><span class="line">    &#125;</span><br><span class="line">    glog.Errorf(<span class="string">"Error in logic of node scoring for preemption. We should never reach here!"</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>pickOneNodeForPreemption</code>从可以进行优先调度的node中选出最优的一个node：</p><ul><li>如果node不用preemption pod，直接返回</li><li>选出对pdb影响最小的node，如果只有一个node，直接返回</li><li>选择victims中最高PodPriority中最低的node，如果只有一个node，直接返回</li><li>选择所有victims优先级最小的node，如果只有一个node，直接返回</li><li>选择victims pod数最少的node，如果只有一个node，直接返回</li><li>如果上一步有不止一个node满足，随机选择一个node返回</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;kube-scheduler依赖于cobra包构建命令行支持，该包是支持通用的命令行构建库。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2019/02/26/Kubernetes源码阅读—kube-scheduler(一)/kube-scheduler.jpg&quot; alt=&quot;kub
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Kubernetes源码阅读—kubectl(一)</title>
    <link href="http://xizie.com/2019/02/25/Kubernetes%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E2%80%94kubectl(%E4%B8%80)/"/>
    <id>http://xizie.com/2019/02/25/Kubernetes源码阅读—kubectl(一)/</id>
    <published>2019-02-25T07:16:25.000Z</published>
    <updated>2019-02-26T01:38:10.653Z</updated>
    
    <content type="html"><![CDATA[<p>Kubectl依赖于cobra包构建命令行支持，该包是支持通用的命令行构建库。</p><h1 id="Kubectl流程分析"><a href="#Kubectl流程分析" class="headerlink" title="Kubectl流程分析"></a>Kubectl流程分析</h1><p>大致工作流程为：</p><ul><li>用户发起请求  </li><li>根据用户执行的动作，分发给处理对应动作的Cmd</li><li>解析用户命令</li><li>向ApiServer获取数据</li><li>整理返回为通用的数据集合</li><li>找到解释查询数据的句柄</li><li>使用句柄对整理出的数据集合进行打印输出</li></ul><p>以<code>kubectl describe node node1</code>为例：</p><h2 id="func-main"><a href="#func-main" class="headerlink" title="func main()"></a><code>func main()</code></h2><p><a href="https://github.com/kubernetes/kubernetes/blob/v1.11.7/cmd/kubectl/kubectl.go#L36" target="_blank" rel="noopener"><code>kubernetes/cmd/kubectl/kubectl.go</code></a><br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    rand.Seed(time.Now().UTC().UnixNano())</span><br><span class="line"></span><br><span class="line">    command := cmd.NewDefaultKubectlCommand()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> once we switch everything over to Cobra commands, we can go back to calling</span></span><br><span class="line">    <span class="comment">// utilflag.InitFlags() (by removing its pflag.Parse() call). For now, we have to set the</span></span><br><span class="line">    <span class="comment">// normalize func and add the go flag set by hand.</span></span><br><span class="line">    pflag.CommandLine.SetNormalizeFunc(utilflag.WordSepNormalizeFunc)</span><br><span class="line">    pflag.CommandLine.AddGoFlagSet(goflag.CommandLine)</span><br><span class="line">    <span class="comment">// utilflag.InitFlags()</span></span><br><span class="line">    logs.InitLogs()</span><br><span class="line">    <span class="keyword">defer</span> logs.FlushLogs()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> err := command.Execute(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Fprintf(os.Stderr, <span class="string">"%v\n"</span>, err)</span><br><span class="line">        os.Exit(<span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>其中，<code>NewDefaultKubectlCommand()</code>向cobra注册了kubectl的命令。</p><h2 id="func-NewDefaultKubectlCommand"><a href="#func-NewDefaultKubectlCommand" class="headerlink" title="func NewDefaultKubectlCommand()"></a><code>func NewDefaultKubectlCommand()</code></h2><p><a href="https://github.com/kubernetes/kubernetes/blob/v1.11.7/pkg/kubectl/cmd/cmd.go#L259" target="_blank" rel="noopener"><code>kubernetes/pkg/kubectl/cmd/cmd.go</code></a><br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewDefaultKubectlCommand</span><span class="params">()</span> *<span class="title">cobra</span>.<span class="title">Command</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> NewKubectlCommand(os.Stdin, os.Stdout, os.Stderr)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="func-NewKubectlCommand-in-io-Reader-out-err-io-Writer"><a href="#func-NewKubectlCommand-in-io-Reader-out-err-io-Writer" class="headerlink" title="func NewKubectlCommand(in io.Reader, out, err io.Writer)"></a><code>func NewKubectlCommand(in io.Reader, out, err io.Writer)</code></h2><p><a href="https://github.com/kubernetes/kubernetes/blob/v1.11.7/pkg/kubectl/cmd/cmd.go#L264" target="_blank" rel="noopener"><code>kubernetes/pkg/kubectl/cmd/cmd.go</code></a><br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// NewKubectlCommand creates the `kubectl` command and its nested children.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewKubectlCommand</span><span class="params">(in io.Reader, out, err io.Writer)</span> *<span class="title">cobra</span>.<span class="title">Command</span></span> &#123;</span><br><span class="line">    <span class="comment">// Parent command to which all subcommands are added.</span></span><br><span class="line">    cmds := &amp;cobra.Command&#123;</span><br><span class="line">        Use:   <span class="string">"kubectl"</span>,</span><br><span class="line">        Short: i18n.T(<span class="string">"kubectl controls the Kubernetes cluster manager"</span>),</span><br><span class="line">        Long: templates.LongDesc(<span class="string">`</span></span><br><span class="line"><span class="string">      kubectl controls the Kubernetes cluster manager.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">      Find more information at:</span></span><br><span class="line"><span class="string">            https://kubernetes.io/docs/reference/kubectl/overview/`</span>),</span><br><span class="line">        Run: runHelp,</span><br><span class="line">        BashCompletionFunction: bashCompletionFunc,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    flags := cmds.PersistentFlags()</span><br><span class="line">    flags.SetNormalizeFunc(utilflag.WarnWordSepNormalizeFunc) <span class="comment">// Warn for "_" flags</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Normalize all flags that are coming from other packages or pre-configurations</span></span><br><span class="line">    <span class="comment">// a.k.a. change all "_" to "-". e.g. glog package</span></span><br><span class="line">    flags.SetNormalizeFunc(utilflag.WordSepNormalizeFunc)</span><br><span class="line"></span><br><span class="line">    kubeConfigFlags := genericclioptions.NewConfigFlags()</span><br><span class="line">    kubeConfigFlags.AddFlags(flags)</span><br><span class="line">    matchVersionKubeConfigFlags := cmdutil.NewMatchVersionFlags(kubeConfigFlags)</span><br><span class="line">    matchVersionKubeConfigFlags.AddFlags(cmds.PersistentFlags())</span><br><span class="line"></span><br><span class="line">    cmds.PersistentFlags().AddGoFlagSet(flag.CommandLine)</span><br><span class="line"></span><br><span class="line">    f := cmdutil.NewFactory(matchVersionKubeConfigFlags)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Sending in 'nil' for the getLanguageFn() results in using</span></span><br><span class="line">    <span class="comment">// the LANG environment variable.</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> Consider adding a flag or file preference for setting</span></span><br><span class="line">    <span class="comment">// the language, instead of just loading from the LANG env. variable.</span></span><br><span class="line">    i18n.LoadTranslations(<span class="string">"kubectl"</span>, <span class="literal">nil</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// From this point and forward we get warnings on flags that contain "_" separators</span></span><br><span class="line">    cmds.SetGlobalNormalizationFunc(utilflag.WarnWordSepNormalizeFunc)</span><br><span class="line"></span><br><span class="line">    ioStreams := genericclioptions.IOStreams&#123;In: in, Out: out, ErrOut: err&#125;</span><br><span class="line"></span><br><span class="line">    groups := templates.CommandGroups&#123;</span><br><span class="line">        &#123;</span><br><span class="line">            Message: <span class="string">"Basic Commands (Beginner):"</span>,</span><br><span class="line">            Commands: []*cobra.Command&#123;</span><br><span class="line">                create.NewCmdCreate(f, ioStreams),</span><br><span class="line">                NewCmdExposeService(f, ioStreams),</span><br><span class="line">                NewCmdRun(f, ioStreams),</span><br><span class="line">                set.NewCmdSet(f, ioStreams),</span><br><span class="line">                deprecatedAlias(<span class="string">"run-container"</span>, NewCmdRun(f, ioStreams)),</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            Message: <span class="string">"Basic Commands (Intermediate):"</span>,</span><br><span class="line">            Commands: []*cobra.Command&#123;</span><br><span class="line">                NewCmdExplain(<span class="string">"kubectl"</span>, f, ioStreams),</span><br><span class="line">                get.NewCmdGet(<span class="string">"kubectl"</span>, f, ioStreams),</span><br><span class="line">                NewCmdEdit(f, ioStreams),</span><br><span class="line">                NewCmdDelete(f, ioStreams),</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            Message: <span class="string">"Deploy Commands:"</span>,</span><br><span class="line">            Commands: []*cobra.Command&#123;</span><br><span class="line">                rollout.NewCmdRollout(f, ioStreams),</span><br><span class="line">                NewCmdRollingUpdate(f, ioStreams),</span><br><span class="line">                NewCmdScale(f, ioStreams),</span><br><span class="line">                NewCmdAutoscale(f, ioStreams),</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            Message: <span class="string">"Cluster Management Commands:"</span>,</span><br><span class="line">            Commands: []*cobra.Command&#123;</span><br><span class="line">                NewCmdCertificate(f, ioStreams),</span><br><span class="line">                NewCmdClusterInfo(f, ioStreams),</span><br><span class="line">                NewCmdTop(f, ioStreams),</span><br><span class="line">                NewCmdCordon(f, ioStreams),</span><br><span class="line">                NewCmdUncordon(f, ioStreams),</span><br><span class="line">                NewCmdDrain(f, ioStreams),</span><br><span class="line">                NewCmdTaint(f, ioStreams),</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            Message: <span class="string">"Troubleshooting and Debugging Commands:"</span>,</span><br><span class="line">            Commands: []*cobra.Command&#123;</span><br><span class="line">                NewCmdDescribe(<span class="string">"kubectl"</span>, f, ioStreams),        <span class="comment">// 此处注册了describe的cmd</span></span><br><span class="line">                NewCmdLogs(f, ioStreams),</span><br><span class="line">                NewCmdAttach(f, ioStreams),</span><br><span class="line">                NewCmdExec(f, ioStreams),</span><br><span class="line">                NewCmdPortForward(f, ioStreams),</span><br><span class="line">                NewCmdProxy(f, ioStreams),</span><br><span class="line">                NewCmdCp(f, ioStreams),</span><br><span class="line">                auth.NewCmdAuth(f, ioStreams),</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            Message: <span class="string">"Advanced Commands:"</span>,</span><br><span class="line">            Commands: []*cobra.Command&#123;</span><br><span class="line">                NewCmdApply(<span class="string">"kubectl"</span>, f, ioStreams),</span><br><span class="line">                NewCmdPatch(f, ioStreams),</span><br><span class="line">                NewCmdReplace(f, ioStreams),</span><br><span class="line">                wait.NewCmdWait(f, ioStreams),</span><br><span class="line">                NewCmdConvert(f, ioStreams),</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            Message: <span class="string">"Settings Commands:"</span>,</span><br><span class="line">            Commands: []*cobra.Command&#123;</span><br><span class="line">                NewCmdLabel(f, ioStreams),</span><br><span class="line">                NewCmdAnnotate(<span class="string">"kubectl"</span>, f, ioStreams),</span><br><span class="line">                NewCmdCompletion(ioStreams.Out, <span class="string">""</span>),</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">    groups.Add(cmds)</span><br><span class="line"></span><br><span class="line">    filters := []<span class="keyword">string</span>&#123;<span class="string">"options"</span>&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Hide the "alpha" subcommand if there are no alpha commands in this build.</span></span><br><span class="line">    alpha := NewCmdAlpha(f, ioStreams)</span><br><span class="line">    <span class="keyword">if</span> !alpha.HasSubCommands() &#123;</span><br><span class="line">        filters = <span class="built_in">append</span>(filters, alpha.Name())</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    templates.ActsAsRootCommand(cmds, filters, groups...)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> name, completion := <span class="keyword">range</span> bash_completion_flags &#123;</span><br><span class="line">        <span class="keyword">if</span> cmds.Flag(name) != <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> cmds.Flag(name).Annotations == <span class="literal">nil</span> &#123;</span><br><span class="line">                cmds.Flag(name).Annotations = <span class="keyword">map</span>[<span class="keyword">string</span>][]<span class="keyword">string</span>&#123;&#125;</span><br><span class="line">            &#125;</span><br><span class="line">            cmds.Flag(name).Annotations[cobra.BashCompCustom] = <span class="built_in">append</span>(</span><br><span class="line">                cmds.Flag(name).Annotations[cobra.BashCompCustom],</span><br><span class="line">                completion,</span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cmds.AddCommand(alpha)</span><br><span class="line">    cmds.AddCommand(cmdconfig.NewCmdConfig(f, clientcmd.NewDefaultPathOptions(), ioStreams))</span><br><span class="line">    cmds.AddCommand(NewCmdPlugin(f, ioStreams))</span><br><span class="line">    cmds.AddCommand(NewCmdVersion(f, ioStreams))</span><br><span class="line">    cmds.AddCommand(NewCmdApiVersions(f, ioStreams))</span><br><span class="line">    cmds.AddCommand(NewCmdApiResources(f, ioStreams))</span><br><span class="line">    cmds.AddCommand(NewCmdOptions(ioStreams.Out))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> cmds</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>注册所有的cmd命令</p><p>[## <code>func NewCmdDescribe(parent string, f cmdutil.Factory, streams genericclioptions.IOStreams)</code><br><a href="https://github.com/kubernetes/kubernetes/blob/v1.11.7/pkg/kubectl/cmd/describe.go#L91" target="_blank" rel="noopener"><code>kubernetes/pkg/kubectl/cmd/describe.go</code></a><br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewCmdDescribe</span><span class="params">(parent <span class="keyword">string</span>, f cmdutil.Factory, streams genericclioptions.IOStreams)</span> *<span class="title">cobra</span>.<span class="title">Command</span></span> &#123;</span><br><span class="line">    o := &amp;DescribeOptions&#123;</span><br><span class="line">        FilenameOptions: &amp;resource.FilenameOptions&#123;&#125;,</span><br><span class="line">        DescriberSettings: &amp;printers.DescriberSettings&#123;</span><br><span class="line">            ShowEvents: <span class="literal">true</span>,</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        CmdParent: parent,</span><br><span class="line"></span><br><span class="line">        IOStreams: streams,</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    cmd := &amp;cobra.Command&#123;</span><br><span class="line">        Use: <span class="string">"describe (-f FILENAME | TYPE [NAME_PREFIX | -l label] | TYPE/NAME)"</span>,</span><br><span class="line">        DisableFlagsInUseLine: <span class="literal">true</span>,</span><br><span class="line">        Short:   i18n.T(<span class="string">"Show details of a specific resource or group of resources"</span>),</span><br><span class="line">        Long:    describeLong + <span class="string">"\n\n"</span> + cmdutil.SuggestApiResources(parent),</span><br><span class="line">        Example: describeExample,</span><br><span class="line">        Run: <span class="function"><span class="keyword">func</span><span class="params">(cmd *cobra.Command, args []<span class="keyword">string</span>)</span></span> &#123;  <span class="comment">// 处理回调函数</span></span><br><span class="line">            cmdutil.CheckErr(o.Complete(f, cmd, args))</span><br><span class="line">            cmdutil.CheckErr(o.Run())</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">    usage := <span class="string">"containing the resource to describe"</span></span><br><span class="line">    cmdutil.AddFilenameOptionFlags(cmd, o.FilenameOptions, usage)</span><br><span class="line">    cmd.Flags().StringVarP(&amp;o.Selector, <span class="string">"selector"</span>, <span class="string">"l"</span>, o.Selector, <span class="string">"Selector (label query) to filter on, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2)"</span>)</span><br><span class="line">    cmd.Flags().BoolVar(&amp;o.AllNamespaces, <span class="string">"all-namespaces"</span>, o.AllNamespaces, <span class="string">"If present, list the requested object(s) across all namespaces. Namespace in current context is ignored even if specified with --namespace."</span>)</span><br><span class="line">    cmd.Flags().BoolVar(&amp;o.DescriberSettings.ShowEvents, <span class="string">"show-events"</span>, o.DescriberSettings.ShowEvents, <span class="string">"If true, display events related to the described object."</span>)</span><br><span class="line">    cmdutil.AddIncludeUninitializedFlag(cmd)</span><br><span class="line">    <span class="keyword">return</span> cmd</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="func-o-DescribeOptions-Run"><a href="#func-o-DescribeOptions-Run" class="headerlink" title="func (o *DescribeOptions) Run()"></a><code>func (o *DescribeOptions) Run()</code></h2><p><a href="https://github.com/kubernetes/kubernetes/blob/v1.11.7/pkg/kubectl/cmd/describe.go#L156" target="_blank" rel="noopener"><code>kubernetes/pkg/kubectl/cmd/describe.go</code></a><br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(o *DescribeOptions)</span> <span class="title">Run</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line">    r := o.NewBuilder().</span><br><span class="line">        Unstructured().</span><br><span class="line">        ContinueOnError().</span><br><span class="line">        NamespaceParam(o.Namespace).DefaultNamespace().AllNamespaces(o.AllNamespaces).</span><br><span class="line">        FilenameParam(o.EnforceNamespace, o.FilenameOptions).</span><br><span class="line">        LabelSelectorParam(o.Selector).     <span class="comment">// 设置用户的标签选择</span></span><br><span class="line">        IncludeUninitialized(o.IncludeUninitialized).   </span><br><span class="line">        ResourceTypeOrNameArgs(<span class="literal">true</span>, o.BuilderArgs...).     <span class="comment">// 提取用户选择操作的对象类型</span></span><br><span class="line">        Flatten().  <span class="comment">// 决定以何种方式从Kubernetes的返回数据中提取数据</span></span><br><span class="line">        Do()        <span class="comment">// 执行命令获取数据</span></span><br><span class="line">    err := r.Err()</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> err</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    allErrs := []error&#123;&#125;</span><br><span class="line">    infos, err := r.Infos()</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> apierrors.IsNotFound(err) &amp;&amp; <span class="built_in">len</span>(o.BuilderArgs) == <span class="number">2</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> o.DescribeMatchingResources(err, o.BuilderArgs[<span class="number">0</span>], o.BuilderArgs[<span class="number">1</span>])</span><br><span class="line">        &#125;</span><br><span class="line">        allErrs = <span class="built_in">append</span>(allErrs, err)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    errs := sets.NewString()</span><br><span class="line">    first := <span class="literal">true</span></span><br><span class="line">    <span class="keyword">for</span> _, info := <span class="keyword">range</span> infos &#123;</span><br><span class="line">        mapping := info.ResourceMapping()</span><br><span class="line">        describer, err := o.Describer(mapping)</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> errs.Has(err.Error()) &#123;</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            &#125;</span><br><span class="line">            allErrs = <span class="built_in">append</span>(allErrs, err)</span><br><span class="line">            errs.Insert(err.Error())</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 通过describe方法将提取到的数据打印出来</span></span><br><span class="line">        s, err := describer.Describe(info.Namespace, info.Name, *o.DescriberSettings)</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> errs.Has(err.Error()) &#123;</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            &#125;</span><br><span class="line">            allErrs = <span class="built_in">append</span>(allErrs, err)</span><br><span class="line">            errs.Insert(err.Error())</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> first &#123;</span><br><span class="line">            first = <span class="literal">false</span></span><br><span class="line">            fmt.Fprint(o.Out, s)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            fmt.Fprintf(o.Out, <span class="string">"\n\n%s"</span>, s)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> utilerrors.NewAggregate(allErrs)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ul><li><code>o.NewBuilder().Unstructured().ContinueOnError().NamespaceParam()....Flatten()</code>该链式调用是为执行命令做准备，然后通过<code>Do()</code>是注册具体向ApiServer请求数据，并将返回数据转化为通用结构。</li><li><code>describer.Describe()</code>函数是将提取出的返回函数打印出来做可视化。</li></ul><h2 id="func-b-Builder-Do"><a href="#func-b-Builder-Do" class="headerlink" title="func (b *Builder) Do()"></a><code>func (b *Builder) Do()</code></h2><p><a href="https://github.com/kubernetes/kubernetes/blob/v1.11.7/pkg/kubectl/genericclioptions/resource/builder.go#L1059" target="_blank" rel="noopener"><code>kubernetes/pkg/kubectl/genericclioptions/resource/builder.go</code></a><br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Do returns a Result object with a Visitor for the resources identified by the Builder.</span></span><br><span class="line"><span class="comment">// The visitor will respect the error behavior specified by ContinueOnError. Note that stream</span></span><br><span class="line"><span class="comment">// inputs are consumed by the first execution - use Infos() or Object() on the Result to capture a list</span></span><br><span class="line"><span class="comment">// for further iteration.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Builder)</span> <span class="title">Do</span><span class="params">()</span> *<span class="title">Result</span></span> &#123;</span><br><span class="line">    r := b.visitorResult()</span><br><span class="line">    r.mapper = b.Mapper()</span><br><span class="line">    <span class="keyword">if</span> r.err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> r</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> b.flatten &#123;</span><br><span class="line">        r.visitor = NewFlattenListVisitor(r.visitor, b.objectTyper, b.mapper)</span><br><span class="line">    &#125;</span><br><span class="line">    helpers := []VisitorFunc&#123;&#125;</span><br><span class="line">    <span class="comment">//  注册获取数据前的动作</span></span><br><span class="line">    <span class="keyword">if</span> b.defaultNamespace &#123;</span><br><span class="line">        helpers = <span class="built_in">append</span>(helpers, SetNamespace(b.namespace))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> b.requireNamespace &#123;</span><br><span class="line">        helpers = <span class="built_in">append</span>(helpers, RequireNamespace(b.namespace))</span><br><span class="line">    &#125;</span><br><span class="line">    helpers = <span class="built_in">append</span>(helpers, FilterNamespace)</span><br><span class="line">    <span class="keyword">if</span> b.requireObject &#123;</span><br><span class="line">        <span class="comment">// 注册从ApiServer获取数据的方法</span></span><br><span class="line">        helpers = <span class="built_in">append</span>(helpers, RetrieveLazy)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 注册从返回数据中提取数据的方法</span></span><br><span class="line">    r.visitor = NewDecoratedVisitor(r.visitor, helpers...)</span><br><span class="line">    <span class="keyword">if</span> b.continueOnError &#123;</span><br><span class="line">        r.visitor = ContinueOnErrorVisitor&#123;r.visitor&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> r</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="func-RetrieveLazy-info-Info-err-error"><a href="#func-RetrieveLazy-info-Info-err-error" class="headerlink" title="func RetrieveLazy(info *Info, err error)"></a><code>func RetrieveLazy(info *Info, err error)</code></h2><p><a href="https://github.com/kubernetes/kubernetes/blob/v1.11.7/pkg/kubectl/genericclioptions/resource/vistor.go#L631" target="_blank" rel="noopener"><code>kubernetes/pkg/kubectl/genericclioptions/resource/vistor.go</code></a><br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// RetrieveLazy updates the object if it has not been loaded yet.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">RetrieveLazy</span><span class="params">(info *Info, err error)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> err</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> info.Object == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> info.Get()   <span class="comment">// 从ApiServer获取数据</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="func-NewDecoratedVisitor-v-Visitor-fn-VisitorFunc"><a href="#func-NewDecoratedVisitor-v-Visitor-fn-VisitorFunc" class="headerlink" title="func NewDecoratedVisitor(v Visitor, fn ...VisitorFunc)"></a><code>func NewDecoratedVisitor(v Visitor, fn ...VisitorFunc)</code></h2><p><a href="https://github.com/kubernetes/kubernetes/blob/v1.11.7/pkg/kubectl/genericclioptions/resource/vistor.go#L297" target="_blank" rel="noopener"><code>kubernetes/pkg/kubectl/genericclioptions/resource/vistor.go</code></a><br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// NewDecoratedVisitor will create a visitor that invokes the provided visitor functions before</span></span><br><span class="line"><span class="comment">// the user supplied visitor function is invoked, giving them the opportunity to mutate the Info</span></span><br><span class="line"><span class="comment">// object or terminate early with an error.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewDecoratedVisitor</span><span class="params">(v Visitor, fn ...VisitorFunc)</span> <span class="title">Visitor</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(fn) == <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> v</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> DecoratedVisitor&#123;v, fn&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="func-r-Result-Infos"><a href="#func-r-Result-Infos" class="headerlink" title="func (r *Result) Infos()"></a><code>func (r *Result) Infos()</code></h2><p><a href="https://github.com/kubernetes/kubernetes/blob/v1.11.7/pkg/kubectl/genericclioptions/resource/result.go#L113" target="_blank" rel="noopener"><code>kubernetes/pkg/kubectl/genericclioptions/resource/result.go</code></a><br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Infos returns an array of all of the resource infos retrieved via traversal.</span></span><br><span class="line"><span class="comment">// Will attempt to traverse the entire set of visitors only once, and will return</span></span><br><span class="line"><span class="comment">// a cached list on subsequent calls.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *Result)</span> <span class="title">Infos</span><span class="params">()</span> <span class="params">([]*Info, error)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> r.err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span>, r.err</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> r.info != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> r.info, <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    infos := []*Info&#123;&#125;</span><br><span class="line">    err := r.visitor.Visit(<span class="function"><span class="keyword">func</span><span class="params">(info *Info, err error)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> err</span><br><span class="line">        &#125;</span><br><span class="line">        infos = <span class="built_in">append</span>(infos, info)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;)</span><br><span class="line">    err = utilerrors.FilterOut(err, r.ignoreErrors...)</span><br><span class="line"></span><br><span class="line">    r.info, r.err = infos, err</span><br><span class="line">    <span class="keyword">return</span> infos, err</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="func-v-DecoratedVisitor-Visit-fn-VisitorFunc"><a href="#func-v-DecoratedVisitor-Visit-fn-VisitorFunc" class="headerlink" title="func (v DecoratedVisitor) Visit(fn VisitorFunc)"></a><code>func (v DecoratedVisitor) Visit(fn VisitorFunc)</code></h2><p><a href="https://github.com/kubernetes/kubernetes/blob/v1.11.7/pkg/kubectl/genericclioptions/resource/visitor.go#L305" target="_blank" rel="noopener"><code>kubernetes/pkg/kubectl/genericclioptions/resource/visitor.go</code></a><br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Visit implements Visitor</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(v DecoratedVisitor)</span> <span class="title">Visit</span><span class="params">(fn VisitorFunc)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> v.visitor.Visit(<span class="function"><span class="keyword">func</span><span class="params">(info *Info, err error)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> err</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> i := <span class="keyword">range</span> v.decorators &#123;</span><br><span class="line">            <span class="keyword">if</span> err := v.decorators[i](info, <span class="literal">nil</span>); err != <span class="literal">nil</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> err</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> fn(info, <span class="literal">nil</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Visitor可以使用户可以将来自ApiServer的数据转化为通用数据集合。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Kubectl依赖于cobra包构建命令行支持，该包是支持通用的命令行构建库。&lt;/p&gt;
&lt;h1 id=&quot;Kubectl流程分析&quot;&gt;&lt;a href=&quot;#Kubectl流程分析&quot; class=&quot;headerlink&quot; title=&quot;Kubectl流程分析&quot;&gt;&lt;/a&gt;Kubect
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Kubernetes源码阅读—kubelet(二)</title>
    <link href="http://xizie.com/2019/01/30/Kubernetes%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E2%80%94kubelet(%E4%BA%8C)/"/>
    <id>http://xizie.com/2019/01/30/Kubernetes源码阅读—kubelet(二)/</id>
    <published>2019-01-30T08:02:15.000Z</published>
    <updated>2019-02-26T01:33:45.438Z</updated>
    
    <content type="html"><![CDATA[<p>没有特别指出的情况下，该系列的代码分析均基于<strong>Kubernetes v1.11.7</strong>版本</p><h2 id="func-NewMainKubelet-……"><a href="#func-NewMainKubelet-……" class="headerlink" title="func NewMainKubelet(……)"></a><code>func NewMainKubelet(……)</code></h2><p><a href="https://github.com/kubernetes/kubernetes/blob/v1.11.7/pkg/kubelet/kubelet.go#L322" target="_blank" rel="noopener"><code>kubernetes/pkg/kubelet/kubelet.go</code></a><br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// NewMainKubelet instantiates a new Kubelet object along with all the required internal modules.</span></span><br><span class="line"><span class="comment">// No initialization of Kubelet and its modules should happen here.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewMainKubelet</span><span class="params">(kubeCfg *kubeletconfiginternal.KubeletConfiguration,</span></span></span><br><span class="line"><span class="function"><span class="params">    kubeDeps *Dependencies,</span></span></span><br><span class="line"><span class="function"><span class="params">    crOptions *config.ContainerRuntimeOptions,</span></span></span><br><span class="line"><span class="function"><span class="params">    containerRuntime <span class="keyword">string</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">    runtimeCgroups <span class="keyword">string</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">    hostnameOverride <span class="keyword">string</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">    nodeIP <span class="keyword">string</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">    providerID <span class="keyword">string</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">    cloudProvider <span class="keyword">string</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">    certDirectory <span class="keyword">string</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">    rootDirectory <span class="keyword">string</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">    registerNode <span class="keyword">bool</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">    registerWithTaints []api.Taint,</span></span></span><br><span class="line"><span class="function"><span class="params">    allowedUnsafeSysctls []<span class="keyword">string</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">    remoteRuntimeEndpoint <span class="keyword">string</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">    remoteImageEndpoint <span class="keyword">string</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">    experimentalMounterPath <span class="keyword">string</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">    experimentalKernelMemcgNotification <span class="keyword">bool</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">    experimentalCheckNodeCapabilitiesBeforeMount <span class="keyword">bool</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">    experimentalNodeAllocatableIgnoreEvictionThreshold <span class="keyword">bool</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">    minimumGCAge metav1.Duration,</span></span></span><br><span class="line"><span class="function"><span class="params">    maxPerPodContainerCount <span class="keyword">int32</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">    maxContainerCount <span class="keyword">int32</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">    masterServiceNamespace <span class="keyword">string</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">    registerSchedulable <span class="keyword">bool</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">    nonMasqueradeCIDR <span class="keyword">string</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">    keepTerminatedPodVolumes <span class="keyword">bool</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">    nodeLabels <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">    seccompProfileRoot <span class="keyword">string</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">    bootstrapCheckpointPath <span class="keyword">string</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">    nodeStatusMaxImages <span class="keyword">int32</span>)</span> <span class="params">(*Kubelet, error)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> rootDirectory == <span class="string">""</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">"invalid root directory %q"</span>, rootDirectory)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> kubeCfg.SyncFrequency.Duration &lt;= <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">"invalid sync frequency %d"</span>, kubeCfg.SyncFrequency.Duration)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> kubeCfg.MakeIPTablesUtilChains &#123;</span><br><span class="line">        <span class="keyword">if</span> kubeCfg.IPTablesMasqueradeBit &gt; <span class="number">31</span> || kubeCfg.IPTablesMasqueradeBit &lt; <span class="number">0</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">"iptables-masquerade-bit is not valid. Must be within [0, 31]"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> kubeCfg.IPTablesDropBit &gt; <span class="number">31</span> || kubeCfg.IPTablesDropBit &lt; <span class="number">0</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">"iptables-drop-bit is not valid. Must be within [0, 31]"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> kubeCfg.IPTablesDropBit == kubeCfg.IPTablesMasqueradeBit &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">"iptables-masquerade-bit and iptables-drop-bit must be different"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    hostname := nodeutil.GetHostname(hostnameOverride)</span><br><span class="line">    <span class="comment">// Query the cloud provider for our node name, default to hostname</span></span><br><span class="line">    nodeName := types.NodeName(hostname)</span><br><span class="line">    cloudIPs := []net.IP&#123;&#125;</span><br><span class="line">    cloudNames := []<span class="keyword">string</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">if</span> kubeDeps.Cloud != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> err error</span><br><span class="line">        instances, ok := kubeDeps.Cloud.Instances()</span><br><span class="line">        <span class="keyword">if</span> !ok &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">"failed to get instances from cloud provider"</span>)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        nodeName, err = instances.CurrentNodeName(context.TODO(), hostname)</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">"error fetching current instance name from cloud provider: %v"</span>, err)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        glog.V(<span class="number">2</span>).Infof(<span class="string">"cloud provider determined current node name to be %s"</span>, nodeName)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> utilfeature.DefaultFeatureGate.Enabled(features.RotateKubeletServerCertificate) &#123;</span><br><span class="line">            nodeAddresses, err := instances.NodeAddresses(context.TODO(), nodeName)</span><br><span class="line">            <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">"failed to get the addresses of the current instance from the cloud provider: %v"</span>, err)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> _, nodeAddress := <span class="keyword">range</span> nodeAddresses &#123;</span><br><span class="line">                <span class="keyword">switch</span> nodeAddress.Type &#123;</span><br><span class="line">                <span class="keyword">case</span> v1.NodeExternalIP, v1.NodeInternalIP:</span><br><span class="line">                    ip := net.ParseIP(nodeAddress.Address)</span><br><span class="line">                    <span class="keyword">if</span> ip != <span class="literal">nil</span> &amp;&amp; !ip.IsLoopback() &#123;</span><br><span class="line">                        cloudIPs = <span class="built_in">append</span>(cloudIPs, ip)</span><br><span class="line">                    &#125;</span><br><span class="line">                <span class="keyword">case</span> v1.NodeExternalDNS, v1.NodeInternalDNS, v1.NodeHostName:</span><br><span class="line">                    cloudNames = <span class="built_in">append</span>(cloudNames, nodeAddress.Address)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> kubeDeps.PodConfig == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> err error</span><br><span class="line">        <span class="comment">// pod获取方式：1.从文件2.从URL3.从apiserver:启动监听pod事件的线程，将pod update消息传入updates通道</span></span><br><span class="line">        kubeDeps.PodConfig, err = makePodSourceConfig(kubeCfg, kubeDeps, nodeName, bootstrapCheckpointPath)</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 容器资源回收策略</span></span><br><span class="line">    containerGCPolicy := kubecontainer.ContainerGCPolicy&#123;</span><br><span class="line">        MinAge:             minimumGCAge.Duration,</span><br><span class="line">        MaxPerPodContainer: <span class="keyword">int</span>(maxPerPodContainerCount),</span><br><span class="line">        MaxContainers:      <span class="keyword">int</span>(maxContainerCount),</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    daemonEndpoints := &amp;v1.NodeDaemonEndpoints&#123;</span><br><span class="line">        KubeletEndpoint: v1.DaemonEndpoint&#123;Port: kubeCfg.Port&#125;,</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 镜像资源回收策略</span></span><br><span class="line">    imageGCPolicy := images.ImageGCPolicy&#123;</span><br><span class="line">        MinAge:               kubeCfg.ImageMinimumGCAge.Duration,</span><br><span class="line">        HighThresholdPercent: <span class="keyword">int</span>(kubeCfg.ImageGCHighThresholdPercent),</span><br><span class="line">        LowThresholdPercent:  <span class="keyword">int</span>(kubeCfg.ImageGCLowThresholdPercent),</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    enforceNodeAllocatable := kubeCfg.EnforceNodeAllocatable</span><br><span class="line">    <span class="keyword">if</span> experimentalNodeAllocatableIgnoreEvictionThreshold &#123;</span><br><span class="line">        <span class="comment">// Do not provide kubeCfg.EnforceNodeAllocatable to eviction threshold parsing if we are not enforcing Evictions</span></span><br><span class="line">        enforceNodeAllocatable = []<span class="keyword">string</span>&#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    thresholds, err := eviction.ParseThresholdConfig(enforceNodeAllocatable, kubeCfg.EvictionHard, kubeCfg.EvictionSoft, kubeCfg.EvictionSoftGracePeriod, kubeCfg.EvictionMinimumReclaim)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">    &#125;</span><br><span class="line">    evictionConfig := eviction.Config&#123;</span><br><span class="line">        PressureTransitionPeriod: kubeCfg.EvictionPressureTransitionPeriod.Duration,</span><br><span class="line">        MaxPodGracePeriodSeconds: <span class="keyword">int64</span>(kubeCfg.EvictionMaxPodGracePeriod),</span><br><span class="line">        Thresholds:               thresholds,</span><br><span class="line">        KernelMemcgNotification:  experimentalKernelMemcgNotification,</span><br><span class="line">        PodCgroupRoot:            kubeDeps.ContainerManager.GetPodCgroupRoot(),</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 使用reflector把ListWatch得到的服务信息实时同步到serviceIndexer中</span></span><br><span class="line">    serviceIndexer := cache.NewIndexer(cache.MetaNamespaceKeyFunc, cache.Indexers&#123;cache.NamespaceIndex: cache.MetaNamespaceIndexFunc&#125;)</span><br><span class="line">    <span class="keyword">if</span> kubeDeps.KubeClient != <span class="literal">nil</span> &#123;</span><br><span class="line">        serviceLW := cache.NewListWatchFromClient(kubeDeps.KubeClient.CoreV1().RESTClient(), <span class="string">"services"</span>, metav1.NamespaceAll, fields.Everything())</span><br><span class="line">        r := cache.NewReflector(serviceLW, &amp;v1.Service&#123;&#125;, serviceIndexer, <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">go</span> r.Run(wait.NeverStop)</span><br><span class="line">    &#125;</span><br><span class="line">    serviceLister := corelisters.NewServiceLister(serviceIndexer)</span><br><span class="line">    <span class="comment">// 使用reflector把ListWatch得到的服务信息实时同步到nodeIndexer中</span></span><br><span class="line">    nodeIndexer := cache.NewIndexer(cache.MetaNamespaceKeyFunc, cache.Indexers&#123;&#125;)</span><br><span class="line">    <span class="keyword">if</span> kubeDeps.KubeClient != <span class="literal">nil</span> &#123;</span><br><span class="line">        fieldSelector := fields.Set&#123;api.ObjectNameField: <span class="keyword">string</span>(nodeName)&#125;.AsSelector()</span><br><span class="line">        nodeLW := cache.NewListWatchFromClient(kubeDeps.KubeClient.CoreV1().RESTClient(), <span class="string">"nodes"</span>, metav1.NamespaceAll, fieldSelector)</span><br><span class="line">        r := cache.NewReflector(nodeLW, &amp;v1.Node&#123;&#125;, nodeIndexer, <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">go</span> r.Run(wait.NeverStop)</span><br><span class="line">    &#125;</span><br><span class="line">    nodeInfo := &amp;predicates.CachedNodeInfo&#123;NodeLister: corelisters.NewNodeLister(nodeIndexer)&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> get the real node object of ourself,</span></span><br><span class="line">    <span class="comment">// and use the real node name and UID.</span></span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> what is namespace for node?</span></span><br><span class="line">    nodeRef := &amp;v1.ObjectReference&#123;</span><br><span class="line">        Kind:      <span class="string">"Node"</span>,</span><br><span class="line">        Name:      <span class="keyword">string</span>(nodeName),</span><br><span class="line">        UID:       types.UID(nodeName),</span><br><span class="line">        Namespace: <span class="string">""</span>,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    containerRefManager := kubecontainer.NewRefManager()</span><br><span class="line"></span><br><span class="line">    oomWatcher := NewOOMWatcher(kubeDeps.CAdvisorInterface, kubeDeps.Recorder)</span><br><span class="line"></span><br><span class="line">    clusterDNS := <span class="built_in">make</span>([]net.IP, <span class="number">0</span>, <span class="built_in">len</span>(kubeCfg.ClusterDNS))</span><br><span class="line">    <span class="keyword">for</span> _, ipEntry := <span class="keyword">range</span> kubeCfg.ClusterDNS &#123;</span><br><span class="line">        ip := net.ParseIP(ipEntry)</span><br><span class="line">        <span class="keyword">if</span> ip == <span class="literal">nil</span> &#123;</span><br><span class="line">            glog.Warningf(<span class="string">"Invalid clusterDNS ip '%q'"</span>, ipEntry)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            clusterDNS = <span class="built_in">append</span>(clusterDNS, ip)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    httpClient := &amp;http.Client&#123;&#125;</span><br><span class="line">    parsedNodeIP := net.ParseIP(nodeIP)</span><br><span class="line"></span><br><span class="line">    klet := &amp;Kubelet&#123;</span><br><span class="line">        hostname:                       hostname,</span><br><span class="line">        nodeName:                       nodeName,</span><br><span class="line">        kubeClient:                     kubeDeps.KubeClient,</span><br><span class="line">        heartbeatClient:                kubeDeps.HeartbeatClient,</span><br><span class="line">        onRepeatedHeartbeatFailure:     kubeDeps.OnHeartbeatFailure,</span><br><span class="line">        rootDirectory:                  rootDirectory,</span><br><span class="line">        resyncInterval:                 kubeCfg.SyncFrequency.Duration,</span><br><span class="line">        sourcesReady:                   config.NewSourcesReady(kubeDeps.PodConfig.SeenAllSources),</span><br><span class="line">        registerNode:                   registerNode,</span><br><span class="line">        registerWithTaints:             registerWithTaints,</span><br><span class="line">        registerSchedulable:            registerSchedulable,</span><br><span class="line">        dnsConfigurer:                  dns.NewConfigurer(kubeDeps.Recorder, nodeRef, parsedNodeIP, <span class="comment">//pod的dns配置</span></span><br><span class="line">        clusterDNS, kubeCfg.ClusterDomain, kubeCfg.ResolverConfig),</span><br><span class="line">        serviceLister:                  serviceLister,</span><br><span class="line">        nodeInfo:                       nodeInfo,</span><br><span class="line">        masterServiceNamespace:         masterServiceNamespace,</span><br><span class="line">        streamingConnectionIdleTimeout: kubeCfg.StreamingConnectionIdleTimeout.Duration,</span><br><span class="line">        recorder:                       kubeDeps.Recorder,</span><br><span class="line">        cadvisor:                       kubeDeps.CAdvisorInterface,</span><br><span class="line">        cloud:                          kubeDeps.Cloud,</span><br><span class="line">        externalCloudProvider:     cloudprovider.IsExternal(cloudProvider),</span><br><span class="line">        providerID:                providerID,</span><br><span class="line">        nodeRef:                   nodeRef,</span><br><span class="line">        nodeLabels:                nodeLabels,</span><br><span class="line">        nodeStatusUpdateFrequency: kubeCfg.NodeStatusUpdateFrequency.Duration,</span><br><span class="line">        os:                         kubeDeps.OSInterface,</span><br><span class="line">        oomWatcher:                 oomWatcher,</span><br><span class="line">        cgroupsPerQOS:              kubeCfg.CgroupsPerQOS,</span><br><span class="line">        cgroupRoot:                 kubeCfg.CgroupRoot,</span><br><span class="line">        mounter:                    kubeDeps.Mounter,</span><br><span class="line">        writer:                     kubeDeps.Writer,</span><br><span class="line">        maxPods:                    <span class="keyword">int</span>(kubeCfg.MaxPods),</span><br><span class="line">        podsPerCore:                <span class="keyword">int</span>(kubeCfg.PodsPerCore),</span><br><span class="line">        syncLoopMonitor:            atomic.Value&#123;&#125;,</span><br><span class="line">        daemonEndpoints:            daemonEndpoints,</span><br><span class="line">        containerManager:           kubeDeps.ContainerManager,</span><br><span class="line">        containerRuntimeName:       containerRuntime,</span><br><span class="line">        redirectContainerStreaming: crOptions.RedirectContainerStreaming,</span><br><span class="line">        nodeIP:          parsedNodeIP,</span><br><span class="line">        nodeIPValidator: validateNodeIP,</span><br><span class="line">        clock:           clock.RealClock&#123;&#125;,</span><br><span class="line">        enableControllerAttachDetach:            kubeCfg.EnableControllerAttachDetach,</span><br><span class="line">        iptClient:                               utilipt.New(utilexec.New(), utildbus.New(), utilipt.ProtocolIpv4),</span><br><span class="line">        makeIPTablesUtilChains:                  kubeCfg.MakeIPTablesUtilChains,</span><br><span class="line">        iptablesMasqueradeBit:                   <span class="keyword">int</span>(kubeCfg.IPTablesMasqueradeBit),</span><br><span class="line">        iptablesDropBit:                         <span class="keyword">int</span>(kubeCfg.IPTablesDropBit),</span><br><span class="line">        experimentalHostUserNamespaceDefaulting: utilfeature.DefaultFeatureGate.Enabled(features.ExperimentalHostUserNamespaceDefaultingGate),</span><br><span class="line">        keepTerminatedPodVolumes:                keepTerminatedPodVolumes,</span><br><span class="line">        nodeStatusMaxImages:                     nodeStatusMaxImages,</span><br><span class="line">        enablePluginsWatcher:                    utilfeature.DefaultFeatureGate.Enabled(features.KubeletPluginsWatcher),</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> klet.cloud != <span class="literal">nil</span> &#123;</span><br><span class="line">        klet.cloudResourceSyncManager = NewCloudResourceSyncManager(klet.cloud, nodeName, klet.nodeStatusUpdateFrequency)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// secret缓存</span></span><br><span class="line">    secretManager := secret.NewCachingSecretManager(</span><br><span class="line">        kubeDeps.KubeClient, manager.GetObjectTTLFromNodeFunc(klet.GetNode))</span><br><span class="line">    klet.secretManager = secretManager</span><br><span class="line">    <span class="comment">// configmap缓存</span></span><br><span class="line">    configMapManager := configmap.NewCachingConfigMapManager(</span><br><span class="line">        kubeDeps.KubeClient, manager.GetObjectTTLFromNodeFunc(klet.GetNode))</span><br><span class="line">    klet.configMapManager = configMapManager</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> klet.experimentalHostUserNamespaceDefaulting &#123;</span><br><span class="line">        glog.Infof(<span class="string">"Experimental host user namespace defaulting is enabled."</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    machineInfo, err := klet.cadvisor.MachineInfo()</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">    &#125;</span><br><span class="line">    klet.machineInfo = machineInfo</span><br><span class="line"></span><br><span class="line">    imageBackOff := flowcontrol.NewBackOff(backOffPeriod, MaxContainerBackOff)</span><br><span class="line"></span><br><span class="line">    klet.livenessManager = proberesults.NewManager()</span><br><span class="line"></span><br><span class="line">    klet.podCache = kubecontainer.NewCache()</span><br><span class="line">    <span class="keyword">var</span> checkpointManager checkpointmanager.CheckpointManager</span><br><span class="line">    <span class="keyword">if</span> bootstrapCheckpointPath != <span class="string">""</span> &#123;</span><br><span class="line">        checkpointManager, err = checkpointmanager.NewCheckpointManager(bootstrapCheckpointPath)</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">"failed to initialize checkpoint manager: %+v"</span>, err)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// podManager is also responsible for keeping secretManager and configMapManager contents up-to-date.</span></span><br><span class="line">    klet.podManager = kubepod.NewBasicPodManager(kubepod.NewBasicMirrorClient(klet.kubeClient), secretManager, configMapManager, checkpointManager)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> remoteRuntimeEndpoint != <span class="string">""</span> &#123;</span><br><span class="line">        <span class="comment">// remoteImageEndpoint is same as remoteRuntimeEndpoint if not explicitly specified</span></span><br><span class="line">        <span class="keyword">if</span> remoteImageEndpoint == <span class="string">""</span> &#123;</span><br><span class="line">            remoteImageEndpoint = remoteRuntimeEndpoint</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> These need to become arguments to a standalone docker shim.</span></span><br><span class="line">    pluginSettings := dockershim.NetworkPluginSettings&#123;</span><br><span class="line">        HairpinMode:        kubeletconfiginternal.HairpinMode(kubeCfg.HairpinMode),</span><br><span class="line">        NonMasqueradeCIDR:  nonMasqueradeCIDR,</span><br><span class="line">        PluginName:         crOptions.NetworkPluginName,</span><br><span class="line">        PluginConfDir:      crOptions.CNIConfDir,</span><br><span class="line">        PluginBinDirString: crOptions.CNIBinDir,</span><br><span class="line">        MTU:                <span class="keyword">int</span>(crOptions.NetworkPluginMTU),</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    klet.resourceAnalyzer = serverstats.NewResourceAnalyzer(klet, kubeCfg.VolumeStatsAggPeriod.Duration)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> containerRuntime == <span class="string">"rkt"</span> &#123;</span><br><span class="line">        glog.Fatalln(<span class="string">"rktnetes has been deprecated in favor of rktlet. Please see https://github.com/kubernetes-incubator/rktlet for more information."</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// if left at nil, that means it is unneeded</span></span><br><span class="line">    <span class="keyword">var</span> legacyLogProvider kuberuntime.LegacyLogProvider</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> containerRuntime &#123;</span><br><span class="line">    <span class="keyword">case</span> kubetypes.DockerContainerRuntime:</span><br><span class="line">        <span class="comment">// Create and start the CRI shim running as a grpc server.</span></span><br><span class="line">        streamingConfig := getStreamingConfig(kubeCfg, kubeDeps, crOptions)</span><br><span class="line">        ds, err := dockershim.NewDockerService(kubeDeps.DockerClientConfig, crOptions.PodSandboxImage, streamingConfig,</span><br><span class="line">            &amp;pluginSettings, runtimeCgroups, kubeCfg.CgroupDriver, crOptions.DockershimRootDirectory,</span><br><span class="line">            crOptions.DockerDisableSharedPID, !crOptions.RedirectContainerStreaming)</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> crOptions.RedirectContainerStreaming &#123;</span><br><span class="line">            klet.criHandler = ds</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// The unix socket for kubelet &lt;-&gt; dockershim communication.</span></span><br><span class="line">        glog.V(<span class="number">5</span>).Infof(<span class="string">"RemoteRuntimeEndpoint: %q, RemoteImageEndpoint: %q"</span>,</span><br><span class="line">            remoteRuntimeEndpoint,</span><br><span class="line">            remoteImageEndpoint)</span><br><span class="line">        glog.V(<span class="number">2</span>).Infof(<span class="string">"Starting the GRPC server for the docker CRI shim."</span>)</span><br><span class="line">        server := dockerremote.NewDockerServer(remoteRuntimeEndpoint, ds)</span><br><span class="line">        <span class="keyword">if</span> err := server.Start(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Create dockerLegacyService when the logging driver is not supported.</span></span><br><span class="line">        supported, err := ds.IsCRISupportedLogDriver()</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> !supported &#123;</span><br><span class="line">            klet.dockerLegacyService = ds</span><br><span class="line">            legacyLogProvider = ds</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">case</span> kubetypes.RemoteContainerRuntime:</span><br><span class="line">        <span class="comment">// No-op.</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">"unsupported CRI runtime: %q"</span>, containerRuntime)</span><br><span class="line">    &#125;</span><br><span class="line">    runtimeService, imageService, err := getRuntimeAndImageServices(remoteRuntimeEndpoint, remoteImageEndpoint, kubeCfg.RuntimeRequestTimeout)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">    &#125;</span><br><span class="line">    klet.runtimeService = runtimeService</span><br><span class="line">    runtime, err := kuberuntime.NewKubeGenericRuntimeManager(</span><br><span class="line">        kubecontainer.FilterEventRecorder(kubeDeps.Recorder),</span><br><span class="line">        klet.livenessManager,</span><br><span class="line">        seccompProfileRoot,</span><br><span class="line">        containerRefManager,</span><br><span class="line">        machineInfo,</span><br><span class="line">        klet,</span><br><span class="line">        kubeDeps.OSInterface,</span><br><span class="line">        klet,</span><br><span class="line">        httpClient,</span><br><span class="line">        imageBackOff,</span><br><span class="line">        kubeCfg.SerializeImagePulls,</span><br><span class="line">        <span class="keyword">float32</span>(kubeCfg.RegistryPullQPS),</span><br><span class="line">        <span class="keyword">int</span>(kubeCfg.RegistryBurst),</span><br><span class="line">        kubeCfg.CPUCFSQuota,</span><br><span class="line">        runtimeService,</span><br><span class="line">        imageService,</span><br><span class="line">        kubeDeps.ContainerManager.InternalContainerLifecycle(),</span><br><span class="line">        legacyLogProvider,</span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">    &#125;</span><br><span class="line">    klet.containerRuntime = runtime</span><br><span class="line">    klet.streamingRuntime = runtime</span><br><span class="line">    klet.runner = runtime</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> cadvisor.UsingLegacyCadvisorStats(containerRuntime, remoteRuntimeEndpoint) &#123;</span><br><span class="line">        klet.StatsProvider = stats.NewCadvisorStatsProvider(</span><br><span class="line">            klet.cadvisor,</span><br><span class="line">            klet.resourceAnalyzer,</span><br><span class="line">            klet.podManager,</span><br><span class="line">            klet.runtimeCache,</span><br><span class="line">            klet.containerRuntime)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        klet.StatsProvider = stats.NewCRIStatsProvider(</span><br><span class="line">            klet.cadvisor,</span><br><span class="line">            klet.resourceAnalyzer,</span><br><span class="line">            klet.podManager,</span><br><span class="line">            klet.runtimeCache,</span><br><span class="line">            runtimeService,</span><br><span class="line">            imageService,</span><br><span class="line">            stats.NewLogMetricsService())</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Pod Lifecycle Event Generator:通过CRI接口轮询容器状态，然后与内存中的容器状态作对比，并发送相应的事件</span></span><br><span class="line">    klet.pleg = pleg.NewGenericPLEG(klet.containerRuntime, plegChannelCapacity, plegRelistPeriod, klet.podCache, clock.RealClock&#123;&#125;)</span><br><span class="line">    klet.runtimeState = newRuntimeState(maxWaitForContainerRuntime)</span><br><span class="line">    klet.runtimeState.addHealthCheck(<span class="string">"PLEG"</span>, klet.pleg.Healthy)</span><br><span class="line">    klet.updatePodCIDR(kubeCfg.PodCIDR)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// setup containerGC</span></span><br><span class="line">    containerGC, err := kubecontainer.NewContainerGC(klet.containerRuntime, containerGCPolicy, klet.sourcesReady)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">    &#125;</span><br><span class="line">    klet.containerGC = containerGC</span><br><span class="line">    klet.containerDeletor = newPodContainerDeletor(klet.containerRuntime, integer.IntMax(containerGCPolicy.MaxPerPodContainer, minDeadContainerInPod))</span><br><span class="line"></span><br><span class="line">    <span class="comment">// setup imageManager</span></span><br><span class="line">    imageManager, err := images.NewImageGCManager(klet.containerRuntime, klet.StatsProvider, kubeDeps.Recorder, nodeRef, imageGCPolicy, crOptions.PodSandboxImage)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">"failed to initialize image manager: %v"</span>, err)</span><br><span class="line">    &#125;</span><br><span class="line">    klet.imageManager = imageManager</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> containerRuntime == kubetypes.RemoteContainerRuntime &amp;&amp; utilfeature.DefaultFeatureGate.Enabled(features.CRIContainerLogRotation) &#123;</span><br><span class="line">        <span class="comment">// setup containerLogManager for CRI container runtime</span></span><br><span class="line">        containerLogManager, err := logs.NewContainerLogManager(</span><br><span class="line">            klet.runtimeService,</span><br><span class="line">            kubeCfg.ContainerLogMaxSize,</span><br><span class="line">            <span class="keyword">int</span>(kubeCfg.ContainerLogMaxFiles),</span><br><span class="line">        )</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">"failed to initialize container log manager: %v"</span>, err)</span><br><span class="line">        &#125;</span><br><span class="line">        klet.containerLogManager = containerLogManager</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        klet.containerLogManager = logs.NewStubContainerLogManager()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    klet.statusManager = status.NewManager(klet.kubeClient, klet.podManager, klet)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> kubeCfg.ServerTLSBootstrap &amp;&amp; kubeDeps.TLSOptions != <span class="literal">nil</span> &amp;&amp; utilfeature.DefaultFeatureGate.Enabled(features.RotateKubeletServerCertificate) &#123;</span><br><span class="line">        <span class="keyword">var</span> (</span><br><span class="line">            ips   []net.IP</span><br><span class="line">            names []<span class="keyword">string</span></span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        <span class="comment">// If the address was explicitly configured, use that. Otherwise, try to</span></span><br><span class="line">        <span class="comment">// discover addresses from the cloudprovider. Otherwise, make a best guess.</span></span><br><span class="line">        <span class="keyword">if</span> cfgAddress := net.ParseIP(kubeCfg.Address); cfgAddress != <span class="literal">nil</span> &amp;&amp; !cfgAddress.IsUnspecified() &#123;</span><br><span class="line">            ips = []net.IP&#123;cfgAddress&#125;</span><br><span class="line">            names = []<span class="keyword">string</span>&#123;klet.GetHostname(), hostnameOverride&#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> <span class="built_in">len</span>(cloudIPs) != <span class="number">0</span> || <span class="built_in">len</span>(cloudNames) != <span class="number">0</span> &#123;</span><br><span class="line">            ips = cloudIPs</span><br><span class="line">            names = cloudNames</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            localIPs, err := allGlobalUnicastIPs()</span><br><span class="line">            <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">            &#125;</span><br><span class="line">            ips = localIPs</span><br><span class="line">            names = []<span class="keyword">string</span>&#123;klet.GetHostname(), hostnameOverride&#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        klet.serverCertificateManager, err = kubeletcertificate.NewKubeletServerCertificateManager(klet.kubeClient, kubeCfg, klet.nodeName, ips, names, certDirectory)</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">"failed to initialize certificate manager: %v"</span>, err)</span><br><span class="line">        &#125;</span><br><span class="line">        kubeDeps.TLSOptions.Config.GetCertificate = <span class="function"><span class="keyword">func</span><span class="params">(*tls.ClientHelloInfo)</span> <span class="params">(*tls.Certificate, error)</span></span> &#123;</span><br><span class="line">            cert := klet.serverCertificateManager.Current()</span><br><span class="line">            <span class="keyword">if</span> cert == <span class="literal">nil</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">"no serving certificate available for the kubelet"</span>)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> cert, <span class="literal">nil</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    klet.probeManager = prober.NewManager(</span><br><span class="line">        klet.statusManager,</span><br><span class="line">        klet.livenessManager,</span><br><span class="line">        klet.runner,</span><br><span class="line">        containerRefManager,</span><br><span class="line">        kubeDeps.Recorder)</span><br><span class="line"></span><br><span class="line">    tokenManager := token.NewManager(kubeDeps.KubeClient)</span><br><span class="line"></span><br><span class="line">    klet.volumePluginMgr, err =</span><br><span class="line">        NewInitializedVolumePluginMgr(klet, secretManager, configMapManager, tokenManager, kubeDeps.VolumePlugins, kubeDeps.DynamicPluginProber)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> klet.enablePluginsWatcher &#123;</span><br><span class="line">        klet.pluginWatcher = pluginwatcher.NewWatcher(klet.getPluginsDir())</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// If the experimentalMounterPathFlag is set, we do not want to</span></span><br><span class="line">    <span class="comment">// check node capabilities since the mount path is not the default</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(experimentalMounterPath) != <span class="number">0</span> &#123;</span><br><span class="line">        experimentalCheckNodeCapabilitiesBeforeMount = <span class="literal">false</span></span><br><span class="line">        <span class="comment">// Replace the nameserver in containerized-mounter's rootfs/etc/resolve.conf with kubelet.ClusterDNS</span></span><br><span class="line">        <span class="comment">// so that service name could be resolved</span></span><br><span class="line">        klet.dnsConfigurer.SetupDNSinContainerizedMounter(experimentalMounterPath)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 容器的volume管理，检测volume是否已经mount、获取pod使用的volume等</span></span><br><span class="line">    <span class="comment">// setup volumeManager</span></span><br><span class="line">    klet.volumeManager = volumemanager.NewVolumeManager(</span><br><span class="line">        kubeCfg.EnableControllerAttachDetach,</span><br><span class="line">        nodeName,</span><br><span class="line">        klet.podManager,</span><br><span class="line">        klet.statusManager,</span><br><span class="line">        klet.kubeClient,</span><br><span class="line">        klet.volumePluginMgr,</span><br><span class="line">        klet.containerRuntime,</span><br><span class="line">        kubeDeps.Mounter,</span><br><span class="line">        klet.getPodsDir(),</span><br><span class="line">        kubeDeps.Recorder,</span><br><span class="line">        experimentalCheckNodeCapabilitiesBeforeMount,</span><br><span class="line">        keepTerminatedPodVolumes)</span><br><span class="line"></span><br><span class="line">    runtimeCache, err := kubecontainer.NewRuntimeCache(klet.containerRuntime)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">    &#125;</span><br><span class="line">    klet.runtimeCache = runtimeCache</span><br><span class="line">    klet.reasonCache = NewReasonCache()</span><br><span class="line">    klet.workQueue = queue.NewBasicWorkQueue(klet.clock)</span><br><span class="line">    klet.podWorkers = newPodWorkers(klet.syncPod, kubeDeps.Recorder, klet.workQueue, klet.resyncInterval, backOffPeriod, klet.podCache)</span><br><span class="line"></span><br><span class="line">    klet.backOff = flowcontrol.NewBackOff(backOffPeriod, MaxContainerBackOff)</span><br><span class="line">    klet.podKillingCh = <span class="built_in">make</span>(<span class="keyword">chan</span> *kubecontainer.PodPair, podKillingChannelCapacity)</span><br><span class="line">    klet.setNodeStatusFuncs = klet.defaultNodeStatusFuncs()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// setup eviction manager</span></span><br><span class="line">    evictionManager, evictionAdmitHandler := eviction.NewManager(klet.resourceAnalyzer, evictionConfig, killPodNow(klet.podWorkers, kubeDeps.Recorder), klet.imageManager, klet.containerGC, kubeDeps.Recorder, nodeRef, klet.clock)</span><br><span class="line"></span><br><span class="line">    klet.evictionManager = evictionManager</span><br><span class="line">    klet.admitHandlers.AddPodAdmitHandler(evictionAdmitHandler)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> utilfeature.DefaultFeatureGate.Enabled(features.Sysctls) &#123;</span><br><span class="line">        <span class="comment">// add sysctl admission</span></span><br><span class="line">        runtimeSupport, err := sysctl.NewRuntimeAdmitHandler(klet.containerRuntime)</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Safe, whitelisted sysctls can always be used as unsafe sysctls in the spec.</span></span><br><span class="line">        <span class="comment">// Hence, we concatenate those two lists.</span></span><br><span class="line">        safeAndUnsafeSysctls := <span class="built_in">append</span>(sysctlwhitelist.SafeSysctlWhitelist(), allowedUnsafeSysctls...)</span><br><span class="line">        sysctlsWhitelist, err := sysctl.NewWhitelist(safeAndUnsafeSysctls)</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">        &#125;</span><br><span class="line">        klet.admitHandlers.AddPodAdmitHandler(runtimeSupport)</span><br><span class="line">        klet.admitHandlers.AddPodAdmitHandler(sysctlsWhitelist)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// enable active deadline handler</span></span><br><span class="line">    activeDeadlineHandler, err := newActiveDeadlineHandler(klet.statusManager, kubeDeps.Recorder, klet.clock)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">    &#125;</span><br><span class="line">    klet.AddPodSyncLoopHandler(activeDeadlineHandler)</span><br><span class="line">    klet.AddPodSyncHandler(activeDeadlineHandler)</span><br><span class="line"></span><br><span class="line">    criticalPodAdmissionHandler := preemption.NewCriticalPodAdmissionHandler(klet.GetActivePods, killPodNow(klet.podWorkers, kubeDeps.Recorder), kubeDeps.Recorder)</span><br><span class="line">    klet.admitHandlers.AddPodAdmitHandler(lifecycle.NewPredicateAdmitHandler(klet.getNodeAnyWay, criticalPodAdmissionHandler, klet.containerManager.UpdatePluginResources))</span><br><span class="line">    <span class="comment">// apply functional Option's</span></span><br><span class="line">    <span class="keyword">for</span> _, opt := <span class="keyword">range</span> kubeDeps.Options &#123;</span><br><span class="line">        opt(klet)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    klet.appArmorValidator = apparmor.NewValidator(containerRuntime)</span><br><span class="line">    klet.softAdmitHandlers.AddPodAdmitHandler(lifecycle.NewAppArmorAdmitHandler(klet.appArmorValidator))</span><br><span class="line">    klet.softAdmitHandlers.AddPodAdmitHandler(lifecycle.NewNoNewPrivsAdmitHandler(klet.containerRuntime))</span><br><span class="line">    <span class="comment">// Finally, put the most recent version of the config on the Kubelet, so</span></span><br><span class="line">    <span class="comment">// people can see how it was configured.</span></span><br><span class="line">    klet.kubeletConfiguration = *kubeCfg</span><br><span class="line">    <span class="keyword">return</span> klet, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="func-kl-Kubelet-Run-updates-lt-chan-kubetypes-PodUpdate"><a href="#func-kl-Kubelet-Run-updates-lt-chan-kubetypes-PodUpdate" class="headerlink" title="func (kl *Kubelet) Run(updates &lt;-chan kubetypes.PodUpdate)"></a><code>func (kl *Kubelet) Run(updates &lt;-chan kubetypes.PodUpdate)</code></h2><p><a href="https://github.com/kubernetes/kubernetes/blob/v1.11.7/pkg/kubelet/kubelet.go#L1345" target="_blank" rel="noopener"><code>kubernetes/pkg/kubelet/kubelet.go</code></a><br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Run starts the kubelet reacting to config updates</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(kl *Kubelet)</span> <span class="title">Run</span><span class="params">(updates &lt;-<span class="keyword">chan</span> kubetypes.PodUpdate)</span></span> &#123;</span><br><span class="line">    <span class="comment">// 启动日志服务</span></span><br><span class="line">    <span class="keyword">if</span> kl.logServer == <span class="literal">nil</span> &#123;</span><br><span class="line">        kl.logServer = http.StripPrefix(<span class="string">"/logs/"</span>, http.FileServer(http.Dir(<span class="string">"/var/log/"</span>)))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> kl.kubeClient == <span class="literal">nil</span> &#123;</span><br><span class="line">        glog.Warning(<span class="string">"No api server defined - no node status update will be sent."</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 初始化模块，包括volume、数据目录、容器日志</span></span><br><span class="line">    <span class="comment">// 启动镜像管理、证书管理、OOM管理</span></span><br><span class="line">    <span class="comment">// 启动资源分析器</span></span><br><span class="line">    <span class="keyword">if</span> err := kl.initializeModules(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">        kl.recorder.Eventf(kl.nodeRef, v1.EventTypeWarning, events.KubeletSetupFailed, err.Error())</span><br><span class="line">        glog.Fatal(err)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Start volume manager</span></span><br><span class="line">    <span class="keyword">go</span> kl.volumeManager.Run(kl.sourcesReady, wait.NeverStop)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> kl.kubeClient != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="comment">// Start syncing node status immediately, this may set up things the runtime needs to run.</span></span><br><span class="line">        <span class="keyword">go</span> wait.Until(kl.syncNodeStatus, kl.nodeStatusUpdateFrequency, wait.NeverStop)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 容器状态</span></span><br><span class="line">    <span class="keyword">go</span> wait.Until(kl.updateRuntimeUp, <span class="number">5</span>*time.Second, wait.NeverStop)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Start loop to sync iptables util rules</span></span><br><span class="line">    <span class="keyword">if</span> kl.makeIPTablesUtilChains &#123;</span><br><span class="line">        <span class="keyword">go</span> wait.Until(kl.syncNetworkUtil, <span class="number">1</span>*time.Minute, wait.NeverStop)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 启动pod killer线程</span></span><br><span class="line">    <span class="comment">// Start a goroutine responsible for killing pods (that are not properly</span></span><br><span class="line">    <span class="comment">// handled by pod workers).</span></span><br><span class="line">    <span class="keyword">go</span> wait.Until(kl.podKiller, <span class="number">1</span>*time.Second, wait.NeverStop)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Start gorouting responsible for checking limits in resolv.conf</span></span><br><span class="line">    <span class="keyword">if</span> kl.dnsConfigurer.ResolverConfig != <span class="string">""</span> &#123;</span><br><span class="line">        <span class="keyword">go</span> wait.Until(<span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123; kl.dnsConfigurer.CheckLimitsForResolvConf() &#125;, <span class="number">30</span>*time.Second, wait.NeverStop)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Start the cloud provider sync manager</span></span><br><span class="line">    <span class="keyword">if</span> kl.cloudResourceSyncManager != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">go</span> kl.cloudResourceSyncManager.Run(wait.NeverStop)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Start component sync loops.</span></span><br><span class="line">    kl.statusManager.Start() <span class="comment">// pod状态管理</span></span><br><span class="line">    kl.probeManager.Start() <span class="comment">// readiness管理</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Start the pod lifecycle event generator.</span></span><br><span class="line">    kl.pleg.Start() <span class="comment">// pod event</span></span><br><span class="line">    kl.syncLoop(updates, kl) <span class="comment">// 循环同步，处理pod状态同步</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="func-kl-Kubelet-initializeModules"><a href="#func-kl-Kubelet-initializeModules" class="headerlink" title="func (kl *Kubelet) initializeModules()"></a><code>func (kl *Kubelet) initializeModules()</code></h2><p><a href="https://github.com/kubernetes/kubernetes/blob/v1.11.7/pkg/kubelet/kubelet.go#L1269" target="_blank" rel="noopener"><code>kubernetes/pkg/kubelet/kubelet.go</code></a><br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// initializeModules will initialize internal modules that do not require the container runtime to be up.</span></span><br><span class="line"><span class="comment">// Note that the modules here must not depend on modules that are not initialized here.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(kl *Kubelet)</span> <span class="title">initializeModules</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line">    <span class="comment">// Prometheus metrics.</span></span><br><span class="line">    metrics.Register(kl.runtimeCache, collectors.NewVolumeStatsCollector(kl))</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Setup filesystem directories.</span></span><br><span class="line">    <span class="keyword">if</span> err := kl.setupDataDirs(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> err</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// If the container logs directory does not exist, create it.</span></span><br><span class="line">    <span class="keyword">if</span> _, err := os.Stat(ContainerLogsDir); err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> err := kl.os.MkdirAll(ContainerLogsDir, <span class="number">0755</span>); err != <span class="literal">nil</span> &#123;</span><br><span class="line">            glog.Errorf(<span class="string">"Failed to create directory %q: %v"</span>, ContainerLogsDir, err)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Start the image manager.</span></span><br><span class="line">    kl.imageManager.Start()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Start the certificate manager if it was enabled.</span></span><br><span class="line">    <span class="keyword">if</span> kl.serverCertificateManager != <span class="literal">nil</span> &#123;</span><br><span class="line">        kl.serverCertificateManager.Start()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Start out of memory watcher.</span></span><br><span class="line">    <span class="keyword">if</span> err := kl.oomWatcher.Start(kl.nodeRef); err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> fmt.Errorf(<span class="string">"Failed to start OOM watcher %v"</span>, err)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Start resource analyzer: cached pod volume stats</span></span><br><span class="line">    kl.resourceAnalyzer.Start()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="func-vm-volumeManager-Run-sourcesReady-config-SourcesReady-stopCh-lt-chan-struct"><a href="#func-vm-volumeManager-Run-sourcesReady-config-SourcesReady-stopCh-lt-chan-struct" class="headerlink" title="func (vm *volumeManager) Run(sourcesReady config.SourcesReady, stopCh &lt;-chan struct{})"></a><code>func (vm *volumeManager) Run(sourcesReady config.SourcesReady, stopCh &lt;-chan struct{})</code></h2><p><a href="https://github.com/kubernetes/kubernetes/blob/v1.11.7/pkg/volumemanager/volume_manager.go#L241" target="_blank" rel="noopener"><code>kubernetes/pkg/volumemanager/volume_manager.go</code></a><br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(vm *volumeManager)</span> <span class="title">Run</span><span class="params">(sourcesReady config.SourcesReady, stopCh &lt;-<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line">    <span class="keyword">defer</span> runtime.HandleCrash()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">go</span> vm.desiredStateOfWorldPopulator.Run(sourcesReady, stopCh)</span><br><span class="line">    glog.V(<span class="number">2</span>).Infof(<span class="string">"The desired_state_of_world populator starts"</span>)</span><br><span class="line"></span><br><span class="line">    glog.Infof(<span class="string">"Starting Kubelet Volume Manager"</span>)</span><br><span class="line">    <span class="keyword">go</span> vm.reconciler.Run(stopCh)</span><br><span class="line"></span><br><span class="line">    &lt;-stopCh</span><br><span class="line">    glog.Infof(<span class="string">"Shutting down Kubelet Volume Manager"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="func-kl-Kubelet-syncNodeStatus"><a href="#func-kl-Kubelet-syncNodeStatus" class="headerlink" title="func (kl *Kubelet) syncNodeStatus()"></a><code>func (kl *Kubelet) syncNodeStatus()</code></h2><p><a href="https://github.com/kubernetes/kubernetes/blob/v1.11.7/pkg/kubelet/kubelet_node_status.go#L370" target="_blank" rel="noopener"><code>kubernetes/pkg/kubelet/kubelet_node_status.go</code></a><br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// syncNodeStatus should be called periodically from a goroutine.</span></span><br><span class="line"><span class="comment">// It synchronizes node status to master, registering the kubelet first if</span></span><br><span class="line"><span class="comment">// necessary.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(kl *Kubelet)</span> <span class="title">syncNodeStatus</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> kl.kubeClient == <span class="literal">nil</span> || kl.heartbeatClient == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> kl.registerNode &#123;</span><br><span class="line">        <span class="comment">// This will exit immediately if it doesn't need to do anything.</span></span><br><span class="line">        kl.registerWithAPIServer()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> err := kl.updateNodeStatus(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">        glog.Errorf(<span class="string">"Unable to update node status: %v"</span>, err)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="func-kl-Kubelet-updateRuntimeUp"><a href="#func-kl-Kubelet-updateRuntimeUp" class="headerlink" title="func (kl *Kubelet) updateRuntimeUp()"></a><code>func (kl *Kubelet) updateRuntimeUp()</code></h2><p><a href="https://github.com/kubernetes/kubernetes/blob/v1.11.7/pkg/kubelet/kubelet.go#L2090" target="_blank" rel="noopener"><code>kubernetes/pkg/kubelet/kubelet.go</code></a><br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// updateRuntimeUp calls the container runtime status callback, initializing</span></span><br><span class="line"><span class="comment">// the runtime dependent modules when the container runtime first comes up,</span></span><br><span class="line"><span class="comment">// and returns an error if the status check fails.  If the status check is OK,</span></span><br><span class="line"><span class="comment">// update the container runtime uptime in the kubelet runtimeState.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(kl *Kubelet)</span> <span class="title">updateRuntimeUp</span><span class="params">()</span></span> &#123;</span><br><span class="line">    s, err := kl.containerRuntime.Status()</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        glog.Errorf(<span class="string">"Container runtime sanity check failed: %v"</span>, err)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> s == <span class="literal">nil</span> &#123;</span><br><span class="line">        glog.Errorf(<span class="string">"Container runtime status is nil"</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Periodically log the whole runtime status for debugging.</span></span><br><span class="line">    <span class="comment">// TODO(random-liu): Consider to send node event when optional</span></span><br><span class="line">    <span class="comment">// condition is unmet.</span></span><br><span class="line">    glog.V(<span class="number">4</span>).Infof(<span class="string">"Container runtime status: %v"</span>, s)</span><br><span class="line">    networkReady := s.GetRuntimeCondition(kubecontainer.NetworkReady)</span><br><span class="line">    <span class="keyword">if</span> networkReady == <span class="literal">nil</span> || !networkReady.Status &#123;</span><br><span class="line">        glog.Errorf(<span class="string">"Container runtime network not ready: %v"</span>, networkReady)</span><br><span class="line">        kl.runtimeState.setNetworkState(fmt.Errorf(<span class="string">"runtime network not ready: %v"</span>, networkReady))</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// Set nil if the container runtime network is ready.</span></span><br><span class="line">        kl.runtimeState.setNetworkState(<span class="literal">nil</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// TODO(random-liu): Add runtime error in runtimeState, and update it</span></span><br><span class="line">    <span class="comment">// when runtime is not ready, so that the information in RuntimeReady</span></span><br><span class="line">    <span class="comment">// condition will be propagated to NodeReady condition.</span></span><br><span class="line">    runtimeReady := s.GetRuntimeCondition(kubecontainer.RuntimeReady)</span><br><span class="line">    <span class="comment">// If RuntimeReady is not set or is false, report an error.</span></span><br><span class="line">    <span class="keyword">if</span> runtimeReady == <span class="literal">nil</span> || !runtimeReady.Status &#123;</span><br><span class="line">        glog.Errorf(<span class="string">"Container runtime not ready: %v"</span>, runtimeReady)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    kl.oneTimeInitializer.Do(kl.initializeRuntimeDependentModules)</span><br><span class="line">    kl.runtimeState.setRuntimeSync(kl.clock.Now())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="func-kl-Kubelet-podKiller"><a href="#func-kl-Kubelet-podKiller" class="headerlink" title="func (kl *Kubelet) podKiller()"></a><code>func (kl *Kubelet) podKiller()</code></h2><p><a href="https://github.com/kubernetes/kubernetes/blob/v1.11.7/pkg/kubelet/kubelet_pod.go#L1065" target="_blank" rel="noopener"><code>kubernetes/pkg/kubelet/kubelet_pod.go</code></a><br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// podKiller launches a goroutine to kill a pod received from the channel if</span></span><br><span class="line"><span class="comment">// another goroutine isn't already in action.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(kl *Kubelet)</span> <span class="title">podKiller</span><span class="params">()</span></span> &#123;</span><br><span class="line">    killing := sets.NewString()</span><br><span class="line">    <span class="comment">// guard for the killing set</span></span><br><span class="line">    lock := sync.Mutex&#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> podPair := <span class="keyword">range</span> kl.podKillingCh &#123;</span><br><span class="line">        runningPod := podPair.RunningPod</span><br><span class="line">        apiPod := podPair.APIPod</span><br><span class="line"></span><br><span class="line">        lock.Lock()</span><br><span class="line">        exists := killing.Has(<span class="keyword">string</span>(runningPod.ID))</span><br><span class="line">        <span class="keyword">if</span> !exists &#123;</span><br><span class="line">            killing.Insert(<span class="keyword">string</span>(runningPod.ID))</span><br><span class="line">        &#125;</span><br><span class="line">        lock.Unlock()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> !exists &#123;</span><br><span class="line">            <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(apiPod *v1.Pod, runningPod *kubecontainer.Pod)</span></span> &#123;</span><br><span class="line">                glog.V(<span class="number">2</span>).Infof(<span class="string">"Killing unwanted pod %q"</span>, runningPod.Name)</span><br><span class="line">                err := kl.killPod(apiPod, runningPod, <span class="literal">nil</span>, <span class="literal">nil</span>)</span><br><span class="line">                <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">                    glog.Errorf(<span class="string">"Failed killing the pod %q: %v"</span>, runningPod.Name, err)</span><br><span class="line">                &#125;</span><br><span class="line">                lock.Lock()</span><br><span class="line">                killing.Delete(<span class="keyword">string</span>(runningPod.ID))</span><br><span class="line">                lock.Unlock()</span><br><span class="line">            &#125;(apiPod, runningPod)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="func-m-manager-Start"><a href="#func-m-manager-Start" class="headerlink" title="func (m *manager) Start()"></a><code>func (m *manager) Start()</code></h2><p><a href="https://github.com/kubernetes/kubernetes/blob/v1.11.7/pkg/kubelet/status/status_manager.go#L143" target="_blank" rel="noopener"><code>kubernetes/pkg/kubelet/status/status_manager.go</code></a><br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *manager)</span> <span class="title">Start</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// Don't start the status manager if we don't have a client. This will happen</span></span><br><span class="line">    <span class="comment">// on the master, where the kubelet is responsible for bootstrapping the pods</span></span><br><span class="line">    <span class="comment">// of the master components.</span></span><br><span class="line">    <span class="keyword">if</span> m.kubeClient == <span class="literal">nil</span> &#123;</span><br><span class="line">        glog.Infof(<span class="string">"Kubernetes client is nil, not starting status manager."</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    glog.Info(<span class="string">"Starting to sync pod status with apiserver"</span>)</span><br><span class="line">    syncTicker := time.Tick(syncPeriod)</span><br><span class="line">    <span class="comment">// syncPod and syncBatch share the same go routine to avoid sync races.</span></span><br><span class="line">    <span class="keyword">go</span> wait.Forever(<span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">select</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> syncRequest := &lt;-m.podStatusChannel:</span><br><span class="line">            glog.V(<span class="number">5</span>).Infof(<span class="string">"Status Manager: syncing pod: %q, with status: (%d, %v) from podStatusChannel"</span>,</span><br><span class="line">                syncRequest.podUID, syncRequest.status.version, syncRequest.status.status)</span><br><span class="line">            m.syncPod(syncRequest.podUID, syncRequest.status)</span><br><span class="line">        <span class="keyword">case</span> &lt;-syncTicker:</span><br><span class="line">            m.syncBatch()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, <span class="number">0</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="func-m-manager-Start-1"><a href="#func-m-manager-Start-1" class="headerlink" title="func (m *manager) Start()"></a><code>func (m *manager) Start()</code></h2><p><a href="https://github.com/kubernetes/kubernetes/blob/v1.11.7/pkg/kubelet/prober/prober_manager.go#L109" target="_blank" rel="noopener"><code>kubernetes/pkg/kubelet/prober/prober_manager.go</code></a><br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Start syncing probe status. This should only be called once.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *manager)</span> <span class="title">Start</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// Start syncing readiness.</span></span><br><span class="line">    <span class="keyword">go</span> wait.Forever(m.updateReadiness, <span class="number">0</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="func-g-GenericPLEG-Start"><a href="#func-g-GenericPLEG-Start" class="headerlink" title="func (g *GenericPLEG) Start()"></a><code>func (g *GenericPLEG) Start()</code></h2><p><a href="https://github.com/kubernetes/kubernetes/blob/v1.11.7/pkg/kubelet/pleg/generic.go#L129" target="_blank" rel="noopener"><code>kubernetes/pkg/kubelet/pleg/generic.go</code></a><br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Start spawns a goroutine to relist periodically.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(g *GenericPLEG)</span> <span class="title">Start</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">go</span> wait.Until(g.relist, g.relistPeriod, wait.NeverStop)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="func-g-GenericPLEG-relist"><a href="#func-g-GenericPLEG-relist" class="headerlink" title="func (g *GenericPLEG) relist()"></a><code>func (g *GenericPLEG) relist()</code></h2><p><a href="https://github.com/kubernetes/kubernetes/blob/v1.11.7/pkg/kubelet/pleg/generic.go#L182" target="_blank" rel="noopener"><code>kubernetes/pkg/kubelet/pleg/generic.go</code></a><br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// relist queries the container runtime for list of pods/containers, compare</span></span><br><span class="line"><span class="comment">// with the internal pods/containers, and generates events accordingly.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(g *GenericPLEG)</span> <span class="title">relist</span><span class="params">()</span></span> &#123;</span><br><span class="line">    glog.V(<span class="number">5</span>).Infof(<span class="string">"GenericPLEG: Relisting"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> lastRelistTime := g.getRelistTime(); !lastRelistTime.IsZero() &#123;</span><br><span class="line">        metrics.PLEGRelistInterval.Observe(metrics.SinceInMicroseconds(lastRelistTime))</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    timestamp := g.clock.Now()</span><br><span class="line">    <span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        metrics.PLEGRelistLatency.Observe(metrics.SinceInMicroseconds(timestamp))</span><br><span class="line">    &#125;()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Get all the pods.</span></span><br><span class="line">    podList, err := g.runtime.GetPods(<span class="literal">true</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        glog.Errorf(<span class="string">"GenericPLEG: Unable to retrieve pods: %v"</span>, err)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    g.updateRelistTime(timestamp)</span><br><span class="line"></span><br><span class="line">    pods := kubecontainer.Pods(podList)</span><br><span class="line">    g.podRecords.setCurrent(pods)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Compare the old and the current pods, and generate events.</span></span><br><span class="line">    eventsByPodID := <span class="keyword">map</span>[types.UID][]*PodLifecycleEvent&#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> pid := <span class="keyword">range</span> g.podRecords &#123;</span><br><span class="line">        oldPod := g.podRecords.getOld(pid)</span><br><span class="line">        pod := g.podRecords.getCurrent(pid)</span><br><span class="line">        <span class="comment">// Get all containers in the old and the new pod.</span></span><br><span class="line">        allContainers := getContainersFromPods(oldPod, pod)</span><br><span class="line">        <span class="keyword">for</span> _, container := <span class="keyword">range</span> allContainers &#123;</span><br><span class="line">            events := computeEvents(oldPod, pod, &amp;container.ID)</span><br><span class="line">            <span class="keyword">for</span> _, e := <span class="keyword">range</span> events &#123;</span><br><span class="line">                updateEvents(eventsByPodID, e)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> needsReinspection <span class="keyword">map</span>[types.UID]*kubecontainer.Pod</span><br><span class="line">    <span class="keyword">if</span> g.cacheEnabled() &#123;</span><br><span class="line">        needsReinspection = <span class="built_in">make</span>(<span class="keyword">map</span>[types.UID]*kubecontainer.Pod)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// If there are events associated with a pod, we should update the</span></span><br><span class="line">    <span class="comment">// podCache.</span></span><br><span class="line">    <span class="keyword">for</span> pid, events := <span class="keyword">range</span> eventsByPodID &#123;</span><br><span class="line">        pod := g.podRecords.getCurrent(pid)</span><br><span class="line">        <span class="keyword">if</span> g.cacheEnabled() &#123;</span><br><span class="line">            <span class="comment">// updateCache() will inspect the pod and update the cache. If an</span></span><br><span class="line">            <span class="comment">// error occurs during the inspection, we want PLEG to retry again</span></span><br><span class="line">            <span class="comment">// in the next relist. To achieve this, we do not update the</span></span><br><span class="line">            <span class="comment">// associated podRecord of the pod, so that the change will be</span></span><br><span class="line">            <span class="comment">// detect again in the next relist.</span></span><br><span class="line">            <span class="comment">// <span class="doctag">TODO:</span> If many pods changed during the same relist period,</span></span><br><span class="line">            <span class="comment">// inspecting the pod and getting the PodStatus to update the cache</span></span><br><span class="line">            <span class="comment">// serially may take a while. We should be aware of this and</span></span><br><span class="line">            <span class="comment">// parallelize if needed.</span></span><br><span class="line">            <span class="keyword">if</span> err := g.updateCache(pod, pid); err != <span class="literal">nil</span> &#123;</span><br><span class="line">                glog.Errorf(<span class="string">"PLEG: Ignoring events for pod %s/%s: %v"</span>, pod.Name, pod.Namespace, err)</span><br><span class="line"></span><br><span class="line">                <span class="comment">// make sure we try to reinspect the pod during the next relisting</span></span><br><span class="line">                needsReinspection[pid] = pod</span><br><span class="line"></span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> _, found := g.podsToReinspect[pid]; found &#123;</span><br><span class="line">                <span class="comment">// this pod was in the list to reinspect and we did so because it had events, so remove it</span></span><br><span class="line">                <span class="comment">// from the list (we don't want the reinspection code below to inspect it a second time in</span></span><br><span class="line">                <span class="comment">// this relist execution)</span></span><br><span class="line">                <span class="built_in">delete</span>(g.podsToReinspect, pid)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// Update the internal storage and send out the events.</span></span><br><span class="line">        g.podRecords.update(pid)</span><br><span class="line">        <span class="keyword">for</span> i := <span class="keyword">range</span> events &#123;</span><br><span class="line">            <span class="comment">// Filter out events that are not reliable and no other components use yet.</span></span><br><span class="line">            <span class="keyword">if</span> events[i].Type == ContainerChanged &#123;</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            &#125;</span><br><span class="line">            g.eventChannel &lt;- events[i]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> g.cacheEnabled() &#123;</span><br><span class="line">        <span class="comment">// reinspect any pods that failed inspection during the previous relist</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(g.podsToReinspect) &gt; <span class="number">0</span> &#123;</span><br><span class="line">            glog.V(<span class="number">5</span>).Infof(<span class="string">"GenericPLEG: Reinspecting pods that previously failed inspection"</span>)</span><br><span class="line">            <span class="keyword">for</span> pid, pod := <span class="keyword">range</span> g.podsToReinspect &#123;</span><br><span class="line">                <span class="keyword">if</span> err := g.updateCache(pod, pid); err != <span class="literal">nil</span> &#123;</span><br><span class="line">                    glog.Errorf(<span class="string">"PLEG: pod %s/%s failed reinspection: %v"</span>, pod.Name, pod.Namespace, err)</span><br><span class="line">                    needsReinspection[pid] = pod</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Update the cache timestamp.  This needs to happen *after*</span></span><br><span class="line">        <span class="comment">// all pods have been properly updated in the cache.</span></span><br><span class="line">        g.cache.UpdateTime(timestamp)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// make sure we retain the list of pods that need reinspecting the next time relist is called</span></span><br><span class="line">    g.podsToReinspect = needsReinspection</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>relist</code>是PLEG的核心，它从container runtime中查询属于kubelet管理的container/sandboxes的信息，生成最新的PodStatus，然后对比podRecords中记录的Old PodStatus生成PodLifeCycleEvent，并发送到PLEG channel。</p><ul><li>遍历生成的PodLifeCycleEvents，调用UpdateCache：<ul><li>通过runtime查询当前PodStatus（包括Pod对应的所有containerStatuses，sanboxStatuses）</li><li>将PodStatus更新到cache中；</li></ul></li><li>如果updateCache失败，则将该Pod重新加入到podsToReinspect，待下次relist时会遍历podToReinspect中的Pods，再次调用updateCache</li><li>如果updateCache成功，则检查该Pod是否已经在podsToReinspect中，如果存在，则从podsToInspect中删除该pod</li><li>updateCache成功后，更新podRecords，并将非ContainerChanged类型的PodLifeCycleEvent发送到eventChannel中<ul><li>ContainerChanged类型的Event已经被Disabled</li></ul></li><li>遍历PodsToReinspect中的Pods，调用updateCache更新cache，如果updateCache失败，则仍然重新放回到podsToReinspect中待下次relist</li></ul><h2 id="func-kl-Kubelet-syncLoop-updates-lt-chan-kubetypes-PodUpdate-handler-SyncHandler"><a href="#func-kl-Kubelet-syncLoop-updates-lt-chan-kubetypes-PodUpdate-handler-SyncHandler" class="headerlink" title="func (kl *Kubelet) syncLoop(updates &lt;-chan kubetypes.PodUpdate, handler SyncHandler)"></a><code>func (kl *Kubelet) syncLoop(updates &lt;-chan kubetypes.PodUpdate, handler SyncHandler)</code></h2><p><a href="https://github.com/kubernetes/kubernetes/blob/v1.11.7/pkg/kubelet/kubelet.go#L1753" target="_blank" rel="noopener"><code>kubernetes/pkg/kubelet/kubelet.go</code></a><br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// syncLoop is the main loop for processing changes. It watches for changes from</span></span><br><span class="line"><span class="comment">// three channels (file, apiserver, and http) and creates a union of them. For</span></span><br><span class="line"><span class="comment">// any new change seen, will run a sync against desired state and running state. If</span></span><br><span class="line"><span class="comment">// no changes are seen to the configuration, will synchronize the last known desired</span></span><br><span class="line"><span class="comment">// state every sync-frequency seconds. Never returns.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(kl *Kubelet)</span> <span class="title">syncLoop</span><span class="params">(updates &lt;-<span class="keyword">chan</span> kubetypes.PodUpdate, handler SyncHandler)</span></span> &#123;</span><br><span class="line">    glog.Info(<span class="string">"Starting kubelet main sync loop."</span>)</span><br><span class="line">    <span class="comment">// The resyncTicker wakes up kubelet to checks if there are any pod workers</span></span><br><span class="line">    <span class="comment">// that need to be sync'd. A one-second period is sufficient because the</span></span><br><span class="line">    <span class="comment">// sync interval is defaulted to 10s.</span></span><br><span class="line">    syncTicker := time.NewTicker(time.Second)</span><br><span class="line">    <span class="keyword">defer</span> syncTicker.Stop()</span><br><span class="line">    housekeepingTicker := time.NewTicker(housekeepingPeriod)</span><br><span class="line">    <span class="keyword">defer</span> housekeepingTicker.Stop()</span><br><span class="line">    <span class="comment">// pod life events generator，返回pleg的PodLifeCycleEvent Channel</span></span><br><span class="line">    plegCh := kl.pleg.Watch()</span><br><span class="line">    <span class="keyword">const</span> (</span><br><span class="line">        base   = <span class="number">100</span> * time.Millisecond</span><br><span class="line">        max    = <span class="number">5</span> * time.Second</span><br><span class="line">        factor = <span class="number">2</span></span><br><span class="line">    )</span><br><span class="line">    duration := base</span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> rs := kl.runtimeState.runtimeErrors(); <span class="built_in">len</span>(rs) != <span class="number">0</span> &#123;</span><br><span class="line">            glog.Infof(<span class="string">"skipping pod synchronization - %v"</span>, rs)</span><br><span class="line">            <span class="comment">// exponential backoff</span></span><br><span class="line">            time.Sleep(duration)</span><br><span class="line">            duration = time.Duration(math.Min(<span class="keyword">float64</span>(max), factor*<span class="keyword">float64</span>(duration)))</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// reset backoff if we have a success</span></span><br><span class="line">        duration = base</span><br><span class="line"></span><br><span class="line">        kl.syncLoopMonitor.Store(kl.clock.Now())</span><br><span class="line">        <span class="comment">// 迭代修复</span></span><br><span class="line">        <span class="keyword">if</span> !kl.syncLoopIteration(updates, handler, syncTicker.C, housekeepingTicker.C, plegCh) &#123;</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">        kl.syncLoopMonitor.Store(kl.clock.Now())</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>syncLoop是kubelet来维护Pod状态的核心逻辑，每次sync都会检查Pod的状态并进行修复。</p><h2 id="func-kl-Kubelet-syncLoopIteration-configCh-lt-chan-kubetypes-PodUpdate-handler-SyncHandler-syncCh-lt-chan-time-Time-housekeepingCh-lt-chan-time-Time-plegCh-lt-chan-pleg-PodLifecycleEvent"><a href="#func-kl-Kubelet-syncLoopIteration-configCh-lt-chan-kubetypes-PodUpdate-handler-SyncHandler-syncCh-lt-chan-time-Time-housekeepingCh-lt-chan-time-Time-plegCh-lt-chan-pleg-PodLifecycleEvent" class="headerlink" title="func (kl *Kubelet) syncLoopIteration(configCh &lt;-chan kubetypes.PodUpdate, handler SyncHandler,syncCh &lt;-chan time.Time, housekeepingCh &lt;-chan time.Time, plegCh &lt;-chan *pleg.PodLifecycleEvent)"></a><code>func (kl *Kubelet) syncLoopIteration(configCh &lt;-chan kubetypes.PodUpdate, handler SyncHandler,syncCh &lt;-chan time.Time, housekeepingCh &lt;-chan time.Time, plegCh &lt;-chan *pleg.PodLifecycleEvent)</code></h2><p><a href="https://github.com/kubernetes/kubernetes/blob/v1.11.7/pkg/kubelet/kubelet.go#L1820" target="_blank" rel="noopener"><code>kubernetes/pkg/kubelet/kubelet.go</code></a><br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// syncLoopIteration reads from various channels and dispatches pods to the</span></span><br><span class="line"><span class="comment">// given handler.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Arguments:</span></span><br><span class="line"><span class="comment">// 1.  configCh:       a channel to read config events from</span></span><br><span class="line"><span class="comment">// 2.  handler:        the SyncHandler to dispatch pods to</span></span><br><span class="line"><span class="comment">// 3.  syncCh:         a channel to read periodic sync events from</span></span><br><span class="line"><span class="comment">// 4.  houseKeepingCh: a channel to read housekeeping events from</span></span><br><span class="line"><span class="comment">// 5.  plegCh:         a channel to read PLEG updates from</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Events are also read from the kubelet liveness manager's update channel.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// The workflow is to read from one of the channels, handle that event, and</span></span><br><span class="line"><span class="comment">// update the timestamp in the sync loop monitor.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Here is an appropriate place to note that despite the syntactical</span></span><br><span class="line"><span class="comment">// similarity to the switch statement, the case statements in a select are</span></span><br><span class="line"><span class="comment">// evaluated in a pseudorandom order if there are multiple channels ready to</span></span><br><span class="line"><span class="comment">// read from when the select is evaluated.  In other words, case statements</span></span><br><span class="line"><span class="comment">// are evaluated in random order, and you can not assume that the case</span></span><br><span class="line"><span class="comment">// statements evaluate in order if multiple channels have events.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// With that in mind, in truly no particular order, the different channels</span></span><br><span class="line"><span class="comment">// are handled as follows:</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// * configCh: dispatch the pods for the config change to the appropriate</span></span><br><span class="line"><span class="comment">//             handler callback for the event type</span></span><br><span class="line"><span class="comment">// * plegCh: update the runtime cache; sync pod</span></span><br><span class="line"><span class="comment">// * syncCh: sync all pods waiting for sync</span></span><br><span class="line"><span class="comment">// * houseKeepingCh: trigger cleanup of pods</span></span><br><span class="line"><span class="comment">// * liveness manager: sync pods that have failed or in which one or more</span></span><br><span class="line"><span class="comment">//                     containers have failed liveness checks</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(kl *Kubelet)</span> <span class="title">syncLoopIteration</span><span class="params">(configCh &lt;-<span class="keyword">chan</span> kubetypes.PodUpdate, handler SyncHandler,</span></span></span><br><span class="line"><span class="function"><span class="params">    syncCh &lt;-<span class="keyword">chan</span> time.Time, housekeepingCh &lt;-<span class="keyword">chan</span> time.Time, plegCh &lt;-<span class="keyword">chan</span> *pleg.PodLifecycleEvent)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">    <span class="keyword">select</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> u, open := &lt;-configCh:</span><br><span class="line">        <span class="comment">// Update from a config source; dispatch it to the right handler</span></span><br><span class="line">        <span class="comment">// callback.</span></span><br><span class="line">        <span class="keyword">if</span> !open &#123;</span><br><span class="line">            glog.Errorf(<span class="string">"Update channel is closed. Exiting the sync loop."</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span> u.Op &#123;</span><br><span class="line">        <span class="keyword">case</span> kubetypes.ADD:</span><br><span class="line">            glog.V(<span class="number">2</span>).Infof(<span class="string">"SyncLoop (ADD, %q): %q"</span>, u.Source, format.Pods(u.Pods))</span><br><span class="line">            <span class="comment">// After restarting, kubelet will get all existing pods through</span></span><br><span class="line">            <span class="comment">// ADD as if they are new pods. These pods will then go through the</span></span><br><span class="line">            <span class="comment">// admission process and *may* be rejected. This can be resolved</span></span><br><span class="line">            <span class="comment">// once we have checkpointing.</span></span><br><span class="line">            handler.HandlePodAdditions(u.Pods)</span><br><span class="line">        <span class="keyword">case</span> kubetypes.UPDATE:</span><br><span class="line">            glog.V(<span class="number">2</span>).Infof(<span class="string">"SyncLoop (UPDATE, %q): %q"</span>, u.Source, format.PodsWithDeletiontimestamps(u.Pods))</span><br><span class="line">            handler.HandlePodUpdates(u.Pods)</span><br><span class="line">        <span class="keyword">case</span> kubetypes.REMOVE:</span><br><span class="line">            glog.V(<span class="number">2</span>).Infof(<span class="string">"SyncLoop (REMOVE, %q): %q"</span>, u.Source, format.Pods(u.Pods))</span><br><span class="line">            handler.HandlePodRemoves(u.Pods)</span><br><span class="line">        <span class="keyword">case</span> kubetypes.RECONCILE:</span><br><span class="line">            glog.V(<span class="number">4</span>).Infof(<span class="string">"SyncLoop (RECONCILE, %q): %q"</span>, u.Source, format.Pods(u.Pods))</span><br><span class="line">            handler.HandlePodReconcile(u.Pods)</span><br><span class="line">        <span class="keyword">case</span> kubetypes.DELETE:</span><br><span class="line">            glog.V(<span class="number">2</span>).Infof(<span class="string">"SyncLoop (DELETE, %q): %q"</span>, u.Source, format.Pods(u.Pods))</span><br><span class="line">            <span class="comment">// DELETE is treated as a UPDATE because of graceful deletion.</span></span><br><span class="line">            handler.HandlePodUpdates(u.Pods)</span><br><span class="line">        <span class="keyword">case</span> kubetypes.RESTORE:</span><br><span class="line">            glog.V(<span class="number">2</span>).Infof(<span class="string">"SyncLoop (RESTORE, %q): %q"</span>, u.Source, format.Pods(u.Pods))</span><br><span class="line">            <span class="comment">// These are pods restored from the checkpoint. Treat them as new</span></span><br><span class="line">            <span class="comment">// pods.</span></span><br><span class="line">            handler.HandlePodAdditions(u.Pods)</span><br><span class="line">        <span class="keyword">case</span> kubetypes.SET:</span><br><span class="line">            <span class="comment">// <span class="doctag">TODO:</span> Do we want to support this?</span></span><br><span class="line">            glog.Errorf(<span class="string">"Kubelet does not support snapshot update"</span>)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> u.Op != kubetypes.RESTORE &#123;</span><br><span class="line">            <span class="comment">// If the update type is RESTORE, it means that the update is from</span></span><br><span class="line">            <span class="comment">// the pod checkpoints and may be incomplete. Do not mark the</span></span><br><span class="line">            <span class="comment">// source as ready.</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// Mark the source ready after receiving at least one update from the</span></span><br><span class="line">            <span class="comment">// source. Once all the sources are marked ready, various cleanup</span></span><br><span class="line">            <span class="comment">// routines will start reclaiming resources. It is important that this</span></span><br><span class="line">            <span class="comment">// takes place only after kubelet calls the update handler to process</span></span><br><span class="line">            <span class="comment">// the update to ensure the internal pod cache is up-to-date.</span></span><br><span class="line">            kl.sourcesReady.AddSource(u.Source)</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">case</span> e := &lt;-plegCh:</span><br><span class="line">        <span class="keyword">if</span> isSyncPodWorthy(e) &#123;</span><br><span class="line">            <span class="comment">// PLEG event for a pod; sync it.</span></span><br><span class="line">            <span class="keyword">if</span> pod, ok := kl.podManager.GetPodByUID(e.ID); ok &#123;</span><br><span class="line">                glog.V(<span class="number">2</span>).Infof(<span class="string">"SyncLoop (PLEG): %q, event: %#v"</span>, format.Pod(pod), e)</span><br><span class="line">                handler.HandlePodSyncs([]*v1.Pod&#123;pod&#125;)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// If the pod no longer exists, ignore the event.</span></span><br><span class="line">                glog.V(<span class="number">4</span>).Infof(<span class="string">"SyncLoop (PLEG): ignore irrelevant event: %#v"</span>, e)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> e.Type == pleg.ContainerDied &#123;</span><br><span class="line">            <span class="keyword">if</span> containerID, ok := e.Data.(<span class="keyword">string</span>); ok &#123;</span><br><span class="line">                kl.cleanUpContainersInPod(e.ID, containerID)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">case</span> &lt;-syncCh:</span><br><span class="line">        <span class="comment">// Sync pods waiting for sync</span></span><br><span class="line">        podsToSync := kl.getPodsToSync()</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(podsToSync) == <span class="number">0</span> &#123;</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">        glog.V(<span class="number">4</span>).Infof(<span class="string">"SyncLoop (SYNC): %d pods; %s"</span>, <span class="built_in">len</span>(podsToSync), format.Pods(podsToSync))</span><br><span class="line">        handler.HandlePodSyncs(podsToSync)</span><br><span class="line">    <span class="keyword">case</span> update := &lt;-kl.livenessManager.Updates():</span><br><span class="line">        <span class="keyword">if</span> update.Result == proberesults.Failure &#123;</span><br><span class="line">            <span class="comment">// The liveness manager detected a failure; sync the pod.</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// We should not use the pod from livenessManager, because it is never updated after</span></span><br><span class="line">            <span class="comment">// initialization.</span></span><br><span class="line">            pod, ok := kl.podManager.GetPodByUID(update.PodUID)</span><br><span class="line">            <span class="keyword">if</span> !ok &#123;</span><br><span class="line">                <span class="comment">// If the pod no longer exists, ignore the update.</span></span><br><span class="line">                glog.V(<span class="number">4</span>).Infof(<span class="string">"SyncLoop (container unhealthy): ignore irrelevant update: %#v"</span>, update)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            &#125;</span><br><span class="line">            glog.V(<span class="number">1</span>).Infof(<span class="string">"SyncLoop (container unhealthy): %q"</span>, format.Pod(pod))</span><br><span class="line">            handler.HandlePodSyncs([]*v1.Pod&#123;pod&#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">case</span> &lt;-housekeepingCh:</span><br><span class="line">        <span class="keyword">if</span> !kl.sourcesReady.AllReady() &#123;</span><br><span class="line">            <span class="comment">// If the sources aren't ready or volume manager has not yet synced the states,</span></span><br><span class="line">            <span class="comment">// skip housekeeping, as we may accidentally delete pods from unready sources.</span></span><br><span class="line">            glog.V(<span class="number">4</span>).Infof(<span class="string">"SyncLoop (housekeeping, skipped): sources aren't ready yet."</span>)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            glog.V(<span class="number">4</span>).Infof(<span class="string">"SyncLoop (housekeeping)"</span>)</span><br><span class="line">            <span class="keyword">if</span> err := handler.HandlePodCleanups(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">                glog.Errorf(<span class="string">"Failed cleaning pods: %v"</span>, err)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>syncLoopIteration会从config channel, pleg channel, sync channel, housekeeping channel中获取信息，然后就行消费。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;没有特别指出的情况下，该系列的代码分析均基于&lt;strong&gt;Kubernetes v1.11.7&lt;/strong&gt;版本&lt;/p&gt;
&lt;h2 id=&quot;func-NewMainKubelet-……&quot;&gt;&lt;a href=&quot;#func-NewMainKubelet-……&quot; class=&quot;
      
    
    </summary>
    
    
      <category term="Kubernetes" scheme="http://xizie.com/tags/Kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>Kubernetes源码阅读—kubelet(一).md</title>
    <link href="http://xizie.com/2019/01/28/Kubernetes%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E2%80%94kubelet(%E4%B8%80)/"/>
    <id>http://xizie.com/2019/01/28/Kubernetes源码阅读—kubelet(一)/</id>
    <published>2019-01-28T08:02:15.000Z</published>
    <updated>2019-02-28T02:43:12.282Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2019/01/28/Kubernetes源码阅读—kubelet(一)/kubelet.jpg" alt="kubelet"><br>没有特别指出的情况下，该系列的代码分析均基于<strong>Kubernetes v1.11.7</strong>版本</p><p>kubelet代码采用了<code>Cobra</code>命令行框架，核心代码如下：</p><h2 id="func-main"><a href="#func-main" class="headerlink" title="func main()"></a><code>func main()</code></h2><p><a href="https://github.com/kubernetes/kubernetes/blob/v1.11.7/cmd/kubelet/kubelet.go#L36" target="_blank" rel="noopener"><code>kubernetes/cmd/kubelet/kubelet.go</code></a><br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    rand.Seed(time.Now().UTC().UnixNano())</span><br><span class="line">    <span class="comment">// 初始化命令行</span></span><br><span class="line">    command := app.NewKubeletCommand(server.SetupSignalHandler())</span><br><span class="line">    logs.InitLogs()</span><br><span class="line">    <span class="keyword">defer</span> logs.FlushLogs()</span><br><span class="line">    <span class="comment">// 执行</span></span><br><span class="line">    <span class="keyword">if</span> err := command.Execute(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Fprintf(os.Stderr, <span class="string">"%v\n"</span>, err)</span><br><span class="line">        os.Exit(<span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这里为kubelet启动的入口，其中<code>app.NewKubeletCommand(server.SetupSignalHandler())</code>是这个函数主要执行的过程，包括kubelet启动参数的验证、kubelet对象的生成以及kubelet维护pod所需要用到的服务。</p><h2 id="func-NewKubeletCommand-stopCh-lt-chan-struct"><a href="#func-NewKubeletCommand-stopCh-lt-chan-struct" class="headerlink" title="func NewKubeletCommand(stopCh &lt;-chan struct{})"></a><code>func NewKubeletCommand(stopCh &lt;-chan struct{})</code></h2><p><a href="https://github.com/kubernetes/kubernetes/blob/v1.11.7/cmd/kubelet/app/server.go#L108" target="_blank" rel="noopener"><code>kubernetes/cmd/kubelet/app/server.go</code></a><br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// NewKubeletCommand creates a *cobra.Command object with default parameters</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewKubeletCommand</span><span class="params">(stopCh &lt;-<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;)</span> *<span class="title">cobra</span>.<span class="title">Command</span></span> &#123;</span><br><span class="line">    <span class="comment">// 生成kubelet命令行的flag信息</span></span><br><span class="line">    cleanFlagSet := pflag.NewFlagSet(componentKubelet, pflag.ContinueOnError)</span><br><span class="line">    cleanFlagSet.SetNormalizeFunc(flag.WordSepNormalizeFunc)</span><br><span class="line">    <span class="comment">// 设置默认的KubeletFlags的值，包括docker、证书路径、插件目录、CIDR等信息</span></span><br><span class="line">    kubeletFlags := options.NewKubeletFlags()</span><br><span class="line">    <span class="comment">// 生成kubelet默认的配置文件</span></span><br><span class="line">    kubeletConfig, err := options.NewKubeletConfiguration()</span><br><span class="line">    <span class="comment">// programmer error</span></span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        glog.Fatal(err)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 封装命令行工具</span></span><br><span class="line">    cmd := &amp;cobra.Command&#123;</span><br><span class="line">        Use: componentKubelet,</span><br><span class="line">        Long: <span class="string">`The kubelet is the primary "node agent" that runs on each</span></span><br><span class="line"><span class="string">node. The kubelet works in terms of a PodSpec. A PodSpec is a YAML or JSON object</span></span><br><span class="line"><span class="string">that describes a pod. The kubelet takes a set of PodSpecs that are provided through</span></span><br><span class="line"><span class="string">various mechanisms (primarily through the apiserver) and ensures that the containers</span></span><br><span class="line"><span class="string">described in those PodSpecs are running and healthy. The kubelet doesn't manage</span></span><br><span class="line"><span class="string">containers which were not created by Kubernetes.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Other than from an PodSpec from the apiserver, there are three ways that a container</span></span><br><span class="line"><span class="string">manifest can be provided to the Kubelet.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">File: Path passed as a flag on the command line. Files under this path will be monitored</span></span><br><span class="line"><span class="string">periodically for updates. The monitoring period is 20s by default and is configurable</span></span><br><span class="line"><span class="string">via a flag.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">HTTP endpoint: HTTP endpoint passed as a parameter on the command line. This endpoint</span></span><br><span class="line"><span class="string">is checked every 20 seconds (also configurable with a flag).</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">HTTP server: The kubelet can also listen for HTTP and respond to a simple API</span></span><br><span class="line"><span class="string">(underspec'd currently) to submit a new manifest.`</span>,</span><br><span class="line">        <span class="comment">// The Kubelet has special flag parsing requirements to enforce flag precedence rules,</span></span><br><span class="line">        <span class="comment">// so we do all our parsing manually in Run, below.</span></span><br><span class="line">        <span class="comment">// DisableFlagParsing=true provides the full set of flags passed to the kubelet in the</span></span><br><span class="line">        <span class="comment">// `args` arg to Run, without Cobra's interference.</span></span><br><span class="line">        DisableFlagParsing: <span class="literal">true</span>,</span><br><span class="line">        Run: <span class="function"><span class="keyword">func</span><span class="params">(cmd *cobra.Command, args []<span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">            ……</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// keep cleanFlagSet separate, so Cobra doesn't pollute it with the global flags</span></span><br><span class="line">    <span class="comment">// 为kubelet命令行工具结合所有的flags</span></span><br><span class="line">    kubeletFlags.AddFlags(cleanFlagSet) <span class="comment">// kubelet flag</span></span><br><span class="line">    options.AddKubeletConfigFlags(cleanFlagSet, kubeletConfig)  <span class="comment">// kubelet config</span></span><br><span class="line">    options.AddGlobalFlags(cleanFlagSet)  <span class="comment">// global: glog/cadvisor/credential……</span></span><br><span class="line">    cleanFlagSet.BoolP(<span class="string">"help"</span>, <span class="string">"h"</span>, <span class="literal">false</span>, fmt.Sprintf(<span class="string">"help for %s"</span>, cmd.Name()))  <span class="comment">// help</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// ugly, but necessary, because Cobra's default UsageFunc and HelpFunc pollute the flagset with global flags</span></span><br><span class="line">    <span class="keyword">const</span> usageFmt = <span class="string">"Usage:\n  %s\n\nFlags:\n%s"</span></span><br><span class="line">    cmd.SetUsageFunc(<span class="function"><span class="keyword">func</span><span class="params">(cmd *cobra.Command)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">        fmt.Fprintf(cmd.OutOrStderr(), usageFmt, cmd.UseLine(), cleanFlagSet.FlagUsagesWrapped(<span class="number">2</span>))</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;)</span><br><span class="line">    cmd.SetHelpFunc(<span class="function"><span class="keyword">func</span><span class="params">(cmd *cobra.Command, args []<span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">        fmt.Fprintf(cmd.OutOrStdout(), <span class="string">"%s\n\n"</span>+usageFmt, cmd.Long, cmd.UseLine(), cleanFlagSet.FlagUsagesWrapped(<span class="number">2</span>))</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> cmd</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>通过对各种特定参数的解析，最终生成<code>kubeletFlags</code>和<code>kubeletConfig</code>两个重要的参数对象，用来构造<code>kubeletServer</code>和其他需求。</p><h2 id="func-c-Command-Execute"><a href="#func-c-Command-Execute" class="headerlink" title="func (c *Command) Execute()"></a><code>func (c *Command) Execute()</code></h2><p><a href="https://github.com/kubernetes/kubernetes/blob/v1.11.7/vendor/github.com/spf13/cobra/command.go#L793" target="_blank" rel="noopener"><code>kubernetes/vendor/github.com/spf13/cobra/command.go</code></a><br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Execute uses the args (os.Args[1:] by default)</span></span><br><span class="line"><span class="comment">// and run through the command tree finding appropriate matches</span></span><br><span class="line"><span class="comment">// for commands and then corresponding flags.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Command)</span> <span class="title">Execute</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line">    _, err := c.ExecuteC()</span><br><span class="line">    <span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>完成上面的初始化过程后，从此函数启动kubelet，包括读取解析args等过程，然后执行<code>Command.Run()</code>。</p><h2 id="Run-func-cmd-cobra-Command-args-string"><a href="#Run-func-cmd-cobra-Command-args-string" class="headerlink" title="Run: func(cmd *cobra.Command, args []string)"></a><code>Run: func(cmd *cobra.Command, args []string)</code></h2><p><a href="https://github.com/kubernetes/kubernetes/blob/v1.11.7/cmd/kubelet/app/server.go#L144" target="_blank" rel="noopener"><code>kubernetes/cmd/kubelet/app/server.go</code></a><br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line">Run: <span class="function"><span class="keyword">func</span><span class="params">(cmd *cobra.Command, args []<span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">    <span class="comment">// 解析参数，判断是否合法</span></span><br><span class="line">    <span class="comment">// initial flag parse, since we disable cobra's flag parsing</span></span><br><span class="line">    <span class="keyword">if</span> err := cleanFlagSet.Parse(args); err != <span class="literal">nil</span> &#123;</span><br><span class="line">        cmd.Usage()</span><br><span class="line">        glog.Fatal(err)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// check if there are non-flag arguments in the command line</span></span><br><span class="line">    cmds := cleanFlagSet.Args()</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(cmds) &gt; <span class="number">0</span> &#123;</span><br><span class="line">        cmd.Usage()</span><br><span class="line">        glog.Fatalf(<span class="string">"unknown command: %s"</span>, cmds[<span class="number">0</span>])</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 是否为调用kubelet help，默认为false</span></span><br><span class="line">    <span class="comment">// short-circuit on help</span></span><br><span class="line">    help, err := cleanFlagSet.GetBool(<span class="string">"help"</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        glog.Fatal(<span class="string">`"help" flag is non-bool, programmer error, please correct`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> help &#123;</span><br><span class="line">        cmd.Help()</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 是否为调用kubelet version，默认为VersionFalse</span></span><br><span class="line">    <span class="comment">// short-circuit on verflag</span></span><br><span class="line">    verflag.PrintAndExitIfRequested()</span><br><span class="line">    utilflag.PrintFlags(cleanFlagSet)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// set feature gates from initial flags-based config</span></span><br><span class="line">    <span class="keyword">if</span> err := utilfeature.DefaultFeatureGate.SetFromMap(kubeletConfig.FeatureGates); err != <span class="literal">nil</span> &#123;</span><br><span class="line">        glog.Fatal(err)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 验证参数是否合法：dynamic config、cadvisor port……</span></span><br><span class="line">    <span class="comment">// validate the initial KubeletFlags</span></span><br><span class="line">    <span class="keyword">if</span> err := options.ValidateKubeletFlags(kubeletFlags); err != <span class="literal">nil</span> &#123;</span><br><span class="line">        glog.Fatal(err)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 指定默认的pod运行所需要的镜像</span></span><br><span class="line">    <span class="keyword">if</span> kubeletFlags.ContainerRuntime == <span class="string">"remote"</span> &amp;&amp; cleanFlagSet.Changed(<span class="string">"pod-infra-container-image"</span>) &#123;</span><br><span class="line">        glog.Warning(<span class="string">"Warning: For remote container runtime, --pod-infra-container-image is ignored in kubelet, which should be set in that remote runtime instead"</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// load kubelet config file, if provided</span></span><br><span class="line">    <span class="keyword">if</span> configFile := kubeletFlags.KubeletConfigFile; <span class="built_in">len</span>(configFile) &gt; <span class="number">0</span> &#123;</span><br><span class="line">        kubeletConfig, err = loadConfigFile(configFile)</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">            glog.Fatal(err)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// We must enforce flag precedence by re-parsing the command line into the new object.</span></span><br><span class="line">        <span class="comment">// This is necessary to preserve backwards-compatibility across binary upgrades.</span></span><br><span class="line">        <span class="comment">// See issue #56171 for more details.</span></span><br><span class="line">        <span class="keyword">if</span> err := kubeletConfigFlagPrecedence(kubeletConfig, args); err != <span class="literal">nil</span> &#123;</span><br><span class="line">            glog.Fatal(err)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// update feature gates based on new config</span></span><br><span class="line">        <span class="keyword">if</span> err := utilfeature.DefaultFeatureGate.SetFromMap(kubeletConfig.FeatureGates); err != <span class="literal">nil</span> &#123;</span><br><span class="line">            glog.Fatal(err)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// We always validate the local configuration (command line + config file).</span></span><br><span class="line">    <span class="comment">// This is the default "last-known-good" config for dynamic config, and must always remain valid.</span></span><br><span class="line">    <span class="keyword">if</span> err := kubeletconfigvalidation.ValidateKubeletConfiguration(kubeletConfig); err != <span class="literal">nil</span> &#123;</span><br><span class="line">        glog.Fatal(err)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 是否使用动态配置</span></span><br><span class="line">    <span class="comment">// use dynamic kubelet config, if enabled</span></span><br><span class="line">    <span class="keyword">var</span> kubeletConfigController *dynamickubeletconfig.Controller</span><br><span class="line">    <span class="keyword">if</span> dynamicConfigDir := kubeletFlags.DynamicConfigDir.Value(); <span class="built_in">len</span>(dynamicConfigDir) &gt; <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> dynamicKubeletConfig *kubeletconfiginternal.KubeletConfiguration</span><br><span class="line">        dynamicKubeletConfig, kubeletConfigController, err = BootstrapKubeletConfigController(dynamicConfigDir,</span><br><span class="line">            <span class="function"><span class="keyword">func</span><span class="params">(kc *kubeletconfiginternal.KubeletConfiguration)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">                <span class="comment">// Here, we enforce flag precedence inside the controller, prior to the controller's validation sequence,</span></span><br><span class="line">                <span class="comment">// so that we get a complete validation at the same point where we can decide to reject dynamic config.</span></span><br><span class="line">                <span class="comment">// This fixes the flag-precedence component of issue #63305.</span></span><br><span class="line">                <span class="comment">// See issue #56171 for general details on flag precedence.</span></span><br><span class="line">                <span class="keyword">return</span> kubeletConfigFlagPrecedence(kc, args)</span><br><span class="line">            &#125;)</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">            glog.Fatal(err)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// If we should just use our existing, local config, the controller will return a nil config</span></span><br><span class="line">        <span class="keyword">if</span> dynamicKubeletConfig != <span class="literal">nil</span> &#123;</span><br><span class="line">            kubeletConfig = dynamicKubeletConfig</span><br><span class="line">            <span class="comment">// Note: flag precedence was already enforced in the controller, prior to validation,</span></span><br><span class="line">            <span class="comment">// by our above transform function. Now we simply update feature gates from the new config.</span></span><br><span class="line">            <span class="keyword">if</span> err := utilfeature.DefaultFeatureGate.SetFromMap(kubeletConfig.FeatureGates); err != <span class="literal">nil</span> &#123;</span><br><span class="line">                glog.Fatal(err)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// construct a KubeletServer from kubeletFlags and kubeletConfig</span></span><br><span class="line">    kubeletServer := &amp;options.KubeletServer&#123;</span><br><span class="line">        KubeletFlags:         *kubeletFlags,</span><br><span class="line">        KubeletConfiguration: *kubeletConfig,</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 获取tlsOptions、mountPath、dockerConfig、volumePlugin等</span></span><br><span class="line">    <span class="comment">// use kubeletServer to construct the default KubeletDeps</span></span><br><span class="line">    kubeletDeps, err := UnsecuredDependencies(kubeletServer)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        glog.Fatal(err)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// add the kubelet config controller to kubeletDeps</span></span><br><span class="line">    kubeletDeps.KubeletConfigController = kubeletConfigController</span><br><span class="line"></span><br><span class="line">    <span class="comment">// start the experimental docker shim, if enabled</span></span><br><span class="line">    <span class="keyword">if</span> kubeletServer.KubeletFlags.ExperimentalDockershim &#123;</span><br><span class="line">        <span class="keyword">if</span> err := RunDockershim(&amp;kubeletServer.KubeletFlags, kubeletConfig, stopCh); err != <span class="literal">nil</span> &#123;</span><br><span class="line">            glog.Fatal(err)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// run the kubelet</span></span><br><span class="line">    glog.V(<span class="number">5</span>).Infof(<span class="string">"KubeletConfiguration: %#v"</span>, kubeletServer.KubeletConfiguration)</span><br><span class="line">    <span class="keyword">if</span> err := Run(kubeletServer, kubeletDeps, stopCh); err != <span class="literal">nil</span> &#123;</span><br><span class="line">        glog.Fatal(err)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>此过程主要是对参数的处理，以生成kubelet server的配置及依赖，然后通过<code>Run(kubeletServer, kubeletDeps, stopCh)</code>启动kubelet。</p><h2 id="func-Run-s-options-KubeletServer-kubeDeps-kubelet-Dependencies-stopCh-lt-chan-struct"><a href="#func-Run-s-options-KubeletServer-kubeDeps-kubelet-Dependencies-stopCh-lt-chan-struct" class="headerlink" title="func Run(s *options.KubeletServer, kubeDeps *kubelet.Dependencies, stopCh &lt;-chan struct{})"></a><code>func Run(s *options.KubeletServer, kubeDeps *kubelet.Dependencies, stopCh &lt;-chan struct{})</code></h2><p><a href="https://github.com/kubernetes/kubernetes/blob/v1.11.7/cmd/kubelet/app/server.go#L406" target="_blank" rel="noopener"><code>kubernetes/cmd/kubelet/app/server.go</code></a><br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Run runs the specified KubeletServer with the given Dependencies. This should never exit.</span></span><br><span class="line"><span class="comment">// The kubeDeps argument may be nil - if so, it is initialized from the settings on KubeletServer.</span></span><br><span class="line"><span class="comment">// Otherwise, the caller is assumed to have set up the Dependencies object and a default one will</span></span><br><span class="line"><span class="comment">// not be generated.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Run</span><span class="params">(s *options.KubeletServer, kubeDeps *kubelet.Dependencies, stopCh &lt;-<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">    <span class="comment">// To help debugging, immediately log version</span></span><br><span class="line">    glog.Infof(<span class="string">"Version: %+v"</span>, version.Get())</span><br><span class="line">    <span class="keyword">if</span> err := initForOS(s.KubeletFlags.WindowsService); err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> fmt.Errorf(<span class="string">"failed OS init: %v"</span>, err)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> err := run(s, kubeDeps, stopCh); err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> fmt.Errorf(<span class="string">"failed to run Kubelet: %v"</span>, err)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="func-run-s-options-KubeletServer-kubeDeps-kubelet-Dependencies-stopCh-lt-chan-struct"><a href="#func-run-s-options-KubeletServer-kubeDeps-kubelet-Dependencies-stopCh-lt-chan-struct" class="headerlink" title="func run(s *options.KubeletServer, kubeDeps *kubelet.Dependencies, stopCh &lt;-chan struct{})"></a><code>func run(s *options.KubeletServer, kubeDeps *kubelet.Dependencies, stopCh &lt;-chan struct{})</code></h2><p><a href="https://github.com/kubernetes/kubernetes/blob/v1.11.7/cmd/kubelet/app/server.go#L469" target="_blank" rel="noopener"><code>kubernetes/cmd/kubelet/app/server.go</code></a><br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">run</span><span class="params">(s *options.KubeletServer, kubeDeps *kubelet.Dependencies, stopCh &lt;-<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line">    <span class="comment">// Set global feature gates based on the value on the initial KubeletServer</span></span><br><span class="line">    err = utilfeature.DefaultFeatureGate.SetFromMap(s.KubeletConfiguration.FeatureGates)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> err</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 验证kubelet config及flags</span></span><br><span class="line">    <span class="comment">// validate the initial KubeletServer (we set feature gates first, because this validation depends on feature gates)</span></span><br><span class="line">    <span class="keyword">if</span> err := options.ValidateKubeletServer(s); err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> err</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Obtain Kubelet Lock File</span></span><br><span class="line">    <span class="keyword">if</span> s.ExitOnLockContention &amp;&amp; s.LockFilePath == <span class="string">""</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> errors.New(<span class="string">"cannot exit on lock file contention: no lock file specified"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    done := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;)</span><br><span class="line">    <span class="keyword">if</span> s.LockFilePath != <span class="string">""</span> &#123;</span><br><span class="line">        glog.Infof(<span class="string">"acquiring file lock on %q"</span>, s.LockFilePath)</span><br><span class="line">        <span class="keyword">if</span> err := flock.Acquire(s.LockFilePath); err != <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> fmt.Errorf(<span class="string">"unable to acquire file lock on %q: %v"</span>, s.LockFilePath, err)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> s.ExitOnLockContention &#123;</span><br><span class="line">            glog.Infof(<span class="string">"watching for inotify events for: %v"</span>, s.LockFilePath)</span><br><span class="line">            <span class="keyword">if</span> err := watchForLockfileContention(s.LockFilePath, done); err != <span class="literal">nil</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> err</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Register current configuration with /configz endpoint</span></span><br><span class="line">    err = initConfigz(&amp;s.KubeletConfiguration)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        glog.Errorf(<span class="string">"unable to register KubeletConfiguration with configz, error: %v"</span>, err)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// About to get clients and such, detect standaloneMode</span></span><br><span class="line">    standaloneMode := <span class="literal">true</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(s.KubeConfig) &gt; <span class="number">0</span> &#123;</span><br><span class="line">        standaloneMode = <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 加载依赖服务相关，生成dockerClientConfig、mounter OOMAdjuster、ProbeVolumePlugins、GetDynamicPulginProber、tlsOptions等</span></span><br><span class="line">    <span class="keyword">if</span> kubeDeps == <span class="literal">nil</span> &#123;</span><br><span class="line">        kubeDeps, err = UnsecuredDependencies(s)</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> err</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 是否使用cloud provider</span></span><br><span class="line">    <span class="keyword">if</span> kubeDeps.Cloud == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> !cloudprovider.IsExternal(s.CloudProvider) &#123;</span><br><span class="line">            cloud, err := cloudprovider.InitCloudProvider(s.CloudProvider, s.CloudConfigFile)</span><br><span class="line">            <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> err</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> cloud == <span class="literal">nil</span> &#123;</span><br><span class="line">                glog.V(<span class="number">2</span>).Infof(<span class="string">"No cloud provider specified: %q from the config file: %q\n"</span>, s.CloudProvider, s.CloudConfigFile)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                glog.V(<span class="number">2</span>).Infof(<span class="string">"Successfully initialized cloud provider: %q from the config file: %q\n"</span>, s.CloudProvider, s.CloudConfigFile)</span><br><span class="line">            &#125;</span><br><span class="line">            kubeDeps.Cloud = cloud</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    nodeName, err := getNodeName(kubeDeps.Cloud, nodeutil.GetHostname(s.HostnameOverride))</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> err</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 验证kubeconfig，如果kubeconfig为空，则向kube-apiserver申请生成证书</span></span><br><span class="line">    <span class="keyword">if</span> s.BootstrapKubeconfig != <span class="string">""</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> err := bootstrap.LoadClientCert(s.KubeConfig, s.BootstrapKubeconfig, s.CertDirectory, nodeName); err != <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> err</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// if in standalone mode, indicate as much by setting all clients to nil</span></span><br><span class="line">    <span class="keyword">if</span> standaloneMode &#123;</span><br><span class="line">        kubeDeps.KubeClient = <span class="literal">nil</span></span><br><span class="line">        kubeDeps.ExternalKubeClient = <span class="literal">nil</span></span><br><span class="line">        kubeDeps.EventClient = <span class="literal">nil</span></span><br><span class="line">        kubeDeps.HeartbeatClient = <span class="literal">nil</span></span><br><span class="line">        glog.Warningf(<span class="string">"standalone mode, no API client"</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> kubeDeps.KubeClient == <span class="literal">nil</span> || kubeDeps.ExternalKubeClient == <span class="literal">nil</span> || kubeDeps.EventClient == <span class="literal">nil</span> || kubeDeps.HeartbeatClient == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="comment">// initialize clients if not standalone mode and any of the clients are not provided</span></span><br><span class="line">        <span class="keyword">var</span> kubeClient clientset.Interface</span><br><span class="line">        <span class="keyword">var</span> eventClient v1core.EventsGetter</span><br><span class="line">        <span class="keyword">var</span> heartbeatClient v1core.CoreV1Interface</span><br><span class="line">        <span class="keyword">var</span> externalKubeClient clientset.Interface</span><br><span class="line">        <span class="comment">// 生成api server客户端配置</span></span><br><span class="line">        clientConfig, err := createAPIServerClientConfig(s)</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> fmt.Errorf(<span class="string">"invalid kubeconfig: %v"</span>, err)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 启动证书管理客户端，是否自动续期</span></span><br><span class="line">        <span class="keyword">var</span> clientCertificateManager certificate.Manager</span><br><span class="line">        <span class="keyword">if</span> s.RotateCertificates &amp;&amp; utilfeature.DefaultFeatureGate.Enabled(features.RotateKubeletClientCertificate) &#123;</span><br><span class="line">            clientCertificateManager, err = kubeletcertificate.NewKubeletClientCertificateManager(s.CertDirectory, nodeName, clientConfig.CertData, clientConfig.KeyData, clientConfig.CertFile, clientConfig.KeyFile)</span><br><span class="line">            <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> err</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// we set exitAfter to five minutes because we use this client configuration to request new certs - if we are unable</span></span><br><span class="line">        <span class="comment">// to request new certs, we will be unable to continue normal operation. Exiting the process allows a wrapper</span></span><br><span class="line">        <span class="comment">// or the bootstrapping credentials to potentially lay down new initial config.</span></span><br><span class="line">        closeAllConns, err := kubeletcertificate.UpdateTransport(wait.NeverStop, clientConfig, clientCertificateManager, <span class="number">5</span>*time.Minute)</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> err</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 获取kubeClient客户端</span></span><br><span class="line">        kubeClient, err = clientset.NewForConfig(clientConfig)</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">            glog.Warningf(<span class="string">"New kubeClient from clientConfig error: %v"</span>, err)</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> kubeClient.CertificatesV1beta1() != <span class="literal">nil</span> &amp;&amp; clientCertificateManager != <span class="literal">nil</span> &#123;</span><br><span class="line">            glog.V(<span class="number">2</span>).Info(<span class="string">"Starting client certificate rotation."</span>)</span><br><span class="line">            clientCertificateManager.SetCertificateSigningRequestClient(kubeClient.CertificatesV1beta1().CertificateSigningRequests())</span><br><span class="line">            clientCertificateManager.Start()</span><br><span class="line">        &#125;</span><br><span class="line">        externalKubeClient, err = clientset.NewForConfig(clientConfig)</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">            glog.Warningf(<span class="string">"New kubeClient from clientConfig error: %v"</span>, err)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// make a separate client for events</span></span><br><span class="line">        <span class="comment">// 获取事件客户端</span></span><br><span class="line">        eventClientConfig := *clientConfig</span><br><span class="line">        eventClientConfig.QPS = <span class="keyword">float32</span>(s.EventRecordQPS)</span><br><span class="line">        eventClientConfig.Burst = <span class="keyword">int</span>(s.EventBurst)</span><br><span class="line">        eventClient, err = v1core.NewForConfig(&amp;eventClientConfig)</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">            glog.Warningf(<span class="string">"Failed to create API Server client for Events: %v"</span>, err)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// make a separate client for heartbeat with throttling disabled and a timeout attached</span></span><br><span class="line">        <span class="comment">// 获取心跳客户端</span></span><br><span class="line">        heartbeatClientConfig := *clientConfig</span><br><span class="line">        heartbeatClientConfig.Timeout = s.KubeletConfiguration.NodeStatusUpdateFrequency.Duration</span><br><span class="line">        heartbeatClientConfig.QPS = <span class="keyword">float32</span>(<span class="number">-1</span>)</span><br><span class="line">        heartbeatClient, err = v1core.NewForConfig(&amp;heartbeatClientConfig)</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">            glog.Warningf(<span class="string">"Failed to create API Server client for heartbeat: %v"</span>, err)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        kubeDeps.KubeClient = kubeClient</span><br><span class="line">        kubeDeps.ExternalKubeClient = externalKubeClient</span><br><span class="line">        <span class="keyword">if</span> heartbeatClient != <span class="literal">nil</span> &#123;</span><br><span class="line">            kubeDeps.HeartbeatClient = heartbeatClient</span><br><span class="line">            kubeDeps.OnHeartbeatFailure = closeAllConns</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> eventClient != <span class="literal">nil</span> &#123;</span><br><span class="line">            kubeDeps.EventClient = eventClient</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// If the kubelet config controller is available, and dynamic config is enabled, start the config and status sync loops</span></span><br><span class="line">    <span class="keyword">if</span> utilfeature.DefaultFeatureGate.Enabled(features.DynamicKubeletConfig) &amp;&amp; <span class="built_in">len</span>(s.DynamicConfigDir.Value()) &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">        kubeDeps.KubeletConfigController != <span class="literal">nil</span> &amp;&amp; !standaloneMode &amp;&amp; !s.RunOnce &#123;</span><br><span class="line">        <span class="keyword">if</span> err := kubeDeps.KubeletConfigController.StartSync(kubeDeps.KubeClient, kubeDeps.EventClient, <span class="keyword">string</span>(nodeName)); err != <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> err</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// kubelet 认证授权服务端</span></span><br><span class="line">    <span class="keyword">if</span> kubeDeps.Auth == <span class="literal">nil</span> &#123;</span><br><span class="line">        auth, err := BuildAuth(nodeName, kubeDeps.ExternalKubeClient, s.KubeletConfiguration)</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> err</span><br><span class="line">        &#125;</span><br><span class="line">        kubeDeps.Auth = auth</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 启动cAdvisor客户端</span></span><br><span class="line">    <span class="keyword">if</span> kubeDeps.CAdvisorInterface == <span class="literal">nil</span> &#123;</span><br><span class="line">        imageFsInfoProvider := cadvisor.NewImageFsInfoProvider(s.ContainerRuntime, s.RemoteRuntimeEndpoint)</span><br><span class="line">        kubeDeps.CAdvisorInterface, err = cadvisor.New(s.Address, <span class="keyword">uint</span>(s.CAdvisorPort), imageFsInfoProvider, s.RootDirectory, cadvisor.UsingLegacyCadvisorStats(s.ContainerRuntime, s.RemoteRuntimeEndpoint))</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> err</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Setup event recorder if required.</span></span><br><span class="line">    makeEventRecorder(kubeDeps, nodeName)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 启动容器管理服务：cgroups、mount、qos……</span></span><br><span class="line">    <span class="keyword">if</span> kubeDeps.ContainerManager == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> s.CgroupsPerQOS &amp;&amp; s.CgroupRoot == <span class="string">""</span> &#123;</span><br><span class="line">            glog.Infof(<span class="string">"--cgroups-per-qos enabled, but --cgroup-root was not specified.  defaulting to /"</span>)</span><br><span class="line">            s.CgroupRoot = <span class="string">"/"</span></span><br><span class="line">        &#125;</span><br><span class="line">        kubeReserved, err := parseResourceList(s.KubeReserved)</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> err</span><br><span class="line">        &#125;</span><br><span class="line">        systemReserved, err := parseResourceList(s.SystemReserved)</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> err</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> hardEvictionThresholds []evictionapi.Threshold</span><br><span class="line">        <span class="comment">// If the user requested to ignore eviction thresholds, then do not set valid values for hardEvictionThresholds here.</span></span><br><span class="line">        <span class="keyword">if</span> !s.ExperimentalNodeAllocatableIgnoreEvictionThreshold &#123;</span><br><span class="line">            hardEvictionThresholds, err = eviction.ParseThresholdConfig([]<span class="keyword">string</span>&#123;&#125;, s.EvictionHard, <span class="literal">nil</span>, <span class="literal">nil</span>, <span class="literal">nil</span>)</span><br><span class="line">            <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> err</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        experimentalQOSReserved, err := cm.ParseQOSReserved(s.QOSReserved)</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> err</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        devicePluginEnabled := utilfeature.DefaultFeatureGate.Enabled(features.DevicePlugins)</span><br><span class="line"></span><br><span class="line">        kubeDeps.ContainerManager, err = cm.NewContainerManager(</span><br><span class="line">            kubeDeps.Mounter,</span><br><span class="line">            kubeDeps.CAdvisorInterface,</span><br><span class="line">            cm.NodeConfig&#123;</span><br><span class="line">                RuntimeCgroupsName:    s.RuntimeCgroups,</span><br><span class="line">                SystemCgroupsName:     s.SystemCgroups,</span><br><span class="line">                KubeletCgroupsName:    s.KubeletCgroups,</span><br><span class="line">                ContainerRuntime:      s.ContainerRuntime,</span><br><span class="line">                CgroupsPerQOS:         s.CgroupsPerQOS,</span><br><span class="line">                CgroupRoot:            s.CgroupRoot,</span><br><span class="line">                CgroupDriver:          s.CgroupDriver,</span><br><span class="line">                KubeletRootDir:        s.RootDirectory,</span><br><span class="line">                ProtectKernelDefaults: s.ProtectKernelDefaults,</span><br><span class="line">                NodeAllocatableConfig: cm.NodeAllocatableConfig&#123;</span><br><span class="line">                    KubeReservedCgroupName:   s.KubeReservedCgroup,</span><br><span class="line">                    SystemReservedCgroupName: s.SystemReservedCgroup,</span><br><span class="line">                    EnforceNodeAllocatable:   sets.NewString(s.EnforceNodeAllocatable...),</span><br><span class="line">                    KubeReserved:             kubeReserved,</span><br><span class="line">                    SystemReserved:           systemReserved,</span><br><span class="line">                    HardEvictionThresholds:   hardEvictionThresholds,</span><br><span class="line">                &#125;,</span><br><span class="line">                QOSReserved:                           *experimentalQOSReserved,</span><br><span class="line">                ExperimentalCPUManagerPolicy:          s.CPUManagerPolicy,</span><br><span class="line">                ExperimentalCPUManagerReconcilePeriod: s.CPUManagerReconcilePeriod.Duration,</span><br><span class="line">                ExperimentalPodPidsLimit:              s.PodPidsLimit,</span><br><span class="line">                EnforceCPULimits:                      s.CPUCFSQuota,</span><br><span class="line">            &#125;,</span><br><span class="line">            s.FailSwapOn,</span><br><span class="line">            devicePluginEnabled,</span><br><span class="line">            kubeDeps.Recorder)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> err</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> err := checkPermissions(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">        glog.Error(err)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    utilruntime.ReallyCrash = s.ReallyCrashForTesting</span><br><span class="line"></span><br><span class="line">    rand.Seed(time.Now().UTC().UnixNano())</span><br><span class="line"></span><br><span class="line">    <span class="comment">// TODO(vmarmol): Do this through container config.</span></span><br><span class="line">    oomAdjuster := kubeDeps.OOMAdjuster</span><br><span class="line">    <span class="keyword">if</span> err := oomAdjuster.ApplyOOMScoreAdj(<span class="number">0</span>, <span class="keyword">int</span>(s.OOMScoreAdj)); err != <span class="literal">nil</span> &#123;</span><br><span class="line">        glog.Warning(err)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> err := RunKubelet(&amp;s.KubeletFlags, &amp;s.KubeletConfiguration, kubeDeps, s.RunOnce); err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> err</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 开启健康检查端口</span></span><br><span class="line">    <span class="keyword">if</span> s.HealthzPort &gt; <span class="number">0</span> &#123;</span><br><span class="line">        healthz.DefaultHealthz()</span><br><span class="line">        <span class="keyword">go</span> wait.Until(<span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">            err := http.ListenAndServe(net.JoinHostPort(s.HealthzBindAddress, strconv.Itoa(<span class="keyword">int</span>(s.HealthzPort))), <span class="literal">nil</span>)</span><br><span class="line">            <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">                glog.Errorf(<span class="string">"Starting health server failed: %v"</span>, err)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="number">5</span>*time.Second, wait.NeverStop)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> s.RunOnce &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// If systemd is used, notify it that we have started</span></span><br><span class="line">    <span class="keyword">go</span> daemon.SdNotify(<span class="literal">false</span>, <span class="string">"READY=1"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">select</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> &lt;-done:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">case</span> &lt;-stopCh:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="func-RunKubelet-kubeFlags-options-KubeletFlags-kubeCfg-kubeletconfiginternal-KubeletConfiguration-kubeDeps-kubelet-Dependencies-runOnce-bool"><a href="#func-RunKubelet-kubeFlags-options-KubeletFlags-kubeCfg-kubeletconfiginternal-KubeletConfiguration-kubeDeps-kubelet-Dependencies-runOnce-bool" class="headerlink" title="func RunKubelet(kubeFlags *options.KubeletFlags, kubeCfg *kubeletconfiginternal.KubeletConfiguration, kubeDeps *kubelet.Dependencies, runOnce bool)"></a><code>func RunKubelet(kubeFlags *options.KubeletFlags, kubeCfg *kubeletconfiginternal.KubeletConfiguration, kubeDeps *kubelet.Dependencies, runOnce bool)</code></h2><p><a href="https://github.com/kubernetes/kubernetes/blob/v1.11.7/cmd/kubelet/app/server.go#L890" target="_blank" rel="noopener"><code>kubernetes/cmd/kubelet/app/server.go</code></a><br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// RunKubelet is responsible for setting up and running a kubelet.  It is used in three different applications:</span></span><br><span class="line"><span class="comment">//   1 Integration tests</span></span><br><span class="line"><span class="comment">//   2 Kubelet binary</span></span><br><span class="line"><span class="comment">//   3 Standalone 'kubernetes' binary</span></span><br><span class="line"><span class="comment">// Eventually, #2 will be replaced with instances of #3</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">RunKubelet</span><span class="params">(kubeFlags *options.KubeletFlags, kubeCfg *kubeletconfiginternal.KubeletConfiguration, kubeDeps *kubelet.Dependencies, runOnce <span class="keyword">bool</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">    hostname := nodeutil.GetHostname(kubeFlags.HostnameOverride)</span><br><span class="line">    <span class="comment">// Query the cloud provider for our node name, default to hostname if kubeDeps.Cloud == nil</span></span><br><span class="line">    nodeName, err := getNodeName(kubeDeps.Cloud, hostname)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> err</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Setup event recorder if required.</span></span><br><span class="line">    makeEventRecorder(kubeDeps, nodeName)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// TODO(mtaufen): I moved the validation of these fields here, from UnsecuredKubeletConfig,</span></span><br><span class="line">    <span class="comment">//                so that I could remove the associated fields from KubeletConfiginternal. I would</span></span><br><span class="line">    <span class="comment">//                prefer this to be done as part of an independent validation step on the</span></span><br><span class="line">    <span class="comment">//                KubeletConfiguration. But as far as I can tell, we don't have an explicit</span></span><br><span class="line">    <span class="comment">//                place for validation of the KubeletConfiguration yet.</span></span><br><span class="line">    hostNetworkSources, err := kubetypes.GetValidatedSources(kubeFlags.HostNetworkSources)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> err</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    hostPIDSources, err := kubetypes.GetValidatedSources(kubeFlags.HostPIDSources)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> err</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    hostIPCSources, err := kubetypes.GetValidatedSources(kubeFlags.HostIPCSources)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> err</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    privilegedSources := capabilities.PrivilegedSources&#123;</span><br><span class="line">        HostNetworkSources: hostNetworkSources,</span><br><span class="line">        HostPIDSources:     hostPIDSources,</span><br><span class="line">        HostIPCSources:     hostIPCSources,</span><br><span class="line">    &#125;</span><br><span class="line">    capabilities.Setup(kubeFlags.AllowPrivileged, privilegedSources, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    credentialprovider.SetPreferredDockercfgPath(kubeFlags.RootDirectory)</span><br><span class="line">    glog.V(<span class="number">2</span>).Infof(<span class="string">"Using root directory: %v"</span>, kubeFlags.RootDirectory)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> kubeDeps.OSInterface == <span class="literal">nil</span> &#123;</span><br><span class="line">        kubeDeps.OSInterface = kubecontainer.RealOS&#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    k, err := CreateAndInitKubelet(kubeCfg,</span><br><span class="line">        kubeDeps,</span><br><span class="line">        &amp;kubeFlags.ContainerRuntimeOptions,</span><br><span class="line">        kubeFlags.ContainerRuntime,</span><br><span class="line">        kubeFlags.RuntimeCgroups,</span><br><span class="line">        kubeFlags.HostnameOverride,</span><br><span class="line">        kubeFlags.NodeIP,</span><br><span class="line">        kubeFlags.ProviderID,</span><br><span class="line">        kubeFlags.CloudProvider,</span><br><span class="line">        kubeFlags.CertDirectory,</span><br><span class="line">        kubeFlags.RootDirectory,</span><br><span class="line">        kubeFlags.RegisterNode,</span><br><span class="line">        kubeFlags.RegisterWithTaints,</span><br><span class="line">        kubeFlags.AllowedUnsafeSysctls,</span><br><span class="line">        kubeFlags.RemoteRuntimeEndpoint,</span><br><span class="line">        kubeFlags.RemoteImageEndpoint,</span><br><span class="line">        kubeFlags.ExperimentalMounterPath,</span><br><span class="line">        kubeFlags.ExperimentalKernelMemcgNotification,</span><br><span class="line">        kubeFlags.ExperimentalCheckNodeCapabilitiesBeforeMount,</span><br><span class="line">        kubeFlags.ExperimentalNodeAllocatableIgnoreEvictionThreshold,</span><br><span class="line">        kubeFlags.MinimumGCAge,</span><br><span class="line">        kubeFlags.MaxPerPodContainerCount,</span><br><span class="line">        kubeFlags.MaxContainerCount,</span><br><span class="line">        kubeFlags.MasterServiceNamespace,</span><br><span class="line">        kubeFlags.RegisterSchedulable,</span><br><span class="line">        kubeFlags.NonMasqueradeCIDR,</span><br><span class="line">        kubeFlags.KeepTerminatedPodVolumes,</span><br><span class="line">        kubeFlags.NodeLabels,</span><br><span class="line">        kubeFlags.SeccompProfileRoot,</span><br><span class="line">        kubeFlags.BootstrapCheckpointPath,</span><br><span class="line">        kubeFlags.NodeStatusMaxImages)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> fmt.Errorf(<span class="string">"failed to create kubelet: %v"</span>, err)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// NewMainKubelet should have set up a pod source config if one didn't exist</span></span><br><span class="line">    <span class="comment">// when the builder was run. This is just a precaution.</span></span><br><span class="line">    <span class="keyword">if</span> kubeDeps.PodConfig == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> fmt.Errorf(<span class="string">"failed to create kubelet, pod source config was nil"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    podCfg := kubeDeps.PodConfig</span><br><span class="line"></span><br><span class="line">    rlimit.RlimitNumFiles(<span class="keyword">uint64</span>(kubeCfg.MaxOpenFiles))</span><br><span class="line"></span><br><span class="line">    <span class="comment">// process pods and exit.</span></span><br><span class="line">    <span class="keyword">if</span> runOnce &#123;</span><br><span class="line">        <span class="keyword">if</span> _, err := k.RunOnce(podCfg.Updates()); err != <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> fmt.Errorf(<span class="string">"runonce failed: %v"</span>, err)</span><br><span class="line">        &#125;</span><br><span class="line">        glog.Infof(<span class="string">"Started kubelet as runonce"</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        startKubelet(k, podCfg, kubeCfg, kubeDeps, kubeFlags.EnableServer)</span><br><span class="line">        glog.Infof(<span class="string">"Started kubelet"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="func-CreateAndInitKubelet-……"><a href="#func-CreateAndInitKubelet-……" class="headerlink" title="func CreateAndInitKubelet(……)"></a><code>func CreateAndInitKubelet(……)</code></h2><p><a href="https://github.com/kubernetes/kubernetes/blob/v1.11.7/cmd/kubelet/app/server.go#L1019" target="_blank" rel="noopener"><code>kubernetes/cmd/kubelet/app/server.go</code></a><br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">CreateAndInitKubelet</span><span class="params">(kubeCfg *kubeletconfiginternal.KubeletConfiguration,</span></span></span><br><span class="line"><span class="function"><span class="params">    kubeDeps *kubelet.Dependencies,</span></span></span><br><span class="line"><span class="function"><span class="params">    crOptions *config.ContainerRuntimeOptions,</span></span></span><br><span class="line"><span class="function"><span class="params">    containerRuntime <span class="keyword">string</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">    runtimeCgroups <span class="keyword">string</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">    hostnameOverride <span class="keyword">string</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">    nodeIP <span class="keyword">string</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">    providerID <span class="keyword">string</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">    cloudProvider <span class="keyword">string</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">    certDirectory <span class="keyword">string</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">    rootDirectory <span class="keyword">string</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">    registerNode <span class="keyword">bool</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">    registerWithTaints []api.Taint,</span></span></span><br><span class="line"><span class="function"><span class="params">    allowedUnsafeSysctls []<span class="keyword">string</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">    remoteRuntimeEndpoint <span class="keyword">string</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">    remoteImageEndpoint <span class="keyword">string</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">    experimentalMounterPath <span class="keyword">string</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">    experimentalKernelMemcgNotification <span class="keyword">bool</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">    experimentalCheckNodeCapabilitiesBeforeMount <span class="keyword">bool</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">    experimentalNodeAllocatableIgnoreEvictionThreshold <span class="keyword">bool</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">    minimumGCAge metav1.Duration,</span></span></span><br><span class="line"><span class="function"><span class="params">    maxPerPodContainerCount <span class="keyword">int32</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">    maxContainerCount <span class="keyword">int32</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">    masterServiceNamespace <span class="keyword">string</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">    registerSchedulable <span class="keyword">bool</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">    nonMasqueradeCIDR <span class="keyword">string</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">    keepTerminatedPodVolumes <span class="keyword">bool</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">    nodeLabels <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">    seccompProfileRoot <span class="keyword">string</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">    bootstrapCheckpointPath <span class="keyword">string</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">    nodeStatusMaxImages <span class="keyword">int32</span>)</span> <span class="params">(k kubelet.Bootstrap, err error)</span></span> &#123;</span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> block until all sources have delivered at least one update to the channel, or break the sync loop</span></span><br><span class="line">    <span class="comment">// up into "per source" synchronizations</span></span><br><span class="line"></span><br><span class="line">    k, err = kubelet.NewMainKubelet(kubeCfg,</span><br><span class="line">        kubeDeps,</span><br><span class="line">        crOptions,</span><br><span class="line">        containerRuntime,</span><br><span class="line">        runtimeCgroups,</span><br><span class="line">        hostnameOverride,</span><br><span class="line">        nodeIP,</span><br><span class="line">        providerID,</span><br><span class="line">        cloudProvider,</span><br><span class="line">        certDirectory,</span><br><span class="line">        rootDirectory,</span><br><span class="line">        registerNode,</span><br><span class="line">        registerWithTaints,</span><br><span class="line">        allowedUnsafeSysctls,</span><br><span class="line">        remoteRuntimeEndpoint,</span><br><span class="line">        remoteImageEndpoint,</span><br><span class="line">        experimentalMounterPath,</span><br><span class="line">        experimentalKernelMemcgNotification,</span><br><span class="line">        experimentalCheckNodeCapabilitiesBeforeMount,</span><br><span class="line">        experimentalNodeAllocatableIgnoreEvictionThreshold,</span><br><span class="line">        minimumGCAge,</span><br><span class="line">        maxPerPodContainerCount,</span><br><span class="line">        maxContainerCount,</span><br><span class="line">        masterServiceNamespace,</span><br><span class="line">        registerSchedulable,</span><br><span class="line">        nonMasqueradeCIDR,</span><br><span class="line">        keepTerminatedPodVolumes,</span><br><span class="line">        nodeLabels,</span><br><span class="line">        seccompProfileRoot,</span><br><span class="line">        bootstrapCheckpointPath,</span><br><span class="line">        nodeStatusMaxImages)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 宣告出生</span></span><br><span class="line">    k.BirthCry()</span><br><span class="line">    <span class="comment">// 启动垃圾回收服务</span></span><br><span class="line">    k.StartGarbageCollection()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> k, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>创建kubelet对象，具体过程<code>kubelet.NewMainKubelet()</code>详见下一篇分析。</p><h2 id="func-startKubelet-k-kubelet-Bootstrap-podCfg-config-PodConfig-kubeCfg-kubeletconfiginternal-KubeletConfiguration-kubeDeps-kubelet-Dependencies-enableServer-bool"><a href="#func-startKubelet-k-kubelet-Bootstrap-podCfg-config-PodConfig-kubeCfg-kubeletconfiginternal-KubeletConfiguration-kubeDeps-kubelet-Dependencies-enableServer-bool" class="headerlink" title="func startKubelet(k kubelet.Bootstrap, podCfg *config.PodConfig, kubeCfg *kubeletconfiginternal.KubeletConfiguration, kubeDeps *kubelet.Dependencies, enableServer bool)"></a><code>func startKubelet(k kubelet.Bootstrap, podCfg *config.PodConfig, kubeCfg *kubeletconfiginternal.KubeletConfiguration, kubeDeps *kubelet.Dependencies, enableServer bool)</code></h2><p><a href="https://github.com/kubernetes/kubernetes/blob/v1.11.7/cmd/kubelet/app/server.go#L991" target="_blank" rel="noopener"><code>kubernetes/cmd/kubelet/app/server.go</code></a><br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">startKubelet</span><span class="params">(k kubelet.Bootstrap, podCfg *config.PodConfig, kubeCfg *kubeletconfiginternal.KubeletConfiguration, kubeDeps *kubelet.Dependencies, enableServer <span class="keyword">bool</span>)</span></span> &#123;</span><br><span class="line">    wg := sync.WaitGroup&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// start the kubelet</span></span><br><span class="line">    wg.Add(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">go</span> wait.Until(<span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        wg.Done()</span><br><span class="line">        k.Run(podCfg.Updates())</span><br><span class="line">    &#125;, <span class="number">0</span>, wait.NeverStop)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// start the kubelet server</span></span><br><span class="line">    <span class="keyword">if</span> enableServer &#123;</span><br><span class="line">        wg.Add(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">go</span> wait.Until(<span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">            wg.Done()</span><br><span class="line">            k.ListenAndServe(net.ParseIP(kubeCfg.Address), <span class="keyword">uint</span>(kubeCfg.Port), kubeDeps.TLSOptions, kubeDeps.Auth, kubeCfg.EnableDebuggingHandlers, kubeCfg.EnableContentionProfiling)</span><br><span class="line">        &#125;, <span class="number">0</span>, wait.NeverStop)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> kubeCfg.ReadOnlyPort &gt; <span class="number">0</span> &#123;</span><br><span class="line">        wg.Add(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">go</span> wait.Until(<span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">            wg.Done()</span><br><span class="line">            k.ListenAndServeReadOnly(net.ParseIP(kubeCfg.Address), <span class="keyword">uint</span>(kubeCfg.ReadOnlyPort))</span><br><span class="line">        &#125;, <span class="number">0</span>, wait.NeverStop)</span><br><span class="line">    &#125;</span><br><span class="line">    wg.Wait()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行kubelet及server，具体过程<code>k.Run(podCfg.Updates())</code>见下一篇分析。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/2019/01/28/Kubernetes源码阅读—kubelet(一)/kubelet.jpg&quot; alt=&quot;kubelet&quot;&gt;&lt;br&gt;没有特别指出的情况下，该系列的代码分析均基于&lt;strong&gt;Kubernetes v1.11.7&lt;/strong&gt;版
      
    
    </summary>
    
    
      <category term="Kubernetes" scheme="http://xizie.com/tags/Kubernetes/"/>
    
  </entry>
  
</feed>
